{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","path":"css/cyberpunk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","path":"css/default.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","path":"img/logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","path":"img/favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","path":"img/og_image.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","path":"img/razor-bottom-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","path":"img/razor-top-black.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","path":"js/animation.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","path":"js/back_to_top.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","path":"js/column.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","path":"js/main.js","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/02-go-start.md","hash":"5b575c7e771d9026a528b85219dc68abe233c8ba","modified":1674371118835},{"_id":"source/_drafts/js-snippets.md","hash":"999e3f811f67f582dcb0d11d90c1cf5c96ffa0ca","modified":1674371006168},{"_id":"source/_drafts/react-error.md","hash":"2b9e7e8bb302cc57493b937c6dc35ad91b96239a","modified":1674371118835},{"_id":"source/_posts/03-go-signal.md","hash":"c205a38f3c60b17a758b29c1285db30eb90cc2e4","modified":1651388996186},{"_id":"source/_posts/04-go-gin-http.md","hash":"f8e0f9d009e62640fe45392c43d055b795502f5f","modified":1674371006168},{"_id":"source/_posts/03-go-Module.md","hash":"a3f9ca0ae362eac33d7864d7c93b48eb005022f3","modified":1674371006043},{"_id":"source/.DS_Store","hash":"57999cbdaa5fda05f8f0777f33c8af76ed82ac67","modified":1657634252626},{"_id":"source/_posts/06-go-zap-log.md","hash":"143b5c77b90264c607f39b3872ee21aa8e6a7e54","modified":1665457753234},{"_id":"source/_posts/13-go-pprof-gosec.md","hash":"9cf46101664a8e1a9e7a851f0aa6a2562f8bebd5","modified":1674371118835},{"_id":"source/_posts/Kubernetes.md","hash":"735fb73598532176a5c4a4add6aa78d78da60c51","modified":1674371006168},{"_id":"source/_posts/05-go-test-coverage.md","hash":"9b24fe4b97bc0c1d8690e2d9f3b196e889bdd325","modified":1674371118757},{"_id":"source/_posts/blog-gitbook.md","hash":"eac7c8471dde88ca8168c1a6baf1987070312654","modified":1674371118835},{"_id":"source/_posts/aws-s3.md","hash":"f8e0815428ddc7bc7350c970d6636e879584def3","modified":1674371118835},{"_id":"source/_posts/01-go-env.md","hash":"eadf1a5000ea812117529b07fe4c7df034910a54","modified":1674371118835},{"_id":"source/_posts/blog-docusaurus-01.md","hash":"28e6be01b42c92cc8f3a37c59c3e033483e5dca9","modified":1674371118835},{"_id":"source/_posts/blog-hexo-01-hello-world.md","hash":"2bdbdb6a1f031069407149b669be547dee777d8a","modified":1674371118759},{"_id":"source/_posts/07-go-time.md","hash":"8fe3704f2a5b0086ace79aa87c28fb747b71fe96","modified":1674371118835},{"_id":"source/_posts/blog-hugo.md","hash":"5fb125bbd2d8529aad8cac5b076c46d2d5fc0645","modified":1674371118835},{"_id":"source/about/index.md","hash":"45a41a63d688d1c0f0a3cbe780128fa1ab6bbd51","modified":1674371006168},{"_id":"source/_posts/docker-mongo.md","hash":"757c58e30d5365e77cdc51192c1dcd572a16a225","modified":1674371049867},{"_id":"source/_posts/console-debug.md","hash":"14e8c2bd35a444949f1f1af7245a57ba67098ec5","modified":1674371118757},{"_id":"source/_posts/docker-elastic-kibana.md","hash":"9f4eb1b90efeb6fd5fc57a0731b433dcbad2ff89","modified":1674371118835},{"_id":"source/_posts/docker-cli.md","hash":"2e08572ee8eca6c2a4adac27e3d795b004f5e212","modified":1674371118835},{"_id":"source/_posts/docker-ubuntu-vnc.md","hash":"a5d5e50d76340636da388e26047bb2090dcdaf0d","modified":1651388996191},{"_id":"source/_posts/fake-file.md","hash":"c9f9f031e1b43ced17c5954671abb5f80470cc5e","modified":1674371006043},{"_id":"source/_posts/blog-hexo-03-plug.md","hash":"b0dadc56c5c2830f083d4e40170549e56c9a06ab","modified":1674371118837},{"_id":"source/_posts/github-profile-page.md","hash":"f84241ac552502c59fb8cb92a94e3749d2ac5663","modified":1674371006168},{"_id":"source/_posts/jmeter.md","hash":"e8c120b59d9e7e77b9364c7acf611535a6ed5fc4","modified":1674371118835},{"_id":"source/_posts/java-jvm-memory.md","hash":"795dc2e55a0b26b0426edc89a61b676fbed532e2","modified":1674371118835},{"_id":"source/_posts/js-start-01.md","hash":"2515ada7d28015aee7b52fc6ed7618be92fffec2","modified":1674371118835},{"_id":"source/_posts/java-spring-asnc.md","hash":"480e038900b8d111f8801449dfb748875066214e","modified":1674371118835},{"_id":"source/_posts/linux-CLI.md","hash":"250b553dceb160d80f6d6c076fd92d0609d9931c","modified":1674371006043},{"_id":"source/_posts/blog-hexo-02-themes.md","hash":"d1efaf1994fdc4b4b48dfbe0aa127284b93a4ca9","modified":1674371118835},{"_id":"source/_posts/js-start-02.md","hash":"b13ff917b4cfb522d1c80851d3ed5dc1b88156b9","modified":1674371118835},{"_id":"source/_posts/heroku-deploy.md","hash":"1badbdc9c9f589b29d773ca83949dcaf1da9a9d1","modified":1674371118784},{"_id":"source/_posts/python-note.md","hash":"8a73e24a37d3feef6914e20159c4a21ae461200c","modified":1674371006044},{"_id":"source/_posts/python-vscode.md","hash":"c299647276cd3c65d996833b224ba6fb8877d635","modified":1674371006043},{"_id":"source/_posts/monitor-promethus-grafana.md","hash":"89aaf274777bca64a35ded51c0816ead9701929d","modified":1674371118784},{"_id":"source/_posts/note-css-html.md","hash":"cfc8c5ce9d4b4170592c41e21a4712ee7f212d59","modified":1662693086136},{"_id":"source/_posts/react-recharts.md","hash":"2ddda10c2e7b567a4eab7875deaba09637dbd868","modified":1674371118759},{"_id":"source/_posts/react-todo.md","hash":"01186cd722eda37a8b55b223cfb72dd9f904324f","modified":1651388996195},{"_id":"source/_posts/react-css.md","hash":"7f73981dd78a14f0caebea3315b0b3ff25aec1c5","modified":1651388996194},{"_id":"source/_posts/react-ramda.md","hash":"2728b015777a62134cd2ccb2600d4c1c34dc1f60","modified":1674371118835},{"_id":"source/_posts/react01-create-react-app.md","hash":"a61952651647e79b3638f87730933052c40f8455","modified":1674371006043},{"_id":"source/_posts/react02-jsx.md","hash":"fd66420c243b7d7dfd40c0c09deeb02af9326010","modified":1674371118784},{"_id":"source/_posts/react03-component-props.md","hash":"f41aa058e750f6f7a9f237eb0179811b967b4fc1","modified":1674371006105},{"_id":"source/_posts/vscode-plugin.md","hash":"23e1caeacb13d21a13d239e5f546211f43a1f66a","modified":1674371118784},{"_id":"source/categories/index.md","hash":"a7b8df1d4acbc8ad55dbe67bd0030d1d86220a77","modified":1651388996196},{"_id":"source/tags/index.md","hash":"ecaa42170bc84b027ccd5edcf97eb751bb8c152c","modified":1651388996196},{"_id":"node_modules/hexo-theme-icarus/layout/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/comment/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/donate/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/misc/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/search/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/share/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/package.json","hash":"568336a76c1d97aaacfb365ccd7356c058cad583","modified":1674371409023},{"_id":"node_modules/hexo-theme-icarus/include/config.js","hash":"1ff0f174e9670074ad2bee890d5b6da486800c9a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/dependency.js","hash":"0ca35dec92ccf383f45db905db1a5a0e92d7209e","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/register.js","hash":"ec6596b63bfb4349ba61792d905abe8e06fea625","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/CONTRIBUTING.md","hash":"70254c6778c1e41bb2ff222bbf3a70b2239b9bc1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/README.md","hash":"32f9f4fc8cd7ec60b30544bd2e558b593519ae5d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/LICENSE","hash":"86037e5335a49321fa73b7815cab542057fac944","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/en.yml","hash":"3d674204d9f723c829226da745afddd180c1131d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/de.yml","hash":"78421f09961ca0b24756a0688fb2cb2e2696e25f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/es.yml","hash":"38579b8fad4b6997362acc770615bcd85ff20f68","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/fr.yml","hash":"06d5c819d6108a42b28cff7b52e5410d0bed55d1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/id.yml","hash":"5e48b1d62378cadeb64b88349477726a5c1bae47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ja.yml","hash":"801d9930fef48d6a3f80470d5bed4f3eb78147e6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ko.yml","hash":"e3374265377809c1518114cf352b595840c0b416","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pl.yml","hash":"2e7debb44cd91096f30efc87bf8d6b1d0d0214c9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/ru.yml","hash":"9d91358c2acbe7a0f2a25daf7f65b999ff32d068","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/pt-BR.yml","hash":"ee8f73350e4c6e2f63b7fc72b34472a6b1e21244","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tk.yml","hash":"ca583168bd2025124a1cd0e977da475d7a7496fd","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/tr.yml","hash":"dd0a7bfe14848d6e1aa229198fe1db03e08e305e","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/vn.yml","hash":"5f2fffa642110c81d8f529949711c9d19ad6bbbe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-CN.yml","hash":"02475ba14afc70dfeaf5678467cee307835e4efa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/languages/zh-TW.yml","hash":"a6826e0c8cdb9ad286324b682b466a9e2ad78e6f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/archive.jsx","hash":"99bf235042d0c57af15d2f108ba5eda77443fea8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/categories.jsx","hash":"b8ad43e28a4990d222bfbb95b032f88555492347","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/category.jsx","hash":"fd15e4eac32de9ac8687aeb3dbe179ab61375700","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/index.jsx","hash":"0a84a2348394fa9fc5080dd396bd28d357594f47","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/layout.jsx","hash":"ac7c4e3465a116c7f05f8c2e09ee6d6b9467abf1","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/page.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/scripts/index.js","hash":"0c666db6fcb4ffc4d300f4e108c00ee42b1cbbe6","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/head.js","hash":"7189efe33d18927d3790e8afb06642fb293b8603","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/post.jsx","hash":"d26c2db57e5a88d6483a03aeb51cda9d191d8cea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tag.jsx","hash":"d2f18cac32ca2725d34ccff3f2051c623be6c892","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/tags.jsx","hash":"2c42cb64778235dd220c563a27a92108ddc50cc4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v5_v5.1.js","hash":"073f22bd16e34b56f016633b1676dab2e7d8843d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v2_v3.js","hash":"3ccb2d2ce11018bebd7172da66faecc3983bff00","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/config.json","hash":"b949c52d02d5ee520ae4666a016ce91faf6fb350","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v3_v4.js","hash":"9faf2184d7fe87debfbe007f3fc9079dcbcafcfe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/migration/v4_v5.js","hash":"6342310892d113763b5544789b45d44c0ccf2854","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/article.styl","hash":"105c983871b6c9148d97a0f756886e56411572bd","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/card.styl","hash":"f78674422eb408cd17c17bbdc3ee1ebe4a453e05","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/button.styl","hash":"0fb35b4786be1b387c751fa2849bc71523fcedd4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/base.styl","hash":"2bca6ad099949d52236c87db8db1002ffb99774c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/codeblock.styl","hash":"ec54dc24eb4d9802d8fefc44c210558bc1641109","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/donate.styl","hash":"8d0af00628c13134b5f30a558608e7bebf18c2ec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/footer.styl","hash":"a4ad715dee38b249538ac6cce94efc9b355a904b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/helper.styl","hash":"9f3393e6122cc9f351091bfab960674e962da343","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/navbar.styl","hash":"34f09b144cb46a25ec2cc7260a6c207dd34ff1fe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/pagination.styl","hash":"b81bcd7ff915b4e9299533addc01bc4575ec35e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/plugin.styl","hash":"084843d5a522029e0f84a4fe791fbcb2cabd4c36","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/responsive.styl","hash":"207083fe287612cddee6608b541861b14ac8de81","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/util/console.js","hash":"59cf9d277d3ac85a496689bd811b1c316001641d","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/timeline.styl","hash":"ea61798a09bffdda07efb93c2ff800b63bddc4c4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/search.styl","hash":"416737e1da4e7e907bd03609b0fee9e2aacfe56c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/style/widget.styl","hash":"c746902251136544eb3fe523235b3183f4189460","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/article.jsx","hash":"efe38d9c10d6421f142407651b6230e257a57451","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/comment.jsx","hash":"427089c33002707b76e2f38709459a6824fd0f9b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/donates.jsx","hash":"889fb0a7ccc502f0a43b4a18eb330e351e50493c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/footer.jsx","hash":"baa8e40e036a3ec0114d96893b708435104b4ba9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/head.jsx","hash":"2ec1f511f32e3a9c86d49f1338f57ae5ece18898","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/navbar.jsx","hash":"d96e501e52861056474659f96ee0206588d8c93a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/plugins.jsx","hash":"f6826c1a5f5f59f4a0aa00c63bdb0ad4ff4eab69","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/scripts.jsx","hash":"4816c9099a881b5f7b13af3e42caae36edbffccd","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/search.jsx","hash":"6f244a37293031670a2964fe424ecd062e591d7b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/share.jsx","hash":"c9fb0319ad5e5a10ad3636b26a6c2afed14c590f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/common/widgets.jsx","hash":"251263b97de12f2b8d1fce2514e83430f2515b94","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/animejs.jsx","hash":"e2aa27c3501a58ef1e91e511557b77395c2c02aa","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/plugin/back_to_top.jsx","hash":"7fc0c5aaabd7d0eaff04cb68ec139442dc3414e8","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/cyberpunk.styl","hash":"ae17d3528df0c3f089df14a06b7bd82f1bc5fed9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/default.styl","hash":"b01da3028e5a1267a40aaae5c86a11187a2259e3","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/layout/widget/profile.jsx","hash":"0d3a7fd922c12cc45d2c8d26a8f4d3a9a6ed0ae0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/favicon.svg","hash":"16fd847265845063a16596761cddb32926073dd2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/logo.svg","hash":"e9b5c1438ddb576693a15d0713b2a1d9ceda4be9","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/avatar.png","hash":"0d8236dcca871735500e9d06bbdbe0853ed6775b","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/css/style.styl","hash":"5b9815586e993a6ccbe8cdcfc0c65ea38fc315ac","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-top-black.svg","hash":"201f1171a43ce667a39091fe47c0f278857f18f0","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/animation.js","hash":"0a8e361c353daa3194f4de3d646b96025d128e1a","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/og_image.png","hash":"b03f163096ca9c350ec962feee9836277b5c2509","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/img/razor-bottom-black.svg","hash":"a3eda07b1c605b456da9cdf335a1075db5e5d72c","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/comment.json","hash":"f49270b619f5d2c3decde6b0b5a0c3bbab4b54a5","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/article.json","hash":"e2502c39045c6a26ccd8e880858f93e78c7bda35","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/column.js","hash":"0baee024ab67474c073a4c41b495f3e7f0df4505","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/donates.json","hash":"ae86e6f177bedf4afbe638502c12635027539305","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/back_to_top.js","hash":"d91f10c08c726135a13dfa1f422c49d8764ef03f","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/footer.json","hash":"09d706cbb94d6da9a0d15c719ce7139325cae1c7","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/source/js/main.js","hash":"08a2641765eeaf712157ad134dd675e3f7708ae2","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/head.json","hash":"98889f059c635e6bdbd51effd04cf1cf44968a66","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/plugins.json","hash":"6036a805749816416850d944f7d64aaae62e5e75","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/navbar.json","hash":"6691e587284c4cf450e0288680d5ff0f3565f090","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/providers.json","hash":"97ec953d497fb53594227ae98acaef8a8baa91da","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/search.json","hash":"985fbcbf47054af714ead1a124869d54f2a8b607","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/share.json","hash":"cf4f9ff4fb27c3541b35f57db355c228fa6873e4","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/sidebar.json","hash":"eb241beaec4c73e3085dfb3139ce72e827e20549","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/common/widgets.json","hash":"cadd9dc942740ecd5037d3943e72f8b6a8399bbe","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/animejs.json","hash":"e62ab6e20bd8862efa1ed32e7c0db0f8acbcfdec","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/plugin/back_to_top.json","hash":"dc0febab7e7b67075d0ad3f80f5ec8b798b68dea","modified":499162500000},{"_id":"node_modules/hexo-theme-icarus/include/schema/widget/profile.json","hash":"690ee1b0791cab47ea03cf42b5b4932ed2aa5675","modified":499162500000}],"Category":[{"name":"Tech.","_id":"cld71fha20004kp2x8p5g7jnw"},{"name":"back-end","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhae000kkp2x8tsybvoe"},{"name":"Web","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhah000pkp2x2m559w67"},{"name":"golang","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhb5001zkp2xdxbpe6wc"},{"name":"deploy","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbb002gkp2xbmz05lqe"},{"name":"front-end","parent":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbe002okp2x9dxk0o0x"},{"name":"cloud","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbg002ukp2xf8942u5s"},{"name":"blog","parent":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbj0033kp2x6ma78hvk"},{"name":"docker","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbv004fkp2x4ld5973i"},{"name":"Mac","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc1005bkp2x2uuq6yjr"},{"name":"GitHub","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc1005fkp2xg6do8oju"},{"name":"java","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc4005rkp2x3jsic08x"},{"name":"test","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc60061kp2xhqey5hxn"},{"name":"linux","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc8006ckp2x2py56kko"},{"name":"monitor","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc9006gkp2x0sm97izf"},{"name":"Kubernetes","parent":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhcc006rkp2xh6jd1f2r"},{"name":"python","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhcg006wkp2x1ecx8tc1"},{"name":"react","parent":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhck0076kp2x5brl2x1i"},{"name":"storage","parent":"cld71fhbg002ukp2xf8942u5s","_id":"cld71fhco007qkp2x30c25qa1"},{"name":"tool","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcs008fkp2x6d4k8m1y"},{"name":"tool","parent":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcv008nkp2x39klb5u9"},{"name":"docker","parent":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhcv008skp2xe7tr0hgk"},{"name":"Windows","parent":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcy0099kp2x4q989r73"},{"name":"heroku","parent":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhd0009fkp2xctk73sh5"},{"name":"js","parent":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd0009kkp2xbxre81z3"},{"name":"html","parent":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd1009rkp2x6j4a3zo2"},{"name":"Tech.","parent":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhd2009vkp2xhmo0apl6"},{"name":"elasticSearch","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhd3009zkp2x4xu58fwl"},{"name":"db","parent":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhd300a4kp2x91d38spv"},{"name":"css","parent":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd400abkp2x7l6zd2b1"},{"name":"back-end","parent":"cld71fhd2009vkp2xhmo0apl6","_id":"cld71fhd500ahkp2x2x4o3nj7"},{"name":"golang","parent":"cld71fhd500ahkp2x2x4o3nj7","_id":"cld71fhd600aqkp2x5t9x9cmr"}],"Data":[],"Page":[{"title":"關於我 About Me","date":"2020-09-06T05:53:06.000Z","_content":"\n<img src=\"/images/avatar_memo.png\" width=\"150px\" />\n\n<h3 align=\"center\">後端IT工程師，Go經歷兩年 & 正在學習 React。 喜歡貓狗．\n</h3>\n<h4>> 習慣透過實作紀錄與搜集整理資料來做比較理解，本部落格持續紀錄自學筆記，如有誤還請您不吝指出與指教＾.＾</h4>\n\n>部落格大多是自己學習時記錄下來的內容，流程中較少說明與圖片，如果不清楚的地方請自行再深入研究，本部落格有時間也會再補上o(m_m) \n\n#### 基本資訊：\n\n- 🌱 I’m currently learning **React,Golang,Python**\n\n- 📝 I regulary write articles on [https://minilabmemo.github.io/](https://minilabmemo.github.io/)\n\n- 📫 How to reach me **minilabmemo@gmail.com**\n\n#### 經歷與技能:\n\n- 後端 golang 開發經歷兩年\n- 熟悉開發 Restful Web API\n- 基礎網頁 HTML,CSS,JS,JQUERY 概念，正在學習前端技能:React\n- 其他 Transfer Protocol : WebSocket、MQTT 開發經歷\n- 資料庫 RDBMS SQL & NoSQL(Mongo) 操作與使用經驗\n- 版本控制: 基礎 Git 操作，對 Git flow 有概念\n- 會使用 docker/docker compose 啟動服務 ＆ 撰寫 dockerfile\n- 基礎 Kubernetes 操作\n\n<h3 align=\"left\">Languages and Tools:</h3>\n<p style=\"display:flex\"> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.figma.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/figma/figma-icon.svg\" alt=\"figma\" width=\"40\" height=\"40\"/> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"/> </a> <a href=\"https://golang.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg\" alt=\"go\" width=\"40\" height=\"40\"/> </a> <a href=\"https://grafana.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/grafana/grafana-icon.svg\" alt=\"grafana\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"/> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.elastic.co/kibana\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elasticco_kibana/elasticco_kibana-icon.svg\" alt=\"kibana\" width=\"40\" height=\"40\"/> </a> <a href=\"https://kubernetes.io\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/kubernetes/kubernetes-icon.svg\" alt=\"kubernetes\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"/> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"/> </a> </p>\n\n\n\n<h3 align=\"left\">Connect with me:</h3>\n\n<p style=\"display:flex\">\n<a href=\"https://fb.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/facebook.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://instagram.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/instagram.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://www.youtube.com/c/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/youtube.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n</p>\n","source":"about/index.md","raw":"---\ntitle: \"關於我 About Me\"\ndate: 2020-09-06 13:53:06\n---\n\n<img src=\"/images/avatar_memo.png\" width=\"150px\" />\n\n<h3 align=\"center\">後端IT工程師，Go經歷兩年 & 正在學習 React。 喜歡貓狗．\n</h3>\n<h4>> 習慣透過實作紀錄與搜集整理資料來做比較理解，本部落格持續紀錄自學筆記，如有誤還請您不吝指出與指教＾.＾</h4>\n\n>部落格大多是自己學習時記錄下來的內容，流程中較少說明與圖片，如果不清楚的地方請自行再深入研究，本部落格有時間也會再補上o(m_m) \n\n#### 基本資訊：\n\n- 🌱 I’m currently learning **React,Golang,Python**\n\n- 📝 I regulary write articles on [https://minilabmemo.github.io/](https://minilabmemo.github.io/)\n\n- 📫 How to reach me **minilabmemo@gmail.com**\n\n#### 經歷與技能:\n\n- 後端 golang 開發經歷兩年\n- 熟悉開發 Restful Web API\n- 基礎網頁 HTML,CSS,JS,JQUERY 概念，正在學習前端技能:React\n- 其他 Transfer Protocol : WebSocket、MQTT 開發經歷\n- 資料庫 RDBMS SQL & NoSQL(Mongo) 操作與使用經驗\n- 版本控制: 基礎 Git 操作，對 Git flow 有概念\n- 會使用 docker/docker compose 啟動服務 ＆ 撰寫 dockerfile\n- 基礎 Kubernetes 操作\n\n<h3 align=\"left\">Languages and Tools:</h3>\n<p style=\"display:flex\"> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.figma.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/figma/figma-icon.svg\" alt=\"figma\" width=\"40\" height=\"40\"/> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"/> </a> <a href=\"https://golang.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg\" alt=\"go\" width=\"40\" height=\"40\"/> </a> <a href=\"https://grafana.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/grafana/grafana-icon.svg\" alt=\"grafana\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"/> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.elastic.co/kibana\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elasticco_kibana/elasticco_kibana-icon.svg\" alt=\"kibana\" width=\"40\" height=\"40\"/> </a> <a href=\"https://kubernetes.io\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/kubernetes/kubernetes-icon.svg\" alt=\"kubernetes\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"/> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"/> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"/> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"/> </a> </p>\n\n\n\n<h3 align=\"left\">Connect with me:</h3>\n\n<p style=\"display:flex\">\n<a href=\"https://fb.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/facebook.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://instagram.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/instagram.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://www.youtube.com/c/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/youtube.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\" /></a>\n</p>\n","updated":"2023-01-22T07:03:26.168Z","path":"about/index.html","comments":1,"layout":"page","_id":"cld71fh9u0000kp2xdafp5fhk","content":"<img src=\"/images/avatar_memo.png\" width=\"150px\">\n\n<h3 align=\"center\">後端IT工程師，Go經歷兩年 & 正在學習 React。 喜歡貓狗．\n</h3>\n<h4>> 習慣透過實作紀錄與搜集整理資料來做比較理解，本部落格持續紀錄自學筆記，如有誤還請您不吝指出與指教＾.＾</h4>\n\n<blockquote>\n<p>部落格大多是自己學習時記錄下來的內容，流程中較少說明與圖片，如果不清楚的地方請自行再深入研究，本部落格有時間也會再補上o(m_m) </p>\n</blockquote>\n<h4 id=\"基本資訊：\"><a href=\"#基本資訊：\" class=\"headerlink\" title=\"基本資訊：\"></a>基本資訊：</h4><ul>\n<li><p>🌱 I’m currently learning <strong>React,Golang,Python</strong></p>\n</li>\n<li><p>📝 I regulary write articles on <a href=\"https://minilabmemo.github.io/\">https://minilabmemo.github.io/</a></p>\n</li>\n<li><p>📫 How to reach me <strong><a href=\"mailto:&#109;&#x69;&#110;&#105;&#x6c;&#97;&#98;&#x6d;&#x65;&#109;&#x6f;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#109;&#x69;&#110;&#105;&#x6c;&#97;&#98;&#x6d;&#x65;&#109;&#x6f;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong></p>\n</li>\n</ul>\n<h4 id=\"經歷與技能\"><a href=\"#經歷與技能\" class=\"headerlink\" title=\"經歷與技能:\"></a>經歷與技能:</h4><ul>\n<li>後端 golang 開發經歷兩年</li>\n<li>熟悉開發 Restful Web API</li>\n<li>基礎網頁 HTML,CSS,JS,JQUERY 概念，正在學習前端技能:React</li>\n<li>其他 Transfer Protocol : WebSocket、MQTT 開發經歷</li>\n<li>資料庫 RDBMS SQL &amp; NoSQL(Mongo) 操作與使用經驗</li>\n<li>版本控制: 基礎 Git 操作，對 Git flow 有概念</li>\n<li>會使用 docker/docker compose 啟動服務 ＆ 撰寫 dockerfile</li>\n<li>基礎 Kubernetes 操作</li>\n</ul>\n<h3 align=\"left\">Languages and Tools:</h3>\n<p style=\"display:flex\"> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.figma.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/figma/figma-icon.svg\" alt=\"figma\" width=\"40\" height=\"40\"> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"> </a> <a href=\"https://golang.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg\" alt=\"go\" width=\"40\" height=\"40\"> </a> <a href=\"https://grafana.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/grafana/grafana-icon.svg\" alt=\"grafana\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.elastic.co/kibana\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elasticco_kibana/elasticco_kibana-icon.svg\" alt=\"kibana\" width=\"40\" height=\"40\"> </a> <a href=\"https://kubernetes.io\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/kubernetes/kubernetes-icon.svg\" alt=\"kubernetes\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"> </a> </p>\n\n\n\n<h3 align=\"left\">Connect with me:</h3>\n\n<p style=\"display:flex\">\n<a href=\"https://fb.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/facebook.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n<a href=\"https://instagram.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/instagram.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n<a href=\"https://www.youtube.com/c/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/youtube.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n</p>\n","site":{"data":{}},"excerpt":"","more":"<img src=\"/images/avatar_memo.png\" width=\"150px\">\n\n<h3 align=\"center\">後端IT工程師，Go經歷兩年 & 正在學習 React。 喜歡貓狗．\n</h3>\n<h4>> 習慣透過實作紀錄與搜集整理資料來做比較理解，本部落格持續紀錄自學筆記，如有誤還請您不吝指出與指教＾.＾</h4>\n\n<blockquote>\n<p>部落格大多是自己學習時記錄下來的內容，流程中較少說明與圖片，如果不清楚的地方請自行再深入研究，本部落格有時間也會再補上o(m_m) </p>\n</blockquote>\n<h4 id=\"基本資訊：\"><a href=\"#基本資訊：\" class=\"headerlink\" title=\"基本資訊：\"></a>基本資訊：</h4><ul>\n<li><p>🌱 I’m currently learning <strong>React,Golang,Python</strong></p>\n</li>\n<li><p>📝 I regulary write articles on <a href=\"https://minilabmemo.github.io/\">https://minilabmemo.github.io/</a></p>\n</li>\n<li><p>📫 How to reach me <strong><a href=\"mailto:&#109;&#x69;&#110;&#105;&#x6c;&#97;&#98;&#x6d;&#x65;&#109;&#x6f;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;\">&#109;&#x69;&#110;&#105;&#x6c;&#97;&#98;&#x6d;&#x65;&#109;&#x6f;&#64;&#x67;&#109;&#97;&#105;&#x6c;&#x2e;&#x63;&#x6f;&#x6d;</a></strong></p>\n</li>\n</ul>\n<h4 id=\"經歷與技能\"><a href=\"#經歷與技能\" class=\"headerlink\" title=\"經歷與技能:\"></a>經歷與技能:</h4><ul>\n<li>後端 golang 開發經歷兩年</li>\n<li>熟悉開發 Restful Web API</li>\n<li>基礎網頁 HTML,CSS,JS,JQUERY 概念，正在學習前端技能:React</li>\n<li>其他 Transfer Protocol : WebSocket、MQTT 開發經歷</li>\n<li>資料庫 RDBMS SQL &amp; NoSQL(Mongo) 操作與使用經驗</li>\n<li>版本控制: 基礎 Git 操作，對 Git flow 有概念</li>\n<li>會使用 docker/docker compose 啟動服務 ＆ 撰寫 dockerfile</li>\n<li>基礎 Kubernetes 操作</li>\n</ul>\n<h3 align=\"left\">Languages and Tools:</h3>\n<p style=\"display:flex\"> <a href=\"https://getbootstrap.com\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/bootstrap/bootstrap-plain-wordmark.svg\" alt=\"bootstrap\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.w3schools.com/css/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/css3/css3-original-wordmark.svg\" alt=\"css3\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.docker.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/docker/docker-original-wordmark.svg\" alt=\"docker\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.figma.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/figma/figma-icon.svg\" alt=\"figma\" width=\"40\" height=\"40\"> </a> <a href=\"https://git-scm.com/\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/git-scm/git-scm-icon.svg\" alt=\"git\" width=\"40\" height=\"40\"> </a> <a href=\"https://golang.org\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/go/go-original.svg\" alt=\"go\" width=\"40\" height=\"40\"> </a> <a href=\"https://grafana.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/grafana/grafana-icon.svg\" alt=\"grafana\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.w3.org/html/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/html5/html5-original-wordmark.svg\" alt=\"html5\" width=\"40\" height=\"40\"> </a> <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/javascript/javascript-original.svg\" alt=\"javascript\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.elastic.co/kibana\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/elasticco_kibana/elasticco_kibana-icon.svg\" alt=\"kibana\" width=\"40\" height=\"40\"> </a> <a href=\"https://kubernetes.io\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/kubernetes/kubernetes-icon.svg\" alt=\"kubernetes\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.mongodb.com/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/mongodb/mongodb-original-wordmark.svg\" alt=\"mongodb\" width=\"40\" height=\"40\"> </a> <a href=\"https://www.photoshop.com/en\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/photoshop/photoshop-line.svg\" alt=\"photoshop\" width=\"40\" height=\"40\"> </a> <a href=\"https://postman.com\" target=\"_blank\"> <img src=\"https://www.vectorlogo.zone/logos/getpostman/getpostman-icon.svg\" alt=\"postman\" width=\"40\" height=\"40\"> </a> <a href=\"https://reactjs.org/\" target=\"_blank\"> <img src=\"https://raw.githubusercontent.com/devicons/devicon/master/icons/react/react-original-wordmark.svg\" alt=\"react\" width=\"40\" height=\"40\"> </a> </p>\n\n\n\n<h3 align=\"left\">Connect with me:</h3>\n\n<p style=\"display:flex\">\n<a href=\"https://fb.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/facebook.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n<a href=\"https://instagram.com/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/instagram.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n<a href=\"https://www.youtube.com/c/minilabmemo\" target=\"blank\"><img align=\"center\" src=\"https://cdn.jsdelivr.net/npm/simple-icons@3.0.1/icons/youtube.svg\" alt=\"minilabmemo\" height=\"30\" width=\"40\"></a>\n</p>\n"},{"title":"categories","date":"2021-01-11T09:25:08.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2021-01-11 17:25:08\ntype: \"categories\"\n---\n","updated":"2022-05-01T07:09:56.196Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cld71fha00002kp2xa47ghj7j","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2021-01-11T09:25:04.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2021-01-11 17:25:04\ntype: \"tags\"\n---\n","updated":"2022-05-01T07:09:56.196Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cld71fha40006kp2xg5fxe30o","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"js--snippets","date":"2021-04-04T03:31:01.000Z","_content":"\n>藍色簡單區塊 \n\n\n<!--more-->\n\n\n### ES7 React/Redux/React-Native/JS Snippets\n\n\n\n#### rafc - ReactArrowFunctionComponent\n- const App: () => JSX.Element\n- 縮寫 如果只有return 可以去掉{}與return\n- 快速鍵 rafc - ReactArrowFunctionComponent\n- 可以視情況拿掉import & export\n```\nimport React from 'react'\n\nexport const App = () => {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n```\n\n#### nfn named function\n在commponent(大寫)中如果要加入函式用named function\n- params可以視情況移除\n```\n  const name = (params) => {\n\n  }\n```\n\n\n\n\n# 網路參考文章\n- [VS Code ES7 React/Redux/React-Native/JS snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)","source":"_drafts/js-snippets.md","raw":"---\ntitle: js--snippets\ntags:\n  - test\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\n  - Tech.\n  - back-end\n  - golang\ndate: 2021-04-04 11:31:01\n---\n\n>藍色簡單區塊 \n\n\n<!--more-->\n\n\n### ES7 React/Redux/React-Native/JS Snippets\n\n\n\n#### rafc - ReactArrowFunctionComponent\n- const App: () => JSX.Element\n- 縮寫 如果只有return 可以去掉{}與return\n- 快速鍵 rafc - ReactArrowFunctionComponent\n- 可以視情況拿掉import & export\n```\nimport React from 'react'\n\nexport const App = () => {\n  return (\n    <div>\n      \n    </div>\n  )\n}\n```\n\n#### nfn named function\n在commponent(大寫)中如果要加入函式用named function\n- params可以視情況移除\n```\n  const name = (params) => {\n\n  }\n```\n\n\n\n\n# 網路參考文章\n- [VS Code ES7 React/Redux/React-Native/JS snippets](https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets)","slug":"js-snippets","published":0,"updated":"2023-01-22T07:03:26.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fh9x0001kp2xd2ibb43d","content":"<blockquote>\n<p>藍色簡單區塊 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h3 id=\"ES7-React-Redux-React-Native-JS-Snippets\"><a href=\"#ES7-React-Redux-React-Native-JS-Snippets\" class=\"headerlink\" title=\"ES7 React/Redux/React-Native/JS Snippets\"></a>ES7 React/Redux/React-Native/JS Snippets</h3><h4 id=\"rafc-ReactArrowFunctionComponent\"><a href=\"#rafc-ReactArrowFunctionComponent\" class=\"headerlink\" title=\"rafc - ReactArrowFunctionComponent\"></a>rafc - ReactArrowFunctionComponent</h4><ul>\n<li>const App: () =&gt; JSX.Element</li>\n<li>縮寫 如果只有return 可以去掉{}與return</li>\n<li>快速鍵 rafc - ReactArrowFunctionComponent</li>\n<li>可以視情況拿掉import &amp; export<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nfn-named-function\"><a href=\"#nfn-named-function\" class=\"headerlink\" title=\"nfn named function\"></a>nfn named function</h4>在commponent(大寫)中如果要加入函式用named function</li>\n<li>params可以視情況移除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name &#x3D; (params) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\">VS Code ES7 React/Redux/React-Native/JS snippets</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>藍色簡單區塊 </p>\n</blockquote>","more":"<h3 id=\"ES7-React-Redux-React-Native-JS-Snippets\"><a href=\"#ES7-React-Redux-React-Native-JS-Snippets\" class=\"headerlink\" title=\"ES7 React/Redux/React-Native/JS Snippets\"></a>ES7 React/Redux/React-Native/JS Snippets</h3><h4 id=\"rafc-ReactArrowFunctionComponent\"><a href=\"#rafc-ReactArrowFunctionComponent\" class=\"headerlink\" title=\"rafc - ReactArrowFunctionComponent\"></a>rafc - ReactArrowFunctionComponent</h4><ul>\n<li>const App: () =&gt; JSX.Element</li>\n<li>縮寫 如果只有return 可以去掉{}與return</li>\n<li>快速鍵 rafc - ReactArrowFunctionComponent</li>\n<li>可以視情況拿掉import &amp; export<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React from &#39;react&#39;</span><br><span class=\"line\"></span><br><span class=\"line\">export const App &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      </span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"nfn-named-function\"><a href=\"#nfn-named-function\" class=\"headerlink\" title=\"nfn named function\"></a>nfn named function</h4>在commponent(大寫)中如果要加入函式用named function</li>\n<li>params可以視情況移除<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name &#x3D; (params) &#x3D;&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\">VS Code ES7 React/Redux/React-Native/JS snippets</a></li>\n</ul>"},{"title":"react-error","date":"2021-04-01T12:19:29.000Z","_content":"\n\n>紀錄前端開發時會遇到的錯誤狀況 \n\n\n<!--more-->\n\n\n在開發環境執行程式時，點擊某一些動作會跳一些錯誤畫面，Runtime Error就是運行時錯誤\n### Babel\nBabel 是 JavaScript 的編譯器用來把 ES6 的程式碼轉化為瀏覽器或者其它環境支援的程式碼。\n\n- 參考文 babel的細節解說：[前端科普系列（4）：Babel —— 把 ES6 送上天的通天塔](https://www.mdeditor.tw/pl/pNFj/zh-tw)\n\n\n #### JSX must be wrapped in an enclosing tag.\n JSX的return，必須回傳一層的根節點，在撰寫時就會有problem提示，執行也會直接跳出紅色錯誤．\n ```\nreturn (\n    <> //要加這個 或是<React.Fragment>\n      <div className=\"App\"></div>\n      <div className=\"App\"></div>\n    </> //或是</React.Fragment>\n  );\n ```\n Failed to compile\n>note danger %}\n SyntaxError: xxx/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (13:4)\n  \n  \n#### 錯誤修改const\n```\nconst count = 0;\n  return (\n      <ActionBlock onClick={() => {\n        count = count + 1;\n        ....\n```\n\n>note warning %}\n _readOnlyError\nnode_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\n \n\n#### hook應該寫進function component裡\n```\n  46 | const [count, setCount] = useState(0); //如果沒有把hook寫在下面的component裡\n  47 | export default function Counter() {\n```\n執行後畫面會出現警語\n>note warning %}\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\n \n\n#### 不小心寫出無限迴圈re-render\n\n例如：當onclick 後的函數(沒return func.)且帶有參數值時會馬上執行，而不是點擊時執行\n```\n<ActionBlock onClick={handelAction(SubtractAct)} }}\n\n正確寫法要把函示加上（）＝>包在裡面\n<ActionBlock onClick={() => handelAction(SubtractAct)}\n```\n>note warning %}\nError: Too many re-renders. React limits the number of renders to prevent an infinite loop.\n \n\n\n#### ReferenceError: dis is not defined\n設定一個不存在的變數","source":"_drafts/react-error.md","raw":"---\ntitle: react-error\ntags:\n  - error\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2021-04-01 20:19:29\n---\n\n\n>紀錄前端開發時會遇到的錯誤狀況 \n\n\n<!--more-->\n\n\n在開發環境執行程式時，點擊某一些動作會跳一些錯誤畫面，Runtime Error就是運行時錯誤\n### Babel\nBabel 是 JavaScript 的編譯器用來把 ES6 的程式碼轉化為瀏覽器或者其它環境支援的程式碼。\n\n- 參考文 babel的細節解說：[前端科普系列（4）：Babel —— 把 ES6 送上天的通天塔](https://www.mdeditor.tw/pl/pNFj/zh-tw)\n\n\n #### JSX must be wrapped in an enclosing tag.\n JSX的return，必須回傳一層的根節點，在撰寫時就會有problem提示，執行也會直接跳出紅色錯誤．\n ```\nreturn (\n    <> //要加這個 或是<React.Fragment>\n      <div className=\"App\"></div>\n      <div className=\"App\"></div>\n    </> //或是</React.Fragment>\n  );\n ```\n Failed to compile\n>note danger %}\n SyntaxError: xxx/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment <>...</>? (13:4)\n  \n  \n#### 錯誤修改const\n```\nconst count = 0;\n  return (\n      <ActionBlock onClick={() => {\n        count = count + 1;\n        ....\n```\n\n>note warning %}\n _readOnlyError\nnode_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js\n \n\n#### hook應該寫進function component裡\n```\n  46 | const [count, setCount] = useState(0); //如果沒有把hook寫在下面的component裡\n  47 | export default function Counter() {\n```\n執行後畫面會出現警語\n>note warning %}\nError: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.\n \n\n#### 不小心寫出無限迴圈re-render\n\n例如：當onclick 後的函數(沒return func.)且帶有參數值時會馬上執行，而不是點擊時執行\n```\n<ActionBlock onClick={handelAction(SubtractAct)} }}\n\n正確寫法要把函示加上（）＝>包在裡面\n<ActionBlock onClick={() => handelAction(SubtractAct)}\n```\n>note warning %}\nError: Too many re-renders. React limits the number of renders to prevent an infinite loop.\n \n\n\n#### ReferenceError: dis is not defined\n設定一個不存在的變數","slug":"react-error","published":0,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fha10003kp2xfbfb584j","content":"<blockquote>\n<p>紀錄前端開發時會遇到的錯誤狀況 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<p>在開發環境執行程式時，點擊某一些動作會跳一些錯誤畫面，Runtime Error就是運行時錯誤</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel 是 JavaScript 的編譯器用來把 ES6 的程式碼轉化為瀏覽器或者其它環境支援的程式碼。</p>\n<ul>\n<li>參考文 babel的細節解說：<a href=\"https://www.mdeditor.tw/pl/pNFj/zh-tw\">前端科普系列（4）：Babel —— 把 ES6 送上天的通天塔</a></li>\n</ul>\n<h4 id=\"JSX-must-be-wrapped-in-an-enclosing-tag\"><a href=\"#JSX-must-be-wrapped-in-an-enclosing-tag\" class=\"headerlink\" title=\"JSX must be wrapped in an enclosing tag.\"></a>JSX must be wrapped in an enclosing tag.</h4><p> JSX的return，必須回傳一層的根節點，在撰寫時就會有problem提示，執行也會直接跳出紅色錯誤．<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return (</span><br><span class=\"line\">    &lt;&gt; &#x2F;&#x2F;要加這個 或是&lt;React.Fragment&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&quot;App&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&quot;App&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt; &#x2F;&#x2F;或是&lt;&#x2F;React.Fragment&gt;</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure><br> Failed to compile</p>\n<blockquote>\n<p>note danger %}<br> SyntaxError: xxx/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment &lt;&gt;…&lt;/&gt;? (13:4)</p>\n</blockquote>\n<h4 id=\"錯誤修改const\"><a href=\"#錯誤修改const\" class=\"headerlink\" title=\"錯誤修改const\"></a>錯誤修改const</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const count &#x3D; 0;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">      &lt;ActionBlock onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class=\"line\">        count &#x3D; count + 1;</span><br><span class=\"line\">        ....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note warning %}<br> _readOnlyError<br>node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js</p>\n</blockquote>\n<h4 id=\"hook應該寫進function-component裡\"><a href=\"#hook應該寫進function-component裡\" class=\"headerlink\" title=\"hook應該寫進function component裡\"></a>hook應該寫進function component裡</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">46 | const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F;如果沒有把hook寫在下面的component裡</span><br><span class=\"line\">47 | export default function Counter() &#123;</span><br></pre></td></tr></table></figure>\n<p>執行後畫面會出現警語</p>\n<blockquote>\n<p>note warning %}<br>Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:</p>\n</blockquote>\n<ol>\n<li>You might have mismatching versions of React and the renderer (such as React DOM)</li>\n<li>You might be breaking the Rules of Hooks</li>\n<li>You might have more than one copy of React in the same app<br>See <a href=\"https://reactjs.org/link/invalid-hook-call\">https://reactjs.org/link/invalid-hook-call</a> for tips about how to debug and fix this problem.</li>\n</ol>\n<h4 id=\"不小心寫出無限迴圈re-render\"><a href=\"#不小心寫出無限迴圈re-render\" class=\"headerlink\" title=\"不小心寫出無限迴圈re-render\"></a>不小心寫出無限迴圈re-render</h4><p>例如：當onclick 後的函數(沒return func.)且帶有參數值時會馬上執行，而不是點擊時執行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ActionBlock onClick&#x3D;&#123;handelAction(SubtractAct)&#125; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">正確寫法要把函示加上（）＝&gt;包在裡面</span><br><span class=\"line\">&lt;ActionBlock onClick&#x3D;&#123;() &#x3D;&gt; handelAction(SubtractAct)&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note warning %}<br>Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.</p>\n</blockquote>\n<h4 id=\"ReferenceError-dis-is-not-defined\"><a href=\"#ReferenceError-dis-is-not-defined\" class=\"headerlink\" title=\"ReferenceError: dis is not defined\"></a>ReferenceError: dis is not defined</h4><p>設定一個不存在的變數</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>紀錄前端開發時會遇到的錯誤狀況 </p>\n</blockquote>","more":"<p>在開發環境執行程式時，點擊某一些動作會跳一些錯誤畫面，Runtime Error就是運行時錯誤</p>\n<h3 id=\"Babel\"><a href=\"#Babel\" class=\"headerlink\" title=\"Babel\"></a>Babel</h3><p>Babel 是 JavaScript 的編譯器用來把 ES6 的程式碼轉化為瀏覽器或者其它環境支援的程式碼。</p>\n<ul>\n<li>參考文 babel的細節解說：<a href=\"https://www.mdeditor.tw/pl/pNFj/zh-tw\">前端科普系列（4）：Babel —— 把 ES6 送上天的通天塔</a></li>\n</ul>\n<h4 id=\"JSX-must-be-wrapped-in-an-enclosing-tag\"><a href=\"#JSX-must-be-wrapped-in-an-enclosing-tag\" class=\"headerlink\" title=\"JSX must be wrapped in an enclosing tag.\"></a>JSX must be wrapped in an enclosing tag.</h4><p> JSX的return，必須回傳一層的根節點，在撰寫時就會有problem提示，執行也會直接跳出紅色錯誤．<br> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">return (</span><br><span class=\"line\">    &lt;&gt; &#x2F;&#x2F;要加這個 或是&lt;React.Fragment&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&quot;App&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;div className&#x3D;&quot;App&quot;&gt;&lt;&#x2F;div&gt;</span><br><span class=\"line\">    &lt;&#x2F;&gt; &#x2F;&#x2F;或是&lt;&#x2F;React.Fragment&gt;</span><br><span class=\"line\">  );</span><br></pre></td></tr></table></figure><br> Failed to compile</p>\n<blockquote>\n<p>note danger %}<br> SyntaxError: xxx/src/App.js: Adjacent JSX elements must be wrapped in an enclosing tag. Did you want a JSX fragment &lt;&gt;…&lt;/&gt;? (13:4)</p>\n</blockquote>\n<h4 id=\"錯誤修改const\"><a href=\"#錯誤修改const\" class=\"headerlink\" title=\"錯誤修改const\"></a>錯誤修改const</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const count &#x3D; 0;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">      &lt;ActionBlock onClick&#x3D;&#123;() &#x3D;&gt; &#123;</span><br><span class=\"line\">        count &#x3D; count + 1;</span><br><span class=\"line\">        ....</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note warning %}<br> _readOnlyError<br>node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/readOnlyError.js</p>\n</blockquote>\n<h4 id=\"hook應該寫進function-component裡\"><a href=\"#hook應該寫進function-component裡\" class=\"headerlink\" title=\"hook應該寫進function component裡\"></a>hook應該寫進function component裡</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">46 | const [count, setCount] &#x3D; useState(0); &#x2F;&#x2F;如果沒有把hook寫在下面的component裡</span><br><span class=\"line\">47 | export default function Counter() &#123;</span><br></pre></td></tr></table></figure>\n<p>執行後畫面會出現警語</p>\n<blockquote>\n<p>note warning %}<br>Error: Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:</p>\n</blockquote>\n<ol>\n<li>You might have mismatching versions of React and the renderer (such as React DOM)</li>\n<li>You might be breaking the Rules of Hooks</li>\n<li>You might have more than one copy of React in the same app<br>See <a href=\"https://reactjs.org/link/invalid-hook-call\">https://reactjs.org/link/invalid-hook-call</a> for tips about how to debug and fix this problem.</li>\n</ol>\n<h4 id=\"不小心寫出無限迴圈re-render\"><a href=\"#不小心寫出無限迴圈re-render\" class=\"headerlink\" title=\"不小心寫出無限迴圈re-render\"></a>不小心寫出無限迴圈re-render</h4><p>例如：當onclick 後的函數(沒return func.)且帶有參數值時會馬上執行，而不是點擊時執行</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ActionBlock onClick&#x3D;&#123;handelAction(SubtractAct)&#125; &#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">正確寫法要把函示加上（）＝&gt;包在裡面</span><br><span class=\"line\">&lt;ActionBlock onClick&#x3D;&#123;() &#x3D;&gt; handelAction(SubtractAct)&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note warning %}<br>Error: Too many re-renders. React limits the number of renders to prevent an infinite loop.</p>\n</blockquote>\n<h4 id=\"ReferenceError-dis-is-not-defined\"><a href=\"#ReferenceError-dis-is-not-defined\" class=\"headerlink\" title=\"ReferenceError: dis is not defined\"></a>ReferenceError: dis is not defined</h4><p>設定一個不存在的變數</p>"},{"title":"[Go 01] 配置GO開發環境","date":"2020-05-01T12:23:42.000Z","_content":"\n\n# 什麼是Go\n\n <blockquote class=\"blockquote-center\">\n Go（又稱Golang）是Google開發的一種靜態強型別、編譯型、並發型，並具有垃圾回收功能且輕巧的程式語言．</blockquote>\n\n\n# 透過三步驟設定完開發環境：\n  1. 安裝官方 Go\n  2. 配置開發 Go 所需要環境變數 \n  3. 下載IDE「推薦Visual Studio Code加上插件」 開始寫Go\n\n<!--more-->\n------------\n\n## Go的優點\n以下截自:[Go適合做什麼？為何這麼多人偏愛Go語言？](https://www.mdeditor.tw/pl/2dVc/zh-tw)\n並簡化列了以下幾點:\n1. 學習曲線\n因為Go語言容易學習，普通的大學生花一個星期就能寫出來可以上手的。\n2. 高效率、簡單的併發\n3. 出身名門、血統純正\n出自Google公司，還能說什麼\n4. 部署方便：二進位制檔案、Copy部署。\n想部屬windows(exe)，或是linux可執行文件都很方便喔。\n5. Go擁有強大的編譯檢查、嚴格的編碼規範和完整的軟體生命週期工具。\n\n\n## 1.安裝 Go\ngo 網站https://golang.org/ 下載直接點擊安裝\n預設會幫你安裝到/usr/local/go底下，這就是GOROOT位置\n- 開啟終端機下指令確認安裝\n```\n➜  ~ go version\ngo version go1.14 darwin/amd64\n➜  ~ which go  \n/usr/local/go/bin/go\n\n```\n## 2.配置環境變數\n### MAC安裝筆記\n選擇的是用在使用者目錄下配置環境變數\n- vi ~/.bash_profile\n```\n//輸入a編輯\nexport GOROOT=\"/usr/local/go\"\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOPATH/bin \nexport PATH=$PATH:$GOROOT/bin\n\n//GOROOT表示GO安裝的目錄\n//GOPATH是自訂想要放置程式的地方\n//打完後esc輸入：wq存擋\n```\n\n\n- 執行 bash profile\n\tsource ~/.bash_profile\n\n\n## 3.IDE 安裝\n3-1 下載 Visual Studio Code\n3-2 打開 VScode 於 Extensions 安裝 Go (微軟官方維護) 外掛\n - Go 擴充功能整合了多種 Go 工具，例如 gocode(代碼自動補全), golint(代碼規範檢查)，goreturns(格式工具Format Tool) 等，可以查看https://github.com/golang/vscode-go/blob/master/docs/tools.md(有些有不同選擇，預設工具可以在設定裡改)\n - 如果沒有安裝對應的工具，就會在編譯.go文件時跳出提示，Analysis Tools Missing ，此時可以按下 Command + Shift + p 呼叫命令列視窗，輸入 Go: Install/Update tools 安裝/更新所有的工具解決此問題。\n  - 如遇上安裝問題，也有文章推薦可直接進行3-3步驟\n\n3-3 打開終端機執行下列指令來安裝依賴包以下工具:\n\n\n```bash\ngo get -u -v github.com/ramya-rao-a/go-outline\ngo get -u -v github.com/acroca/go-symbols\ngo get -u -v github.com/mdempsky/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v golang.org/x/tools/cmd/godoc\ngo get -u -v github.com/zmb3/gogetdoc\ngo get -u -v golang.org/x/lint/golint\ngo get -u -v github.com/fatih/gomodifytags\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/goimports\ngo get -u -v github.com/cweill/gotests/...\ngo get -u -v golang.org/x/tools/cmd/guru\ngo get -u -v github.com/josharian/impl\ngo get -u -v github.com/haya14busa/goplay/cmd/goplay\ngo get -u -v github.com/uudashr/gopkgs/cmd/gopkgs\ngo get -u -v github.com/davidrjenni/reftools/cmd/fillstruct\n```\n> 配置好後在編輯ＧＯ語言就會發現有很多貼心的提示 ，同時也會出現在ＩＤ內的problems清單裡，可以進一步修改程式語法，真的是超級方便的．\n\n- 補充：以下是相關工具的說明\n|工具   |  說明 |\n| ------------ | ------------ |\n| dlv.exe\tgo  | 語言調適工具  |\n| gocode.exe\tgo  |  語言检查，自动补全 |\n| godef.exe \tgo  |  語言定义和引用的跳转 |\n| golint.exe \tgo  | 語言规范检查  |\n| go-outline.exe  |  用于在Go源文件中提取JSON形式声明的简单工具 |\n|  gopkgs.exe |   \t快速列出可用包的工具 |\n| gorename.exe  |  在Go源代码中执行标识符的精确类型安全重命名 |\n|  goreturns.exe | 类似fmt和import的工具，使用零值填充Go返回语句以匹配func返回类  |\n| go-symbols.exe  |  \t从go源码树中提取JSON形式的包符号的工具  |\n\n\n\n\n>note class_name %} # 參考文章 \nwindows 安裝Go\n- [[Go] Go 語言於 Windows 上之安裝與環境設定](https://oranwind.org/go-go-yu-yan-yu-windows-shang-zhi-an-zhuang-yu-huan-jing-she-ding/ \"[Go] Go 語言於 Windows 上之安裝與環境設定\") \n- [用vscode开发调试golang超简单教程](https://blog.csdn.net/v6543210/article/details/84504460)\n\nＭac 安裝Go\n- [Mac上Go環境和VS Code的正確安裝與配置方法](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/391186/) \n\nIDE : VScode\n- [[Go] 使用 Visual Studio Code 上建置 Go 開發環境](https://oranwind.org/go-ide-visual-studio-code/ \"[Go] 使用 Visual Studio Code 上建置 Go 開發環境\") \n","source":"_posts/01-go-env.md","raw":"---\ntitle: \"[Go 01] 配置GO開發環境\"\ndate: 2020-05-01 20:23:42\ntags:\n  - golang\n  - vscode\ncategories:\n  - Tech.\n  - back-end\n  - golang\n---\n\n\n# 什麼是Go\n\n <blockquote class=\"blockquote-center\">\n Go（又稱Golang）是Google開發的一種靜態強型別、編譯型、並發型，並具有垃圾回收功能且輕巧的程式語言．</blockquote>\n\n\n# 透過三步驟設定完開發環境：\n  1. 安裝官方 Go\n  2. 配置開發 Go 所需要環境變數 \n  3. 下載IDE「推薦Visual Studio Code加上插件」 開始寫Go\n\n<!--more-->\n------------\n\n## Go的優點\n以下截自:[Go適合做什麼？為何這麼多人偏愛Go語言？](https://www.mdeditor.tw/pl/2dVc/zh-tw)\n並簡化列了以下幾點:\n1. 學習曲線\n因為Go語言容易學習，普通的大學生花一個星期就能寫出來可以上手的。\n2. 高效率、簡單的併發\n3. 出身名門、血統純正\n出自Google公司，還能說什麼\n4. 部署方便：二進位制檔案、Copy部署。\n想部屬windows(exe)，或是linux可執行文件都很方便喔。\n5. Go擁有強大的編譯檢查、嚴格的編碼規範和完整的軟體生命週期工具。\n\n\n## 1.安裝 Go\ngo 網站https://golang.org/ 下載直接點擊安裝\n預設會幫你安裝到/usr/local/go底下，這就是GOROOT位置\n- 開啟終端機下指令確認安裝\n```\n➜  ~ go version\ngo version go1.14 darwin/amd64\n➜  ~ which go  \n/usr/local/go/bin/go\n\n```\n## 2.配置環境變數\n### MAC安裝筆記\n選擇的是用在使用者目錄下配置環境變數\n- vi ~/.bash_profile\n```\n//輸入a編輯\nexport GOROOT=\"/usr/local/go\"\nexport GOPATH=$HOME/go\nexport PATH=$PATH:$GOPATH/bin \nexport PATH=$PATH:$GOROOT/bin\n\n//GOROOT表示GO安裝的目錄\n//GOPATH是自訂想要放置程式的地方\n//打完後esc輸入：wq存擋\n```\n\n\n- 執行 bash profile\n\tsource ~/.bash_profile\n\n\n## 3.IDE 安裝\n3-1 下載 Visual Studio Code\n3-2 打開 VScode 於 Extensions 安裝 Go (微軟官方維護) 外掛\n - Go 擴充功能整合了多種 Go 工具，例如 gocode(代碼自動補全), golint(代碼規範檢查)，goreturns(格式工具Format Tool) 等，可以查看https://github.com/golang/vscode-go/blob/master/docs/tools.md(有些有不同選擇，預設工具可以在設定裡改)\n - 如果沒有安裝對應的工具，就會在編譯.go文件時跳出提示，Analysis Tools Missing ，此時可以按下 Command + Shift + p 呼叫命令列視窗，輸入 Go: Install/Update tools 安裝/更新所有的工具解決此問題。\n  - 如遇上安裝問題，也有文章推薦可直接進行3-3步驟\n\n3-3 打開終端機執行下列指令來安裝依賴包以下工具:\n\n\n```bash\ngo get -u -v github.com/ramya-rao-a/go-outline\ngo get -u -v github.com/acroca/go-symbols\ngo get -u -v github.com/mdempsky/gocode\ngo get -u -v github.com/rogpeppe/godef\ngo get -u -v golang.org/x/tools/cmd/godoc\ngo get -u -v github.com/zmb3/gogetdoc\ngo get -u -v golang.org/x/lint/golint\ngo get -u -v github.com/fatih/gomodifytags\ngo get -u -v golang.org/x/tools/cmd/gorename\ngo get -u -v sourcegraph.com/sqs/goreturns\ngo get -u -v golang.org/x/tools/cmd/goimports\ngo get -u -v github.com/cweill/gotests/...\ngo get -u -v golang.org/x/tools/cmd/guru\ngo get -u -v github.com/josharian/impl\ngo get -u -v github.com/haya14busa/goplay/cmd/goplay\ngo get -u -v github.com/uudashr/gopkgs/cmd/gopkgs\ngo get -u -v github.com/davidrjenni/reftools/cmd/fillstruct\n```\n> 配置好後在編輯ＧＯ語言就會發現有很多貼心的提示 ，同時也會出現在ＩＤ內的problems清單裡，可以進一步修改程式語法，真的是超級方便的．\n\n- 補充：以下是相關工具的說明\n|工具   |  說明 |\n| ------------ | ------------ |\n| dlv.exe\tgo  | 語言調適工具  |\n| gocode.exe\tgo  |  語言检查，自动补全 |\n| godef.exe \tgo  |  語言定义和引用的跳转 |\n| golint.exe \tgo  | 語言规范检查  |\n| go-outline.exe  |  用于在Go源文件中提取JSON形式声明的简单工具 |\n|  gopkgs.exe |   \t快速列出可用包的工具 |\n| gorename.exe  |  在Go源代码中执行标识符的精确类型安全重命名 |\n|  goreturns.exe | 类似fmt和import的工具，使用零值填充Go返回语句以匹配func返回类  |\n| go-symbols.exe  |  \t从go源码树中提取JSON形式的包符号的工具  |\n\n\n\n\n>note class_name %} # 參考文章 \nwindows 安裝Go\n- [[Go] Go 語言於 Windows 上之安裝與環境設定](https://oranwind.org/go-go-yu-yan-yu-windows-shang-zhi-an-zhuang-yu-huan-jing-she-ding/ \"[Go] Go 語言於 Windows 上之安裝與環境設定\") \n- [用vscode开发调试golang超简单教程](https://blog.csdn.net/v6543210/article/details/84504460)\n\nＭac 安裝Go\n- [Mac上Go環境和VS Code的正確安裝與配置方法](https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/391186/) \n\nIDE : VScode\n- [[Go] 使用 Visual Studio Code 上建置 Go 開發環境](https://oranwind.org/go-ide-visual-studio-code/ \"[Go] 使用 Visual Studio Code 上建置 Go 開發環境\") \n","slug":"01-go-env","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fha40007kp2xhuc80a72","content":"<h1 id=\"什麼是Go\"><a href=\"#什麼是Go\" class=\"headerlink\" title=\"什麼是Go\"></a>什麼是Go</h1> <blockquote class=\"blockquote-center\">\n Go（又稱Golang）是Google開發的一種靜態強型別、編譯型、並發型，並具有垃圾回收功能且輕巧的程式語言．</blockquote>\n\n\n<h1 id=\"透過三步驟設定完開發環境：\"><a href=\"#透過三步驟設定完開發環境：\" class=\"headerlink\" title=\"透過三步驟設定完開發環境：\"></a>透過三步驟設定完開發環境：</h1><ol>\n<li>安裝官方 Go</li>\n<li>配置開發 Go 所需要環境變數 </li>\n<li>下載IDE「推薦Visual Studio Code加上插件」 開始寫Go</li>\n</ol>\n<a id=\"more\"></a>\n<hr>\n<h2 id=\"Go的優點\"><a href=\"#Go的優點\" class=\"headerlink\" title=\"Go的優點\"></a>Go的優點</h2><p>以下截自:<a href=\"https://www.mdeditor.tw/pl/2dVc/zh-tw\">Go適合做什麼？為何這麼多人偏愛Go語言？</a><br>並簡化列了以下幾點:</p>\n<ol>\n<li>學習曲線<br>因為Go語言容易學習，普通的大學生花一個星期就能寫出來可以上手的。</li>\n<li>高效率、簡單的併發</li>\n<li>出身名門、血統純正<br>出自Google公司，還能說什麼</li>\n<li>部署方便：二進位制檔案、Copy部署。<br>想部屬windows(exe)，或是linux可執行文件都很方便喔。</li>\n<li>Go擁有強大的編譯檢查、嚴格的編碼規範和完整的軟體生命週期工具。</li>\n</ol>\n<h2 id=\"1-安裝-Go\"><a href=\"#1-安裝-Go\" class=\"headerlink\" title=\"1.安裝 Go\"></a>1.安裝 Go</h2><p>go 網站<a href=\"https://golang.org/\">https://golang.org/</a> 下載直接點擊安裝<br>預設會幫你安裝到/usr/local/go底下，這就是GOROOT位置</p>\n<ul>\n<li><p>開啟終端機下指令確認安裝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ go version</span><br><span class=\"line\">go version go1.14 darwin&#x2F;amd64</span><br><span class=\"line\">➜  ~ which go  </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&#x2F;go</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置環境變數\"><a href=\"#2-配置環境變數\" class=\"headerlink\" title=\"2.配置環境變數\"></a>2.配置環境變數</h2><h3 id=\"MAC安裝筆記\"><a href=\"#MAC安裝筆記\" class=\"headerlink\" title=\"MAC安裝筆記\"></a>MAC安裝筆記</h3><p>選擇的是用在使用者目錄下配置環境變數</p>\n</li>\n<li><p>vi ~/.bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;輸入a編輯</span><br><span class=\"line\">export GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br><span class=\"line\">export GOPATH&#x3D;$HOME&#x2F;go</span><br><span class=\"line\">export PATH&#x3D;$PATH:$GOPATH&#x2F;bin </span><br><span class=\"line\">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;GOROOT表示GO安裝的目錄</span><br><span class=\"line\">&#x2F;&#x2F;GOPATH是自訂想要放置程式的地方</span><br><span class=\"line\">&#x2F;&#x2F;打完後esc輸入：wq存擋</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>執行 bash profile<br>  source ~/.bash_profile</p>\n</li>\n</ul>\n<h2 id=\"3-IDE-安裝\"><a href=\"#3-IDE-安裝\" class=\"headerlink\" title=\"3.IDE 安裝\"></a>3.IDE 安裝</h2><p>3-1 下載 Visual Studio Code<br>3-2 打開 VScode 於 Extensions 安裝 Go (微軟官方維護) 外掛</p>\n<ul>\n<li>Go 擴充功能整合了多種 Go 工具，例如 gocode(代碼自動補全), golint(代碼規範檢查)，goreturns(格式工具Format Tool) 等，可以查看<a href=\"https://github.com/golang/vscode-go/blob/master/docs/tools.md(%E6%9C%89%E4%BA%9B%E6%9C%89%E4%B8%8D%E5%90%8C%E9%81%B8%E6%93%87%EF%BC%8C%E9%A0%90%E8%A8%AD%E5%B7%A5%E5%85%B7%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%A8%AD%E5%AE%9A%E8%A3%A1%E6%94%B9)\">https://github.com/golang/vscode-go/blob/master/docs/tools.md(有些有不同選擇，預設工具可以在設定裡改)</a></li>\n<li>如果沒有安裝對應的工具，就會在編譯.go文件時跳出提示，Analysis Tools Missing ，此時可以按下 Command + Shift + p 呼叫命令列視窗，輸入 Go: Install/Update tools 安裝/更新所有的工具解決此問題。</li>\n<li>如遇上安裝問題，也有文章推薦可直接進行3-3步驟</li>\n</ul>\n<p>3-3 打開終端機執行下列指令來安裝依賴包以下工具:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/ramya-rao-a/go-outline</span><br><span class=\"line\">go get -u -v github.com/acroca/go-symbols</span><br><span class=\"line\">go get -u -v github.com/mdempsky/gocode</span><br><span class=\"line\">go get -u -v github.com/rogpeppe/godef</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/godoc</span><br><span class=\"line\">go get -u -v github.com/zmb3/gogetdoc</span><br><span class=\"line\">go get -u -v golang.org/x/lint/golint</span><br><span class=\"line\">go get -u -v github.com/fatih/gomodifytags</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/goimports</span><br><span class=\"line\">go get -u -v github.com/cweill/gotests/...</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go get -u -v github.com/josharian/impl</span><br><span class=\"line\">go get -u -v github.com/haya14busa/goplay/cmd/goplay</span><br><span class=\"line\">go get -u -v github.com/uudashr/gopkgs/cmd/gopkgs</span><br><span class=\"line\">go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置好後在編輯ＧＯ語言就會發現有很多貼心的提示 ，同時也會出現在ＩＤ內的problems清單裡，可以進一步修改程式語法，真的是超級方便的．</p>\n</blockquote>\n<ul>\n<li>補充：以下是相關工具的說明<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dlv.exe    go</td>\n<td>語言調適工具</td>\n</tr>\n<tr>\n<td>gocode.exe    go</td>\n<td>語言检查，自动补全</td>\n</tr>\n<tr>\n<td>godef.exe     go</td>\n<td>語言定义和引用的跳转</td>\n</tr>\n<tr>\n<td>golint.exe     go</td>\n<td>語言规范检查</td>\n</tr>\n<tr>\n<td>go-outline.exe</td>\n<td>用于在Go源文件中提取JSON形式声明的简单工具</td>\n</tr>\n<tr>\n<td>gopkgs.exe</td>\n<td>快速列出可用包的工具</td>\n</tr>\n<tr>\n<td>gorename.exe</td>\n<td>在Go源代码中执行标识符的精确类型安全重命名</td>\n</tr>\n<tr>\n<td>goreturns.exe</td>\n<td>类似fmt和import的工具，使用零值填充Go返回语句以匹配func返回类</td>\n</tr>\n<tr>\n<td>go-symbols.exe</td>\n<td>从go源码树中提取JSON形式的包符号的工具</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<blockquote>\n<p>note class_name %} # 參考文章<br>windows 安裝Go</p>\n</blockquote>\n<ul>\n<li><a href=\"https://oranwind.org/go-go-yu-yan-yu-windows-shang-zhi-an-zhuang-yu-huan-jing-she-ding/\" title=\"[Go] Go 語言於 Windows 上之安裝與環境設定\">[Go] Go 語言於 Windows 上之安裝與環境設定</a> </li>\n<li><a href=\"https://blog.csdn.net/v6543210/article/details/84504460\">用vscode开发调试golang超简单教程</a></li>\n</ul>\n<p>Ｍac 安裝Go</p>\n<ul>\n<li><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/391186/\">Mac上Go環境和VS Code的正確安裝與配置方法</a> </li>\n</ul>\n<p>IDE : VScode</p>\n<ul>\n<li><a href=\"https://oranwind.org/go-ide-visual-studio-code/\" title=\"[Go] 使用 Visual Studio Code 上建置 Go 開發環境\">[Go] 使用 Visual Studio Code 上建置 Go 開發環境</a> </li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什麼是Go\"><a href=\"#什麼是Go\" class=\"headerlink\" title=\"什麼是Go\"></a>什麼是Go</h1> <blockquote class=\"blockquote-center\">\n Go（又稱Golang）是Google開發的一種靜態強型別、編譯型、並發型，並具有垃圾回收功能且輕巧的程式語言．</blockquote>\n\n\n<h1 id=\"透過三步驟設定完開發環境：\"><a href=\"#透過三步驟設定完開發環境：\" class=\"headerlink\" title=\"透過三步驟設定完開發環境：\"></a>透過三步驟設定完開發環境：</h1><ol>\n<li>安裝官方 Go</li>\n<li>配置開發 Go 所需要環境變數 </li>\n<li>下載IDE「推薦Visual Studio Code加上插件」 開始寫Go</li>\n</ol>","more":"<hr>\n<h2 id=\"Go的優點\"><a href=\"#Go的優點\" class=\"headerlink\" title=\"Go的優點\"></a>Go的優點</h2><p>以下截自:<a href=\"https://www.mdeditor.tw/pl/2dVc/zh-tw\">Go適合做什麼？為何這麼多人偏愛Go語言？</a><br>並簡化列了以下幾點:</p>\n<ol>\n<li>學習曲線<br>因為Go語言容易學習，普通的大學生花一個星期就能寫出來可以上手的。</li>\n<li>高效率、簡單的併發</li>\n<li>出身名門、血統純正<br>出自Google公司，還能說什麼</li>\n<li>部署方便：二進位制檔案、Copy部署。<br>想部屬windows(exe)，或是linux可執行文件都很方便喔。</li>\n<li>Go擁有強大的編譯檢查、嚴格的編碼規範和完整的軟體生命週期工具。</li>\n</ol>\n<h2 id=\"1-安裝-Go\"><a href=\"#1-安裝-Go\" class=\"headerlink\" title=\"1.安裝 Go\"></a>1.安裝 Go</h2><p>go 網站<a href=\"https://golang.org/\">https://golang.org/</a> 下載直接點擊安裝<br>預設會幫你安裝到/usr/local/go底下，這就是GOROOT位置</p>\n<ul>\n<li><p>開啟終端機下指令確認安裝</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ go version</span><br><span class=\"line\">go version go1.14 darwin&#x2F;amd64</span><br><span class=\"line\">➜  ~ which go  </span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;go&#x2F;bin&#x2F;go</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-配置環境變數\"><a href=\"#2-配置環境變數\" class=\"headerlink\" title=\"2.配置環境變數\"></a>2.配置環境變數</h2><h3 id=\"MAC安裝筆記\"><a href=\"#MAC安裝筆記\" class=\"headerlink\" title=\"MAC安裝筆記\"></a>MAC安裝筆記</h3><p>選擇的是用在使用者目錄下配置環境變數</p>\n</li>\n<li><p>vi ~/.bash_profile</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;輸入a編輯</span><br><span class=\"line\">export GOROOT&#x3D;&quot;&#x2F;usr&#x2F;local&#x2F;go&quot;</span><br><span class=\"line\">export GOPATH&#x3D;$HOME&#x2F;go</span><br><span class=\"line\">export PATH&#x3D;$PATH:$GOPATH&#x2F;bin </span><br><span class=\"line\">export PATH&#x3D;$PATH:$GOROOT&#x2F;bin</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;GOROOT表示GO安裝的目錄</span><br><span class=\"line\">&#x2F;&#x2F;GOPATH是自訂想要放置程式的地方</span><br><span class=\"line\">&#x2F;&#x2F;打完後esc輸入：wq存擋</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>執行 bash profile<br>  source ~/.bash_profile</p>\n</li>\n</ul>\n<h2 id=\"3-IDE-安裝\"><a href=\"#3-IDE-安裝\" class=\"headerlink\" title=\"3.IDE 安裝\"></a>3.IDE 安裝</h2><p>3-1 下載 Visual Studio Code<br>3-2 打開 VScode 於 Extensions 安裝 Go (微軟官方維護) 外掛</p>\n<ul>\n<li>Go 擴充功能整合了多種 Go 工具，例如 gocode(代碼自動補全), golint(代碼規範檢查)，goreturns(格式工具Format Tool) 等，可以查看<a href=\"https://github.com/golang/vscode-go/blob/master/docs/tools.md(%E6%9C%89%E4%BA%9B%E6%9C%89%E4%B8%8D%E5%90%8C%E9%81%B8%E6%93%87%EF%BC%8C%E9%A0%90%E8%A8%AD%E5%B7%A5%E5%85%B7%E5%8F%AF%E4%BB%A5%E5%9C%A8%E8%A8%AD%E5%AE%9A%E8%A3%A1%E6%94%B9)\">https://github.com/golang/vscode-go/blob/master/docs/tools.md(有些有不同選擇，預設工具可以在設定裡改)</a></li>\n<li>如果沒有安裝對應的工具，就會在編譯.go文件時跳出提示，Analysis Tools Missing ，此時可以按下 Command + Shift + p 呼叫命令列視窗，輸入 Go: Install/Update tools 安裝/更新所有的工具解決此問題。</li>\n<li>如遇上安裝問題，也有文章推薦可直接進行3-3步驟</li>\n</ul>\n<p>3-3 打開終端機執行下列指令來安裝依賴包以下工具:</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u -v github.com/ramya-rao-a/go-outline</span><br><span class=\"line\">go get -u -v github.com/acroca/go-symbols</span><br><span class=\"line\">go get -u -v github.com/mdempsky/gocode</span><br><span class=\"line\">go get -u -v github.com/rogpeppe/godef</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/godoc</span><br><span class=\"line\">go get -u -v github.com/zmb3/gogetdoc</span><br><span class=\"line\">go get -u -v golang.org/x/lint/golint</span><br><span class=\"line\">go get -u -v github.com/fatih/gomodifytags</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/gorename</span><br><span class=\"line\">go get -u -v sourcegraph.com/sqs/goreturns</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/goimports</span><br><span class=\"line\">go get -u -v github.com/cweill/gotests/...</span><br><span class=\"line\">go get -u -v golang.org/x/tools/cmd/guru</span><br><span class=\"line\">go get -u -v github.com/josharian/impl</span><br><span class=\"line\">go get -u -v github.com/haya14busa/goplay/cmd/goplay</span><br><span class=\"line\">go get -u -v github.com/uudashr/gopkgs/cmd/gopkgs</span><br><span class=\"line\">go get -u -v github.com/davidrjenni/reftools/cmd/fillstruct</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>配置好後在編輯ＧＯ語言就會發現有很多貼心的提示 ，同時也會出現在ＩＤ內的problems清單裡，可以進一步修改程式語法，真的是超級方便的．</p>\n</blockquote>\n<ul>\n<li>補充：以下是相關工具的說明<table>\n<thead>\n<tr>\n<th>工具</th>\n<th>說明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>dlv.exe    go</td>\n<td>語言調適工具</td>\n</tr>\n<tr>\n<td>gocode.exe    go</td>\n<td>語言检查，自动补全</td>\n</tr>\n<tr>\n<td>godef.exe     go</td>\n<td>語言定义和引用的跳转</td>\n</tr>\n<tr>\n<td>golint.exe     go</td>\n<td>語言规范检查</td>\n</tr>\n<tr>\n<td>go-outline.exe</td>\n<td>用于在Go源文件中提取JSON形式声明的简单工具</td>\n</tr>\n<tr>\n<td>gopkgs.exe</td>\n<td>快速列出可用包的工具</td>\n</tr>\n<tr>\n<td>gorename.exe</td>\n<td>在Go源代码中执行标识符的精确类型安全重命名</td>\n</tr>\n<tr>\n<td>goreturns.exe</td>\n<td>类似fmt和import的工具，使用零值填充Go返回语句以匹配func返回类</td>\n</tr>\n<tr>\n<td>go-symbols.exe</td>\n<td>从go源码树中提取JSON形式的包符号的工具</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<blockquote>\n<p>note class_name %} # 參考文章<br>windows 安裝Go</p>\n</blockquote>\n<ul>\n<li><a href=\"https://oranwind.org/go-go-yu-yan-yu-windows-shang-zhi-an-zhuang-yu-huan-jing-she-ding/\" title=\"[Go] Go 語言於 Windows 上之安裝與環境設定\">[Go] Go 語言於 Windows 上之安裝與環境設定</a> </li>\n<li><a href=\"https://blog.csdn.net/v6543210/article/details/84504460\">用vscode开发调试golang超简单教程</a></li>\n</ul>\n<p>Ｍac 安裝Go</p>\n<ul>\n<li><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/391186/\">Mac上Go環境和VS Code的正確安裝與配置方法</a> </li>\n</ul>\n<p>IDE : VScode</p>\n<ul>\n<li><a href=\"https://oranwind.org/go-ide-visual-studio-code/\" title=\"[Go] 使用 Visual Studio Code 上建置 Go 開發環境\">[Go] 使用 Visual Studio Code 上建置 Go 開發環境</a> </li>\n</ul>"},{"title":"[Go 02] GO 新手上路與概念筆記","date":"2020-05-01T13:16:32.000Z","_content":"\n\n<!--more-->\n\n>note info %}藍色區塊\n\n\n## 開始寫GO\n\n 分享自己初學GO時看的教學文章，安裝完GO環境之後，就可以撰寫自己第一支GO的程式了，網路上的系列說明很多很詳細，就不重複撰文了，以下則是自己收藏很有用的網路文章。\n\n- 教你撰寫第一隻 Go\n  - [Go的中文指南](https://tour.go-zh.org/list) (Go的中文指南，只有簡體)\n  - [the-little-go-book](https://kevingo.github.io/the-little-go-book/ \"the-little-go-book\")\n  - [Golang — GOROOT、GOPATH、Go-Modules-三者的關係介紹](https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655)\n  - [從商業利益看 Go 程式語言](https://blog.wu-boy.com/2017/01/business-benefits-of-go/)\n- 進階 go 整理教學\n  - [[筆記] Golang 進階](https://kennyliblog.nctu.me/2019/08/20/Golang-advanced/#%E7%AD%86%E8%A8%98-Golang-%E9%80%B2%E9%9A%8E \"[筆記] Golang 進階\")\n\n## 個人筆記整理\n\n### 筆記 Go 的基本类型\n>bool,string\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\nbyte // uint8 的别名\nrune // int32 的别名// 表示一个 Unicode 码点\nfloat32 float64\ncomplex64 complex128\nhttps://tour.go-zh.org/basics/11\n\n### 匿名欄位\n```go\ntype User struct {\n\tName string\n}\ntype Person struct {\n\tUser //匿名欄位\n\tID   string\n}\n\n  ss := Person{User: User{Name: \"123\"}, ID: \"123\"}\n\tfmt.Print(\"ss\", ss.Name)\n```\n\n\n###  筆記 Go的參數傳遞\n傳值的意思是：函式傳遞的總是原來這個東西的一個副本，一副拷貝。\n- pass by value\n  嚴格來說，Go只有傳植方式，會複製一個新的變數，且分配新的memory位址。\npass by pointer (或稱 called by reference，但其實不是)\n  指標方式則會複製一個新的指標，但指向的memeory位址是一樣的，但是是兩個不同的指標。\n1. 通常預期參數被修改，應傳指標。\n2. 在go裡pass by value開銷很小\n3. 迷思:Map/chan等其實是指標型別，因此會被修改，是種引用型別(reference types)[不是指call by reference]，仍是pass by value\n\n出自以下參考文章:\n\n- [golang-pass-by-pointer-vs-pass-by-value](https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/)\n- [there-is-no-pass-by-reference-in-go](https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go)\n- [《Golang 入門系列七》Go語言引數傳遞是傳值還是傳引用](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/74367/)\nGo語言中所有的傳參都是值傳遞（傳值），都是一個副本，一個拷貝。因為拷貝的內容有時候是非引用型別（int、string、struct等這些），這樣就在函式中就無法修改原內容資料；有的是引用型別（指標、map、slice、chan等這些），這樣就可以修改原內容資料。\"\n\n\n###  筆記 理解 Go 语言中的方法和接收者\n\n- 值接收者，是一个副本，方法内部無法對其真正的接收者做更改；\n- 指针接收者，是接收者的引用，對這個引用的修改可以影響真正的接收者。\n\n[理解 Go 语言中的方法和接收者](https://segmentfault.com/a/1190000009643429)\n\n\n### 筆記 go中的資料結構介面-interface\n\n[go中的資料結構介面-interface](https://www.itread01.com/content/1574082186.html)\n\n[interface gitbook](https://willh.gitbook.io/build-web-application-with-golang-zhtw/02.0/02.6)\n\n\n### 筆記 搞定Go Mock 單元測試\n\n[搞定Go單元測試（二）——mock框架(gomock)](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/695780/)\n\n","source":"_posts/02-go-start.md","raw":"---\ntitle: \"[Go 02] GO 新手上路與概念筆記\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-05-01 21:16:32\n---\n\n\n<!--more-->\n\n>note info %}藍色區塊\n\n\n## 開始寫GO\n\n 分享自己初學GO時看的教學文章，安裝完GO環境之後，就可以撰寫自己第一支GO的程式了，網路上的系列說明很多很詳細，就不重複撰文了，以下則是自己收藏很有用的網路文章。\n\n- 教你撰寫第一隻 Go\n  - [Go的中文指南](https://tour.go-zh.org/list) (Go的中文指南，只有簡體)\n  - [the-little-go-book](https://kevingo.github.io/the-little-go-book/ \"the-little-go-book\")\n  - [Golang — GOROOT、GOPATH、Go-Modules-三者的關係介紹](https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655)\n  - [從商業利益看 Go 程式語言](https://blog.wu-boy.com/2017/01/business-benefits-of-go/)\n- 進階 go 整理教學\n  - [[筆記] Golang 進階](https://kennyliblog.nctu.me/2019/08/20/Golang-advanced/#%E7%AD%86%E8%A8%98-Golang-%E9%80%B2%E9%9A%8E \"[筆記] Golang 進階\")\n\n## 個人筆記整理\n\n### 筆記 Go 的基本类型\n>bool,string\nint  int8  int16  int32  int64\nuint uint8 uint16 uint32 uint64 uintptr\nbyte // uint8 的别名\nrune // int32 的别名// 表示一个 Unicode 码点\nfloat32 float64\ncomplex64 complex128\nhttps://tour.go-zh.org/basics/11\n\n### 匿名欄位\n```go\ntype User struct {\n\tName string\n}\ntype Person struct {\n\tUser //匿名欄位\n\tID   string\n}\n\n  ss := Person{User: User{Name: \"123\"}, ID: \"123\"}\n\tfmt.Print(\"ss\", ss.Name)\n```\n\n\n###  筆記 Go的參數傳遞\n傳值的意思是：函式傳遞的總是原來這個東西的一個副本，一副拷貝。\n- pass by value\n  嚴格來說，Go只有傳植方式，會複製一個新的變數，且分配新的memory位址。\npass by pointer (或稱 called by reference，但其實不是)\n  指標方式則會複製一個新的指標，但指向的memeory位址是一樣的，但是是兩個不同的指標。\n1. 通常預期參數被修改，應傳指標。\n2. 在go裡pass by value開銷很小\n3. 迷思:Map/chan等其實是指標型別，因此會被修改，是種引用型別(reference types)[不是指call by reference]，仍是pass by value\n\n出自以下參考文章:\n\n- [golang-pass-by-pointer-vs-pass-by-value](https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/)\n- [there-is-no-pass-by-reference-in-go](https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go)\n- [《Golang 入門系列七》Go語言引數傳遞是傳值還是傳引用](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/74367/)\nGo語言中所有的傳參都是值傳遞（傳值），都是一個副本，一個拷貝。因為拷貝的內容有時候是非引用型別（int、string、struct等這些），這樣就在函式中就無法修改原內容資料；有的是引用型別（指標、map、slice、chan等這些），這樣就可以修改原內容資料。\"\n\n\n###  筆記 理解 Go 语言中的方法和接收者\n\n- 值接收者，是一个副本，方法内部無法對其真正的接收者做更改；\n- 指针接收者，是接收者的引用，對這個引用的修改可以影響真正的接收者。\n\n[理解 Go 语言中的方法和接收者](https://segmentfault.com/a/1190000009643429)\n\n\n### 筆記 go中的資料結構介面-interface\n\n[go中的資料結構介面-interface](https://www.itread01.com/content/1574082186.html)\n\n[interface gitbook](https://willh.gitbook.io/build-web-application-with-golang-zhtw/02.0/02.6)\n\n\n### 筆記 搞定Go Mock 單元測試\n\n[搞定Go單元測試（二）——mock框架(gomock)](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/695780/)\n\n","slug":"02-go-start","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fha50008kp2xc4gt13u3","content":"<a id=\"more\"></a>\n\n<blockquote>\n<p>note info %}藍色區塊</p>\n</blockquote>\n<h2 id=\"開始寫GO\"><a href=\"#開始寫GO\" class=\"headerlink\" title=\"開始寫GO\"></a>開始寫GO</h2><p> 分享自己初學GO時看的教學文章，安裝完GO環境之後，就可以撰寫自己第一支GO的程式了，網路上的系列說明很多很詳細，就不重複撰文了，以下則是自己收藏很有用的網路文章。</p>\n<ul>\n<li>教你撰寫第一隻 Go<ul>\n<li><a href=\"https://tour.go-zh.org/list\">Go的中文指南</a> (Go的中文指南，只有簡體)</li>\n<li><a href=\"https://kevingo.github.io/the-little-go-book/\" title=\"the-little-go-book\">the-little-go-book</a></li>\n<li><a href=\"https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655\">Golang — GOROOT、GOPATH、Go-Modules-三者的關係介紹</a></li>\n<li><a href=\"https://blog.wu-boy.com/2017/01/business-benefits-of-go/\">從商業利益看 Go 程式語言</a></li>\n</ul>\n</li>\n<li>進階 go 整理教學<ul>\n<li><a href=\"https://kennyliblog.nctu.me/2019/08/20/Golang-advanced/#%E7%AD%86%E8%A8%98-Golang-%E9%80%B2%E9%9A%8E\" title=\"[筆記] Golang 進階\">[筆記] Golang 進階</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"個人筆記整理\"><a href=\"#個人筆記整理\" class=\"headerlink\" title=\"個人筆記整理\"></a>個人筆記整理</h2><h3 id=\"筆記-Go-的基本类型\"><a href=\"#筆記-Go-的基本类型\" class=\"headerlink\" title=\"筆記 Go 的基本类型\"></a>筆記 Go 的基本类型</h3><blockquote>\n<p>bool,string<br>int  int8  int16  int32  int64<br>uint uint8 uint16 uint32 uint64 uintptr<br>byte // uint8 的别名<br>rune // int32 的别名// 表示一个 Unicode 码点<br>float32 float64<br>complex64 complex128<br><a href=\"https://tour.go-zh.org/basics/11\">https://tour.go-zh.org/basics/11</a></p>\n</blockquote>\n<h3 id=\"匿名欄位\"><a href=\"#匿名欄位\" class=\"headerlink\" title=\"匿名欄位\"></a>匿名欄位</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUser <span class=\"comment\">//匿名欄位</span></span><br><span class=\"line\">\tID   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ss := Person&#123;User: User&#123;Name: <span class=\"string\">&quot;123&quot;</span>&#125;, ID: <span class=\"string\">&quot;123&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;ss&quot;</span>, ss.Name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"筆記-Go的參數傳遞\"><a href=\"#筆記-Go的參數傳遞\" class=\"headerlink\" title=\"筆記 Go的參數傳遞\"></a>筆記 Go的參數傳遞</h3><p>傳值的意思是：函式傳遞的總是原來這個東西的一個副本，一副拷貝。</p>\n<ul>\n<li>pass by value<br>嚴格來說，Go只有傳植方式，會複製一個新的變數，且分配新的memory位址。<br>pass by pointer (或稱 called by reference，但其實不是)<br>指標方式則會複製一個新的指標，但指向的memeory位址是一樣的，但是是兩個不同的指標。</li>\n</ul>\n<ol>\n<li>通常預期參數被修改，應傳指標。</li>\n<li>在go裡pass by value開銷很小</li>\n<li>迷思:Map/chan等其實是指標型別，因此會被修改，是種引用型別(reference types)[不是指call by reference]，仍是pass by value</li>\n</ol>\n<p>出自以下參考文章:</p>\n<ul>\n<li><a href=\"https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/\">golang-pass-by-pointer-vs-pass-by-value</a></li>\n<li><a href=\"https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go\">there-is-no-pass-by-reference-in-go</a></li>\n<li><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/74367/\">《Golang 入門系列七》Go語言引數傳遞是傳值還是傳引用</a><br>Go語言中所有的傳參都是值傳遞（傳值），都是一個副本，一個拷貝。因為拷貝的內容有時候是非引用型別（int、string、struct等這些），這樣就在函式中就無法修改原內容資料；有的是引用型別（指標、map、slice、chan等這些），這樣就可以修改原內容資料。”</li>\n</ul>\n<h3 id=\"筆記-理解-Go-语言中的方法和接收者\"><a href=\"#筆記-理解-Go-语言中的方法和接收者\" class=\"headerlink\" title=\"筆記 理解 Go 语言中的方法和接收者\"></a>筆記 理解 Go 语言中的方法和接收者</h3><ul>\n<li>值接收者，是一个副本，方法内部無法對其真正的接收者做更改；</li>\n<li>指针接收者，是接收者的引用，對這個引用的修改可以影響真正的接收者。</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000009643429\">理解 Go 语言中的方法和接收者</a></p>\n<h3 id=\"筆記-go中的資料結構介面-interface\"><a href=\"#筆記-go中的資料結構介面-interface\" class=\"headerlink\" title=\"筆記 go中的資料結構介面-interface\"></a>筆記 go中的資料結構介面-interface</h3><p><a href=\"https://www.itread01.com/content/1574082186.html\">go中的資料結構介面-interface</a></p>\n<p><a href=\"https://willh.gitbook.io/build-web-application-with-golang-zhtw/02.0/02.6\">interface gitbook</a></p>\n<h3 id=\"筆記-搞定Go-Mock-單元測試\"><a href=\"#筆記-搞定Go-Mock-單元測試\" class=\"headerlink\" title=\"筆記 搞定Go Mock 單元測試\"></a>筆記 搞定Go Mock 單元測試</h3><p><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/695780/\">搞定Go單元測試（二）——mock框架(gomock)</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>note info %}藍色區塊</p>\n</blockquote>\n<h2 id=\"開始寫GO\"><a href=\"#開始寫GO\" class=\"headerlink\" title=\"開始寫GO\"></a>開始寫GO</h2><p> 分享自己初學GO時看的教學文章，安裝完GO環境之後，就可以撰寫自己第一支GO的程式了，網路上的系列說明很多很詳細，就不重複撰文了，以下則是自己收藏很有用的網路文章。</p>\n<ul>\n<li>教你撰寫第一隻 Go<ul>\n<li><a href=\"https://tour.go-zh.org/list\">Go的中文指南</a> (Go的中文指南，只有簡體)</li>\n<li><a href=\"https://kevingo.github.io/the-little-go-book/\" title=\"the-little-go-book\">the-little-go-book</a></li>\n<li><a href=\"https://medium.com/%E4%BC%81%E9%B5%9D%E4%B9%9F%E6%87%82%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/golang-goroot-gopath-go-modules-%E4%B8%89%E8%80%85%E7%9A%84%E9%97%9C%E4%BF%82%E4%BB%8B%E7%B4%B9-d17481d7a655\">Golang — GOROOT、GOPATH、Go-Modules-三者的關係介紹</a></li>\n<li><a href=\"https://blog.wu-boy.com/2017/01/business-benefits-of-go/\">從商業利益看 Go 程式語言</a></li>\n</ul>\n</li>\n<li>進階 go 整理教學<ul>\n<li><a href=\"https://kennyliblog.nctu.me/2019/08/20/Golang-advanced/#%E7%AD%86%E8%A8%98-Golang-%E9%80%B2%E9%9A%8E\" title=\"[筆記] Golang 進階\">[筆記] Golang 進階</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"個人筆記整理\"><a href=\"#個人筆記整理\" class=\"headerlink\" title=\"個人筆記整理\"></a>個人筆記整理</h2><h3 id=\"筆記-Go-的基本类型\"><a href=\"#筆記-Go-的基本类型\" class=\"headerlink\" title=\"筆記 Go 的基本类型\"></a>筆記 Go 的基本类型</h3><blockquote>\n<p>bool,string<br>int  int8  int16  int32  int64<br>uint uint8 uint16 uint32 uint64 uintptr<br>byte // uint8 的别名<br>rune // int32 的别名// 表示一个 Unicode 码点<br>float32 float64<br>complex64 complex128<br><a href=\"https://tour.go-zh.org/basics/11\">https://tour.go-zh.org/basics/11</a></p>\n</blockquote>\n<h3 id=\"匿名欄位\"><a href=\"#匿名欄位\" class=\"headerlink\" title=\"匿名欄位\"></a>匿名欄位</h3><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> Person <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tUser <span class=\"comment\">//匿名欄位</span></span><br><span class=\"line\">\tID   <span class=\"keyword\">string</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  ss := Person&#123;User: User&#123;Name: <span class=\"string\">&quot;123&quot;</span>&#125;, ID: <span class=\"string\">&quot;123&quot;</span>&#125;</span><br><span class=\"line\">\tfmt.Print(<span class=\"string\">&quot;ss&quot;</span>, ss.Name)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"筆記-Go的參數傳遞\"><a href=\"#筆記-Go的參數傳遞\" class=\"headerlink\" title=\"筆記 Go的參數傳遞\"></a>筆記 Go的參數傳遞</h3><p>傳值的意思是：函式傳遞的總是原來這個東西的一個副本，一副拷貝。</p>\n<ul>\n<li>pass by value<br>嚴格來說，Go只有傳植方式，會複製一個新的變數，且分配新的memory位址。<br>pass by pointer (或稱 called by reference，但其實不是)<br>指標方式則會複製一個新的指標，但指向的memeory位址是一樣的，但是是兩個不同的指標。</li>\n</ul>\n<ol>\n<li>通常預期參數被修改，應傳指標。</li>\n<li>在go裡pass by value開銷很小</li>\n<li>迷思:Map/chan等其實是指標型別，因此會被修改，是種引用型別(reference types)[不是指call by reference]，仍是pass by value</li>\n</ol>\n<p>出自以下參考文章:</p>\n<ul>\n<li><a href=\"https://goinbigdata.com/golang-pass-by-pointer-vs-pass-by-value/\">golang-pass-by-pointer-vs-pass-by-value</a></li>\n<li><a href=\"https://dave.cheney.net/2017/04/29/there-is-no-pass-by-reference-in-go\">there-is-no-pass-by-reference-in-go</a></li>\n<li><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/74367/\">《Golang 入門系列七》Go語言引數傳遞是傳值還是傳引用</a><br>Go語言中所有的傳參都是值傳遞（傳值），都是一個副本，一個拷貝。因為拷貝的內容有時候是非引用型別（int、string、struct等這些），這樣就在函式中就無法修改原內容資料；有的是引用型別（指標、map、slice、chan等這些），這樣就可以修改原內容資料。”</li>\n</ul>\n<h3 id=\"筆記-理解-Go-语言中的方法和接收者\"><a href=\"#筆記-理解-Go-语言中的方法和接收者\" class=\"headerlink\" title=\"筆記 理解 Go 语言中的方法和接收者\"></a>筆記 理解 Go 语言中的方法和接收者</h3><ul>\n<li>值接收者，是一个副本，方法内部無法對其真正的接收者做更改；</li>\n<li>指针接收者，是接收者的引用，對這個引用的修改可以影響真正的接收者。</li>\n</ul>\n<p><a href=\"https://segmentfault.com/a/1190000009643429\">理解 Go 语言中的方法和接收者</a></p>\n<h3 id=\"筆記-go中的資料結構介面-interface\"><a href=\"#筆記-go中的資料結構介面-interface\" class=\"headerlink\" title=\"筆記 go中的資料結構介面-interface\"></a>筆記 go中的資料結構介面-interface</h3><p><a href=\"https://www.itread01.com/content/1574082186.html\">go中的資料結構介面-interface</a></p>\n<p><a href=\"https://willh.gitbook.io/build-web-application-with-golang-zhtw/02.0/02.6\">interface gitbook</a></p>\n<h3 id=\"筆記-搞定Go-Mock-單元測試\"><a href=\"#筆記-搞定Go-Mock-單元測試\" class=\"headerlink\" title=\"筆記 搞定Go Mock 單元測試\"></a>筆記 搞定Go Mock 單元測試</h3><p><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/695780/\">搞定Go單元測試（二）——mock框架(gomock)</a></p>"},{"title":"[Go 03] 包管理與模組(Module)相關","date":"2021-02-13T07:09:47.000Z","_content":"\n>Go 包管理與模組相關 \n\n\n\n<!--more-->\n\n\n### import\n\n\n- \"time\" imported but not used-compiler\n不允許引入未使用包，vscode 儲存，工具會自動幫忙移除。\n```\n如果要引用沒有用到的import，則要使用底線(_)\nimport (\n    _ \"github.com/go-sql-driver/mysql\"\n)\n```\n- import cycle not allowed\n執行後會出現相依錯誤\n\t延伸閱讀: [Golang中解决\"import cycle not allowed\"的2种方法](https://studygolang.com/articles/14152)\n\n### Go Module\nGo 1.11 之後提供go modules 可以不需要把專案程式碼放在 $GOPATH/src 中開發，此外還能管理套件相依性。\n\n- go mod init\n建立一個 go.mod，裡面會記錄import版本\n- go get xxxxxx\ngo get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。\n 預設會下載最新，@version 可以指定版號。\n 常見flag使用: \n\t-d\t让命令程序只执行下载动作，而不执行安装动作。\n\t-u\t让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\t-v 显示执行的命令\n\n- go mod tidy\n移除不需要的import\n- go mod download\n可以下载所需要的依赖，或是go build也會自動將 pkg 下載到 GOPATH/pkg/mod 內\n\n\n延伸閱讀: [go get命令——一键获取代码、编译并安装](http://c.biancheng.net/view/123.html)\n\n### Go 相依圖\ngo mod graph 可视化——gmchart\n延伸閱讀: https://segmentfault.com/a/1190000038897207","source":"_posts/03-go-Module.md","raw":"---\ntitle: \"[Go 03] 包管理與模組(Module)相關\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2021-02-13 15:09:47\n---\n\n>Go 包管理與模組相關 \n\n\n\n<!--more-->\n\n\n### import\n\n\n- \"time\" imported but not used-compiler\n不允許引入未使用包，vscode 儲存，工具會自動幫忙移除。\n```\n如果要引用沒有用到的import，則要使用底線(_)\nimport (\n    _ \"github.com/go-sql-driver/mysql\"\n)\n```\n- import cycle not allowed\n執行後會出現相依錯誤\n\t延伸閱讀: [Golang中解决\"import cycle not allowed\"的2种方法](https://studygolang.com/articles/14152)\n\n### Go Module\nGo 1.11 之後提供go modules 可以不需要把專案程式碼放在 $GOPATH/src 中開發，此外還能管理套件相依性。\n\n- go mod init\n建立一個 go.mod，裡面會記錄import版本\n- go get xxxxxx\ngo get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。\n 預設會下載最新，@version 可以指定版號。\n 常見flag使用: \n\t-d\t让命令程序只执行下载动作，而不执行安装动作。\n\t-u\t让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\t-v 显示执行的命令\n\n- go mod tidy\n移除不需要的import\n- go mod download\n可以下载所需要的依赖，或是go build也會自動將 pkg 下載到 GOPATH/pkg/mod 內\n\n\n延伸閱讀: [go get命令——一键获取代码、编译并安装](http://c.biancheng.net/view/123.html)\n\n### Go 相依圖\ngo mod graph 可视化——gmchart\n延伸閱讀: https://segmentfault.com/a/1190000038897207","slug":"03-go-Module","published":1,"updated":"2023-01-22T07:03:26.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fha60009kp2x2xaq955x","content":"<blockquote>\n<p>Go 包管理與模組相關 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><ul>\n<li>“time” imported but not used-compiler<br>不允許引入未使用包，vscode 儲存，工具會自動幫忙移除。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要引用沒有用到的import，則要使用底線(_)</span><br><span class=\"line\">import (</span><br><span class=\"line\">    _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>import cycle not allowed<br>執行後會出現相依錯誤<br>  延伸閱讀: <a href=\"https://studygolang.com/articles/14152\">Golang中解决”import cycle not allowed”的2种方法</a></li>\n</ul>\n<h3 id=\"Go-Module\"><a href=\"#Go-Module\" class=\"headerlink\" title=\"Go Module\"></a>Go Module</h3><p>Go 1.11 之後提供go modules 可以不需要把專案程式碼放在 $GOPATH/src 中開發，此外還能管理套件相依性。</p>\n<ul>\n<li><p>go mod init<br>建立一個 go.mod，裡面會記錄import版本</p>\n</li>\n<li><p>go get xxxxxx<br>go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。<br>預設會下載最新，@version 可以指定版號。<br>常見flag使用:<br>  -d    让命令程序只执行下载动作，而不执行安装动作。<br>  -u    让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。<br>  -v 显示执行的命令</p>\n</li>\n<li><p>go mod tidy<br>移除不需要的import</p>\n</li>\n<li><p>go mod download<br>可以下载所需要的依赖，或是go build也會自動將 pkg 下載到 GOPATH/pkg/mod 內</p>\n</li>\n</ul>\n<p>延伸閱讀: <a href=\"http://c.biancheng.net/view/123.html\">go get命令——一键获取代码、编译并安装</a></p>\n<h3 id=\"Go-相依圖\"><a href=\"#Go-相依圖\" class=\"headerlink\" title=\"Go 相依圖\"></a>Go 相依圖</h3><p>go mod graph 可视化——gmchart<br>延伸閱讀: <a href=\"https://segmentfault.com/a/1190000038897207\">https://segmentfault.com/a/1190000038897207</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>Go 包管理與模組相關 </p>\n</blockquote>","more":"<h3 id=\"import\"><a href=\"#import\" class=\"headerlink\" title=\"import\"></a>import</h3><ul>\n<li>“time” imported but not used-compiler<br>不允許引入未使用包，vscode 儲存，工具會自動幫忙移除。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果要引用沒有用到的import，則要使用底線(_)</span><br><span class=\"line\">import (</span><br><span class=\"line\">    _ &quot;github.com&#x2F;go-sql-driver&#x2F;mysql&quot;</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure></li>\n<li>import cycle not allowed<br>執行後會出現相依錯誤<br>  延伸閱讀: <a href=\"https://studygolang.com/articles/14152\">Golang中解决”import cycle not allowed”的2种方法</a></li>\n</ul>\n<h3 id=\"Go-Module\"><a href=\"#Go-Module\" class=\"headerlink\" title=\"Go Module\"></a>Go Module</h3><p>Go 1.11 之後提供go modules 可以不需要把專案程式碼放在 $GOPATH/src 中開發，此外還能管理套件相依性。</p>\n<ul>\n<li><p>go mod init<br>建立一個 go.mod，裡面會記錄import版本</p>\n</li>\n<li><p>go get xxxxxx<br>go get 命令可以借助代码管理工具通过远程拉取或更新代码包及其依赖包，并自动完成编译和安装。<br>預設會下載最新，@version 可以指定版號。<br>常見flag使用:<br>  -d    让命令程序只执行下载动作，而不执行安装动作。<br>  -u    让命令利用网络来更新已有代码包及其依赖包。默认情况下，该命令只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。<br>  -v 显示执行的命令</p>\n</li>\n<li><p>go mod tidy<br>移除不需要的import</p>\n</li>\n<li><p>go mod download<br>可以下载所需要的依赖，或是go build也會自動將 pkg 下載到 GOPATH/pkg/mod 內</p>\n</li>\n</ul>\n<p>延伸閱讀: <a href=\"http://c.biancheng.net/view/123.html\">go get命令——一键获取代码、编译并安装</a></p>\n<h3 id=\"Go-相依圖\"><a href=\"#Go-相依圖\" class=\"headerlink\" title=\"Go 相依圖\"></a>Go 相依圖</h3><p>go mod graph 可视化——gmchart<br>延伸閱讀: <a href=\"https://segmentfault.com/a/1190000038897207\">https://segmentfault.com/a/1190000038897207</a></p>"},{"title":"[Go 04] 信號處理和退出程式","date":"2020-05-01T14:08:34.000Z","_content":"\n> 一般在執行go run main.go後就會馬上回到命令列，\n這邊實作當接收到ctrl+c或是終止程式才會停止程式\n\n# 本文說明：\n- go實作接收命令而中止程式．\n- 會用到channel管道來進行阻塞，並接收os/signal訊號\n\n<!--more-->\n\n\n\n\n程式碼：\n\n```go\nfunc main() {\n\tfmt.Println(\"start\")\n\terrs := make(chan error, 1)\n\tlistenForＳignal(errs)\n\tc := <-errs  //阻塞程式\n\tfmt.Println(\"terminating:\", c)\n}\n\nfunc listenForＳignal(errChan chan error) {\n\tgo func() {\n\t\tc := make(chan os.Signal,1)\n\t\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)//要終止的訊號\n\n\t\terrChan <- fmt.Errorf(\"%s\", <-c)\n\t}()\n}\n\n```\n\n# 說明：\n使用\"os/signal\"包，用來接收訊號使用，notify方法用来監聽收到的信號（stop方法則取消）\n    * SIGINT\t表示用户按下INTR字符(Ctrl+C)觸發\n    * SIGTERM\t结束程序 kill pid的作用是向進程為pid的程序发送SIGTERM\n    * 其他像是SIGKILL   kill -9 pid則是發送立即終止 等等就先不使用\n\n\n\n## 測試接收SIGINT\n\n然後執行go run main.go後，會看到服務就一直執行著，再按下ctrl+c\n\n```\n> go run main.go\nstart\n^Cterminating: interrupt\n```\n\n## 測試接收SIGTERM\n先將main.go編譯成執行檔 -o代表放在目前目錄下 取名為demo\n\"./\"執行demo這檔案\n```\ngo build -o ./demo  main.go\n ./demo \nstart\n```\n\n接下來開另一視窗 找出進程跟demo有關的pid 然後執行kill pid，確認已停止了\n```\n➜  ~ ps -A  | grep demo     \n14693 ttys000    0:00.00 ./demo\n➜  ~ kill 14693\n➜  ~ ps -A  | grep demo\n```\n\n回到程式執行視窗就會看到以下被中止的訊息了\n\n```\n ./demo\nstart\nterminating: terminated\n```\n\n------------\n\n\n# 後記疑問：\n1. 不太知道到底要怎麼要在vscode debug模式\n去模擬ctrl+c時會跑到的地方來看程式，google未有結果，無解\n2. 在linux環境有效，win環境搜尋無解\n\n","source":"_posts/03-go-signal.md","raw":"---\ntitle: \"[Go 04] 信號處理和退出程式\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-05-01 22:08:34\n---\n\n> 一般在執行go run main.go後就會馬上回到命令列，\n這邊實作當接收到ctrl+c或是終止程式才會停止程式\n\n# 本文說明：\n- go實作接收命令而中止程式．\n- 會用到channel管道來進行阻塞，並接收os/signal訊號\n\n<!--more-->\n\n\n\n\n程式碼：\n\n```go\nfunc main() {\n\tfmt.Println(\"start\")\n\terrs := make(chan error, 1)\n\tlistenForＳignal(errs)\n\tc := <-errs  //阻塞程式\n\tfmt.Println(\"terminating:\", c)\n}\n\nfunc listenForＳignal(errChan chan error) {\n\tgo func() {\n\t\tc := make(chan os.Signal,1)\n\t\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)//要終止的訊號\n\n\t\terrChan <- fmt.Errorf(\"%s\", <-c)\n\t}()\n}\n\n```\n\n# 說明：\n使用\"os/signal\"包，用來接收訊號使用，notify方法用来監聽收到的信號（stop方法則取消）\n    * SIGINT\t表示用户按下INTR字符(Ctrl+C)觸發\n    * SIGTERM\t结束程序 kill pid的作用是向進程為pid的程序发送SIGTERM\n    * 其他像是SIGKILL   kill -9 pid則是發送立即終止 等等就先不使用\n\n\n\n## 測試接收SIGINT\n\n然後執行go run main.go後，會看到服務就一直執行著，再按下ctrl+c\n\n```\n> go run main.go\nstart\n^Cterminating: interrupt\n```\n\n## 測試接收SIGTERM\n先將main.go編譯成執行檔 -o代表放在目前目錄下 取名為demo\n\"./\"執行demo這檔案\n```\ngo build -o ./demo  main.go\n ./demo \nstart\n```\n\n接下來開另一視窗 找出進程跟demo有關的pid 然後執行kill pid，確認已停止了\n```\n➜  ~ ps -A  | grep demo     \n14693 ttys000    0:00.00 ./demo\n➜  ~ kill 14693\n➜  ~ ps -A  | grep demo\n```\n\n回到程式執行視窗就會看到以下被中止的訊息了\n\n```\n ./demo\nstart\nterminating: terminated\n```\n\n------------\n\n\n# 後記疑問：\n1. 不太知道到底要怎麼要在vscode debug模式\n去模擬ctrl+c時會跑到的地方來看程式，google未有結果，無解\n2. 在linux環境有效，win環境搜尋無解\n\n","slug":"03-go-signal","published":1,"updated":"2022-05-01T07:09:56.186Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fha9000dkp2xheyodnpu","content":"<blockquote>\n<p>一般在執行go run main.go後就會馬上回到命令列，<br>這邊實作當接收到ctrl+c或是終止程式才會停止程式</p>\n</blockquote>\n<h1 id=\"本文說明：\"><a href=\"#本文說明：\" class=\"headerlink\" title=\"本文說明：\"></a>本文說明：</h1><ul>\n<li>go實作接收命令而中止程式．</li>\n<li>會用到channel管道來進行阻塞，並接收os/signal訊號</li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n\n<p>程式碼：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">\terrs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> error, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tlistenForＳignal(errs)</span><br><span class=\"line\">\tc := &lt;-errs  <span class=\"comment\">//阻塞程式</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;terminating:&quot;</span>, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">listenFor</span>Ｓ<span class=\"title\">ignal</span><span class=\"params\">(errChan <span class=\"keyword\">chan</span> error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)<span class=\"comment\">//要終止的訊號</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\terrChan &lt;- fmt.Errorf(<span class=\"string\">&quot;%s&quot;</span>, &lt;-c)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"說明：\"><a href=\"#說明：\" class=\"headerlink\" title=\"說明：\"></a>說明：</h1><p>使用”os/signal”包，用來接收訊號使用，notify方法用来監聽收到的信號（stop方法則取消）<br>    * SIGINT    表示用户按下INTR字符(Ctrl+C)觸發<br>    * SIGTERM    结束程序 kill pid的作用是向進程為pid的程序发送SIGTERM<br>    * 其他像是SIGKILL   kill -9 pid則是發送立即終止 等等就先不使用</p>\n<h2 id=\"測試接收SIGINT\"><a href=\"#測試接收SIGINT\" class=\"headerlink\" title=\"測試接收SIGINT\"></a>測試接收SIGINT</h2><p>然後執行go run main.go後，會看到服務就一直執行著，再按下ctrl+c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go run main.go</span><br><span class=\"line\">start</span><br><span class=\"line\">^Cterminating: interrupt</span><br></pre></td></tr></table></figure>\n<h2 id=\"測試接收SIGTERM\"><a href=\"#測試接收SIGTERM\" class=\"headerlink\" title=\"測試接收SIGTERM\"></a>測試接收SIGTERM</h2><p>先將main.go編譯成執行檔 -o代表放在目前目錄下 取名為demo<br>“./“執行demo這檔案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -o .&#x2F;demo  main.go</span><br><span class=\"line\"> .&#x2F;demo </span><br><span class=\"line\">start</span><br></pre></td></tr></table></figure>\n<p>接下來開另一視窗 找出進程跟demo有關的pid 然後執行kill pid，確認已停止了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ ps -A  | grep demo     </span><br><span class=\"line\">14693 ttys000    0:00.00 .&#x2F;demo</span><br><span class=\"line\">➜  ~ kill 14693</span><br><span class=\"line\">➜  ~ ps -A  | grep demo</span><br></pre></td></tr></table></figure>\n<p>回到程式執行視窗就會看到以下被中止的訊息了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .&#x2F;demo</span><br><span class=\"line\">start</span><br><span class=\"line\">terminating: terminated</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"後記疑問：\"><a href=\"#後記疑問：\" class=\"headerlink\" title=\"後記疑問：\"></a>後記疑問：</h1><ol>\n<li>不太知道到底要怎麼要在vscode debug模式<br>去模擬ctrl+c時會跑到的地方來看程式，google未有結果，無解</li>\n<li>在linux環境有效，win環境搜尋無解</li>\n</ol>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>一般在執行go run main.go後就會馬上回到命令列，<br>這邊實作當接收到ctrl+c或是終止程式才會停止程式</p>\n</blockquote>\n<h1 id=\"本文說明：\"><a href=\"#本文說明：\" class=\"headerlink\" title=\"本文說明：\"></a>本文說明：</h1><ul>\n<li>go實作接收命令而中止程式．</li>\n<li>會用到channel管道來進行阻塞，並接收os/signal訊號</li>\n</ul>","more":"<p>程式碼：</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;start&quot;</span>)</span><br><span class=\"line\">\terrs := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> error, <span class=\"number\">1</span>)</span><br><span class=\"line\">\tlistenForＳignal(errs)</span><br><span class=\"line\">\tc := &lt;-errs  <span class=\"comment\">//阻塞程式</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;terminating:&quot;</span>, c)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">listenFor</span>Ｓ<span class=\"title\">ignal</span><span class=\"params\">(errChan <span class=\"keyword\">chan</span> error)</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\tc := <span class=\"built_in\">make</span>(<span class=\"keyword\">chan</span> os.Signal,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t\tsignal.Notify(c, syscall.SIGINT, syscall.SIGTERM)<span class=\"comment\">//要終止的訊號</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t\terrChan &lt;- fmt.Errorf(<span class=\"string\">&quot;%s&quot;</span>, &lt;-c)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h1 id=\"說明：\"><a href=\"#說明：\" class=\"headerlink\" title=\"說明：\"></a>說明：</h1><p>使用”os/signal”包，用來接收訊號使用，notify方法用来監聽收到的信號（stop方法則取消）<br>    * SIGINT    表示用户按下INTR字符(Ctrl+C)觸發<br>    * SIGTERM    结束程序 kill pid的作用是向進程為pid的程序发送SIGTERM<br>    * 其他像是SIGKILL   kill -9 pid則是發送立即終止 等等就先不使用</p>\n<h2 id=\"測試接收SIGINT\"><a href=\"#測試接收SIGINT\" class=\"headerlink\" title=\"測試接收SIGINT\"></a>測試接收SIGINT</h2><p>然後執行go run main.go後，會看到服務就一直執行著，再按下ctrl+c</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; go run main.go</span><br><span class=\"line\">start</span><br><span class=\"line\">^Cterminating: interrupt</span><br></pre></td></tr></table></figure>\n<h2 id=\"測試接收SIGTERM\"><a href=\"#測試接收SIGTERM\" class=\"headerlink\" title=\"測試接收SIGTERM\"></a>測試接收SIGTERM</h2><p>先將main.go編譯成執行檔 -o代表放在目前目錄下 取名為demo<br>“./“執行demo這檔案</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go build -o .&#x2F;demo  main.go</span><br><span class=\"line\"> .&#x2F;demo </span><br><span class=\"line\">start</span><br></pre></td></tr></table></figure>\n<p>接下來開另一視窗 找出進程跟demo有關的pid 然後執行kill pid，確認已停止了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  ~ ps -A  | grep demo     </span><br><span class=\"line\">14693 ttys000    0:00.00 .&#x2F;demo</span><br><span class=\"line\">➜  ~ kill 14693</span><br><span class=\"line\">➜  ~ ps -A  | grep demo</span><br></pre></td></tr></table></figure>\n<p>回到程式執行視窗就會看到以下被中止的訊息了</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> .&#x2F;demo</span><br><span class=\"line\">start</span><br><span class=\"line\">terminating: terminated</span><br></pre></td></tr></table></figure>\n<hr>\n<h1 id=\"後記疑問：\"><a href=\"#後記疑問：\" class=\"headerlink\" title=\"後記疑問：\"></a>後記疑問：</h1><ol>\n<li>不太知道到底要怎麼要在vscode debug模式<br>去模擬ctrl+c時會跑到的地方來看程式，google未有結果，無解</li>\n<li>在linux環境有效，win環境搜尋無解</li>\n</ol>"},{"title":"[Go 05] 使用 Gin 框架快速建立 http 服務","date":"2020-05-08T08:00:05.000Z","_content":"\n>如何用 Gin 框架快速建立 HTTP [ GET/POST 等方法] \n\n<!--more-->\n\n#### 效果\n\n用 Postman 工具打看看就可以得到下面結果\n\n| SEND [method url ]                                                     | RESPONSE [status body ]           |\n| :--------------------------------------------------------------------- | :-------------------------------- |\n| GET http://localhost:8080/api/v1/user                                  | 200 , OK                          |\n| GET http://localhost:8080/api/v1/user/May                              | 200 ,\"Hello,May\"                  |\n| POST http://localhost:8080/api/v1/user <br>{\"name\": \"user1\",\"age\": 33} | 200 , {\"name\": \"user1\",\"age\": 33} |\n\n#### 程式碼\n\n```go\n// 1.啟動服務\nfunc StartHttpServer(errChan chan error) {\n\tgin.SetMode(gin.ReleaseMode)\n\tengine := gin.New()\n\tinitRoutes(engine)\n\tgo func() { errChan <- engine.Run(:8080) }()\n}\n\n// 2.設定路由組\nfunc initRoutes(e *gin.Engine) {\n\troot := e.Group(\"api/v1\")\n\tuserGroup := root.Group(\"user\")\n\t{\n\t\tuserGroup.GET(\"\", apis.User)\n\t\tuserGroup.GET(\":name\", apis.UserName)\n\t\tuserGroup.POST(\"\", apis.PostName)\n\t}\n}\n\n// 3. 設定回覆\nfunc User(c *gin.Context) {\n\tc.JSON(http.StatusOK, \"OK\") //回覆status 200 & body \"OK\"\n}\n//接受path參數\n\tname := c.Param(\"name\")\n\tc.JSON(http.StatusOK, fmt.Sprintf(\"%s,%s\", \"Hello\", name))\n}\n\n//接收 json 內容\nfunc PostName(c *gin.Context) {\n\tsc := &structs.User{}\n\tif err := c.ShouldBindJSON(sc); err != nil {\n\t\treturn\n\t}\n\tc.JSON(http.StatusOK, sc)\n}\ntype User struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\n```\n\n#### Gin 延伸\n\n- 寫中間件 [控制每個 Url timeout/log 等等行為]\n- 套 swagger [下一篇]\n- gin.Context 還有 c.Header, c.Query, c.GetRawData() 等等使用方法，取參數非常方便\n\n---\n\n第一次去套用 Gin 真的覺得很神奇，本章純快速記錄效果，\n","source":"_posts/04-go-gin-http.md","raw":"---\ntitle: \"[Go 05] 使用 Gin 框架快速建立 http 服務\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-05-09T00:00:05+08:00\n---\n\n>如何用 Gin 框架快速建立 HTTP [ GET/POST 等方法] \n\n<!--more-->\n\n#### 效果\n\n用 Postman 工具打看看就可以得到下面結果\n\n| SEND [method url ]                                                     | RESPONSE [status body ]           |\n| :--------------------------------------------------------------------- | :-------------------------------- |\n| GET http://localhost:8080/api/v1/user                                  | 200 , OK                          |\n| GET http://localhost:8080/api/v1/user/May                              | 200 ,\"Hello,May\"                  |\n| POST http://localhost:8080/api/v1/user <br>{\"name\": \"user1\",\"age\": 33} | 200 , {\"name\": \"user1\",\"age\": 33} |\n\n#### 程式碼\n\n```go\n// 1.啟動服務\nfunc StartHttpServer(errChan chan error) {\n\tgin.SetMode(gin.ReleaseMode)\n\tengine := gin.New()\n\tinitRoutes(engine)\n\tgo func() { errChan <- engine.Run(:8080) }()\n}\n\n// 2.設定路由組\nfunc initRoutes(e *gin.Engine) {\n\troot := e.Group(\"api/v1\")\n\tuserGroup := root.Group(\"user\")\n\t{\n\t\tuserGroup.GET(\"\", apis.User)\n\t\tuserGroup.GET(\":name\", apis.UserName)\n\t\tuserGroup.POST(\"\", apis.PostName)\n\t}\n}\n\n// 3. 設定回覆\nfunc User(c *gin.Context) {\n\tc.JSON(http.StatusOK, \"OK\") //回覆status 200 & body \"OK\"\n}\n//接受path參數\n\tname := c.Param(\"name\")\n\tc.JSON(http.StatusOK, fmt.Sprintf(\"%s,%s\", \"Hello\", name))\n}\n\n//接收 json 內容\nfunc PostName(c *gin.Context) {\n\tsc := &structs.User{}\n\tif err := c.ShouldBindJSON(sc); err != nil {\n\t\treturn\n\t}\n\tc.JSON(http.StatusOK, sc)\n}\ntype User struct {\n\tName string `json:\"name\"`\n\tAge  int    `json:\"age\"`\n}\n\n```\n\n#### Gin 延伸\n\n- 寫中間件 [控制每個 Url timeout/log 等等行為]\n- 套 swagger [下一篇]\n- gin.Context 還有 c.Header, c.Query, c.GetRawData() 等等使用方法，取參數非常方便\n\n---\n\n第一次去套用 Gin 真的覺得很神奇，本章純快速記錄效果，\n","slug":"04-go-gin-http","published":1,"updated":"2023-01-22T07:03:26.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhab000ekp2xaxueaabn","content":"<blockquote>\n<p>如何用 Gin 框架快速建立 HTTP [ GET/POST 等方法] </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p>用 Postman 工具打看看就可以得到下面結果</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SEND [method url ]</th>\n<th align=\"left\">RESPONSE [status body ]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET <a href=\"http://localhost:8080/api/v1/user\">http://localhost:8080/api/v1/user</a></td>\n<td align=\"left\">200 , OK</td>\n</tr>\n<tr>\n<td align=\"left\">GET <a href=\"http://localhost:8080/api/v1/user/May\">http://localhost:8080/api/v1/user/May</a></td>\n<td align=\"left\">200 ,”Hello,May”</td>\n</tr>\n<tr>\n<td align=\"left\">POST <a href=\"http://localhost:8080/api/v1/user\">http://localhost:8080/api/v1/user</a> <br>{“name”: “user1”,”age”: 33}</td>\n<td align=\"left\">200 , {“name”: “user1”,”age”: 33}</td>\n</tr>\n</tbody></table>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.啟動服務</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StartHttpServer</span><span class=\"params\">(errChan <span class=\"keyword\">chan</span> error)</span></span> &#123;</span><br><span class=\"line\">\tgin.SetMode(gin.ReleaseMode)</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; errChan &lt;- engine.Run(:<span class=\"number\">8080</span>) &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.設定路由組</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initRoutes</span><span class=\"params\">(e *gin.Engine)</span></span> &#123;</span><br><span class=\"line\">\troot := e.Group(<span class=\"string\">&quot;api/v1&quot;</span>)</span><br><span class=\"line\">\tuserGroup := root.Group(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tuserGroup.GET(<span class=\"string\">&quot;&quot;</span>, apis.User)</span><br><span class=\"line\">\t\tuserGroup.GET(<span class=\"string\">&quot;:name&quot;</span>, apis.UserName)</span><br><span class=\"line\">\t\tuserGroup.POST(<span class=\"string\">&quot;&quot;</span>, apis.PostName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 設定回覆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">User</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, <span class=\"string\">&quot;OK&quot;</span>) <span class=\"comment\">//回覆status 200 &amp; body &quot;OK&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//接受path參數</span></span><br><span class=\"line\">\tname := c.Param(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">\tc.JSON(http.StatusOK, fmt.Sprintf(<span class=\"string\">&quot;%s,%s&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>, name))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收 json 內容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PostName</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tsc := &amp;structs.User&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.ShouldBindJSON(sc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, sc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gin-延伸\"><a href=\"#Gin-延伸\" class=\"headerlink\" title=\"Gin 延伸\"></a>Gin 延伸</h4><ul>\n<li>寫中間件 [控制每個 Url timeout/log 等等行為]</li>\n<li>套 swagger [下一篇]</li>\n<li>gin.Context 還有 c.Header, c.Query, c.GetRawData() 等等使用方法，取參數非常方便</li>\n</ul>\n<hr>\n<p>第一次去套用 Gin 真的覺得很神奇，本章純快速記錄效果，</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>如何用 Gin 框架快速建立 HTTP [ GET/POST 等方法] </p>\n</blockquote>","more":"<h4 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h4><p>用 Postman 工具打看看就可以得到下面結果</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">SEND [method url ]</th>\n<th align=\"left\">RESPONSE [status body ]</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">GET <a href=\"http://localhost:8080/api/v1/user\">http://localhost:8080/api/v1/user</a></td>\n<td align=\"left\">200 , OK</td>\n</tr>\n<tr>\n<td align=\"left\">GET <a href=\"http://localhost:8080/api/v1/user/May\">http://localhost:8080/api/v1/user/May</a></td>\n<td align=\"left\">200 ,”Hello,May”</td>\n</tr>\n<tr>\n<td align=\"left\">POST <a href=\"http://localhost:8080/api/v1/user\">http://localhost:8080/api/v1/user</a> <br>{“name”: “user1”,”age”: 33}</td>\n<td align=\"left\">200 , {“name”: “user1”,”age”: 33}</td>\n</tr>\n</tbody></table>\n<h4 id=\"程式碼\"><a href=\"#程式碼\" class=\"headerlink\" title=\"程式碼\"></a>程式碼</h4><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 1.啟動服務</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">StartHttpServer</span><span class=\"params\">(errChan <span class=\"keyword\">chan</span> error)</span></span> &#123;</span><br><span class=\"line\">\tgin.SetMode(gin.ReleaseMode)</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine)</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123; errChan &lt;- engine.Run(:<span class=\"number\">8080</span>) &#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 2.設定路由組</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">initRoutes</span><span class=\"params\">(e *gin.Engine)</span></span> &#123;</span><br><span class=\"line\">\troot := e.Group(<span class=\"string\">&quot;api/v1&quot;</span>)</span><br><span class=\"line\">\tuserGroup := root.Group(<span class=\"string\">&quot;user&quot;</span>)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\tuserGroup.GET(<span class=\"string\">&quot;&quot;</span>, apis.User)</span><br><span class=\"line\">\t\tuserGroup.GET(<span class=\"string\">&quot;:name&quot;</span>, apis.UserName)</span><br><span class=\"line\">\t\tuserGroup.POST(<span class=\"string\">&quot;&quot;</span>, apis.PostName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 3. 設定回覆</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">User</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, <span class=\"string\">&quot;OK&quot;</span>) <span class=\"comment\">//回覆status 200 &amp; body &quot;OK&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//接受path參數</span></span><br><span class=\"line\">\tname := c.Param(<span class=\"string\">&quot;name&quot;</span>)</span><br><span class=\"line\">\tc.JSON(http.StatusOK, fmt.Sprintf(<span class=\"string\">&quot;%s,%s&quot;</span>, <span class=\"string\">&quot;Hello&quot;</span>, name))</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//接收 json 內容</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PostName</span><span class=\"params\">(c *gin.Context)</span></span> &#123;</span><br><span class=\"line\">\tsc := &amp;structs.User&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := c.ShouldBindJSON(sc); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span></span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tc.JSON(http.StatusOK, sc)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">type</span> User <span class=\"keyword\">struct</span> &#123;</span><br><span class=\"line\">\tName <span class=\"keyword\">string</span> <span class=\"string\">`json:&quot;name&quot;`</span></span><br><span class=\"line\">\tAge  <span class=\"keyword\">int</span>    <span class=\"string\">`json:&quot;age&quot;`</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"Gin-延伸\"><a href=\"#Gin-延伸\" class=\"headerlink\" title=\"Gin 延伸\"></a>Gin 延伸</h4><ul>\n<li>寫中間件 [控制每個 Url timeout/log 等等行為]</li>\n<li>套 swagger [下一篇]</li>\n<li>gin.Context 還有 c.Header, c.Query, c.GetRawData() 等等使用方法，取參數非常方便</li>\n</ul>\n<hr>\n<p>第一次去套用 Gin 真的覺得很神奇，本章純快速記錄效果，</p>"},{"title":"[Go 06] 寫測試並產出一目瞭然的網頁版覆蓋率報告 再也不用怕遺漏","date":"2020-05-08T08:02:42.000Z","_content":"\n# 本章介紹：\n\n- 為上一篇 Gin 框架的 User & PostName func.寫個簡單測試\n- 跑測試並瞭解 coverage 覆蓋率，產生測試報告(20210702 有新增vsocde用法補充)\n\n<!--more-->\n\n說明：新建一個檔案ＸＸ\\_test.go，並為 func 取名 Test ＸＸＸ(t \\*testing.T)\n\n```go\n//測試打GET /api/v1/user 去跑User() 會拿到“ＯＫ”\nfunc TestUser(t *testing.T) {\n\tengine := gin.New()\n\tinitRoutes(engine)//你的路由邏輯\n\turi := \"/api/v1/user\"\n\n\tbody := Get(uri, engine)\n\tfmt.Printf(\"response:%v\\n\", string(body))\n\tif !reflect.DeepEqual(string(body), \"\\\"OK\\\"\") {\n\t\t//利用 t.Errorf 觸發錯誤\n\t\tt.Errorf(\"Get user name need to be ok!\")\n\t}\n}\n//同理測試 Post 去跑PostName() 會拿到回復的名字等於打的內容（body）\nfunc TestPostName(t *testing.T) {\n\tengine := gin.New()\n\tinitRoutes(engine) \n\turi := \"/api/v1/user\"\n\tuser := structs.User{Name: \"user\", Age: 18}\n\tbody := PostUser(uri, user, engine)\n\tfmt.Printf(\"response:%v\\n\", string(body))\n\n\tresponse := &structs.User{}\n\tif err := json.Unmarshal(body, response); err != nil {\n\t\tt.Errorf(\"Unmarshal，err:%v\\n\", err)\n\t}\n\tif response.Name != \"user\" {\n\t\tt.Errorf(\"response different，user:%v\\n\", response.Name)\n\t}\n}\n\n// GET HTTP Request\nfunc Get(uri string, router *gin.Engine) []byte {\n\treq := httptest.NewRequest(\"GET\", uri, nil)\n\tw := httptest.NewRecorder()\n\n\trouter.ServeHTTP(w, req)\n\tresult := w.Result()\n\tdefer result.Body.Close()\n\tbody, _ := ioutil.ReadAll(result.Body)\n\treturn body\n}\n// POST HTTP Request\nfunc PostUser(uri string, param structs.User, router *gin.Engine) []byte {\n\tjsonByte, _ := json.Marshal(param)\n\treq := httptest.NewRequest(\"POST\", uri, bytes.NewReader(jsonByte))\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\tresult := w.Result()\n\tdefer result.Body.Close()\n\tbody, _ := ioutil.ReadAll(result.Body)\n\treturn body\n}\n\n\n```\n\n#### 測試單一個 function\n\n如果用 VS code，可以在上方看到 run test | debug test 按鈕可以按，十分方便\n\n#### 測試單一檔案內所有測試\n\ncover 有帶的話會算出覆蓋率，並要在該目錄下去執行，這邊跑出來結果大約有 57.1% 的覆蓋\n\n```bash\n$go test -v -cover=true user_test.go user.go\nPASS\ncoverage: 57.1% of statements\nok      command-line-arguments  0.297s  coverage: 57.1% of statements\n```\n\n#### 測試整個專案\n\n```bash\n如果是在main的目錄要往子目錄找\n＄go test -v ./…\n```\n\n----\n#### 產生測試覆蓋(coverage)報表-gotest\n\n\n```bash\ngo test -coverprofile=coverage.out ./...\n用gool tool\ngo tool cover -func=coverage.out\ngo tool cover -html=coverage.out\n```\n\n這個真的很酷，用網頁產生報告，而且非常視覺化，\n可以看出剛剛沒有寫到的 UserName()測試為紅色\n![](/images/post/test_coverage.png)\n\n---\n\n>note warning %} 20210702 補充 :\n其實後來發現vscode在跑完package test 後，右邊側欄就會跑出覆蓋的條線了\n如果只是要在測試時查看可以直接用ＩＤＥ的便利性即可．\n\n\n![vscode](/images/post/test_coverage_vscode.png)\n\n\n當然寫測試還有很多判斷的條件等等，是否等於，是否不等於，各種輸出可能．\n\n寫完之後，可以為下一次更動後確認邏輯，看跑過測試真的很有療癒的感覺！！！:grin:\n\n---\n\n覺得有疑問嗎？可以再進一步看看參考文章：  \n- [基于 golang gin 框架的单元测试](https://studygolang.com/articles/11836 \"基于golang gin框架的单元测试\")\n- [go test 提示 no test files](https://www.sunzhongwei.com/go-test-suggests-no-test-files \"go test 提示 no test files\")<br>\n- [Go: tests with HTML coverage report](https://medium.com/@kenanbek/go-tests-with-html-coverage-report-f977da09552d \"Go: tests with HTML coverage report\")<br>\n- [使用 Go 进行单元测试](https://juejin.im/post/5dc37eb8e51d452a066999bf \"使用 Go 进行单元测试\")<br>\n\n\n---\n\n\n\n","source":"_posts/05-go-test-coverage.md","raw":"---\ntitle: \"[Go 06] 寫測試並產出一目瞭然的網頁版覆蓋率報告 再也不用怕遺漏\"\ntags:\n  - test\n  - golang\n\t- vscode\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-05-09T00:02:42+08:00\n---\n\n# 本章介紹：\n\n- 為上一篇 Gin 框架的 User & PostName func.寫個簡單測試\n- 跑測試並瞭解 coverage 覆蓋率，產生測試報告(20210702 有新增vsocde用法補充)\n\n<!--more-->\n\n說明：新建一個檔案ＸＸ\\_test.go，並為 func 取名 Test ＸＸＸ(t \\*testing.T)\n\n```go\n//測試打GET /api/v1/user 去跑User() 會拿到“ＯＫ”\nfunc TestUser(t *testing.T) {\n\tengine := gin.New()\n\tinitRoutes(engine)//你的路由邏輯\n\turi := \"/api/v1/user\"\n\n\tbody := Get(uri, engine)\n\tfmt.Printf(\"response:%v\\n\", string(body))\n\tif !reflect.DeepEqual(string(body), \"\\\"OK\\\"\") {\n\t\t//利用 t.Errorf 觸發錯誤\n\t\tt.Errorf(\"Get user name need to be ok!\")\n\t}\n}\n//同理測試 Post 去跑PostName() 會拿到回復的名字等於打的內容（body）\nfunc TestPostName(t *testing.T) {\n\tengine := gin.New()\n\tinitRoutes(engine) \n\turi := \"/api/v1/user\"\n\tuser := structs.User{Name: \"user\", Age: 18}\n\tbody := PostUser(uri, user, engine)\n\tfmt.Printf(\"response:%v\\n\", string(body))\n\n\tresponse := &structs.User{}\n\tif err := json.Unmarshal(body, response); err != nil {\n\t\tt.Errorf(\"Unmarshal，err:%v\\n\", err)\n\t}\n\tif response.Name != \"user\" {\n\t\tt.Errorf(\"response different，user:%v\\n\", response.Name)\n\t}\n}\n\n// GET HTTP Request\nfunc Get(uri string, router *gin.Engine) []byte {\n\treq := httptest.NewRequest(\"GET\", uri, nil)\n\tw := httptest.NewRecorder()\n\n\trouter.ServeHTTP(w, req)\n\tresult := w.Result()\n\tdefer result.Body.Close()\n\tbody, _ := ioutil.ReadAll(result.Body)\n\treturn body\n}\n// POST HTTP Request\nfunc PostUser(uri string, param structs.User, router *gin.Engine) []byte {\n\tjsonByte, _ := json.Marshal(param)\n\treq := httptest.NewRequest(\"POST\", uri, bytes.NewReader(jsonByte))\n\tw := httptest.NewRecorder()\n\trouter.ServeHTTP(w, req)\n\tresult := w.Result()\n\tdefer result.Body.Close()\n\tbody, _ := ioutil.ReadAll(result.Body)\n\treturn body\n}\n\n\n```\n\n#### 測試單一個 function\n\n如果用 VS code，可以在上方看到 run test | debug test 按鈕可以按，十分方便\n\n#### 測試單一檔案內所有測試\n\ncover 有帶的話會算出覆蓋率，並要在該目錄下去執行，這邊跑出來結果大約有 57.1% 的覆蓋\n\n```bash\n$go test -v -cover=true user_test.go user.go\nPASS\ncoverage: 57.1% of statements\nok      command-line-arguments  0.297s  coverage: 57.1% of statements\n```\n\n#### 測試整個專案\n\n```bash\n如果是在main的目錄要往子目錄找\n＄go test -v ./…\n```\n\n----\n#### 產生測試覆蓋(coverage)報表-gotest\n\n\n```bash\ngo test -coverprofile=coverage.out ./...\n用gool tool\ngo tool cover -func=coverage.out\ngo tool cover -html=coverage.out\n```\n\n這個真的很酷，用網頁產生報告，而且非常視覺化，\n可以看出剛剛沒有寫到的 UserName()測試為紅色\n![](/images/post/test_coverage.png)\n\n---\n\n>note warning %} 20210702 補充 :\n其實後來發現vscode在跑完package test 後，右邊側欄就會跑出覆蓋的條線了\n如果只是要在測試時查看可以直接用ＩＤＥ的便利性即可．\n\n\n![vscode](/images/post/test_coverage_vscode.png)\n\n\n當然寫測試還有很多判斷的條件等等，是否等於，是否不等於，各種輸出可能．\n\n寫完之後，可以為下一次更動後確認邏輯，看跑過測試真的很有療癒的感覺！！！:grin:\n\n---\n\n覺得有疑問嗎？可以再進一步看看參考文章：  \n- [基于 golang gin 框架的单元测试](https://studygolang.com/articles/11836 \"基于golang gin框架的单元测试\")\n- [go test 提示 no test files](https://www.sunzhongwei.com/go-test-suggests-no-test-files \"go test 提示 no test files\")<br>\n- [Go: tests with HTML coverage report](https://medium.com/@kenanbek/go-tests-with-html-coverage-report-f977da09552d \"Go: tests with HTML coverage report\")<br>\n- [使用 Go 进行单元测试](https://juejin.im/post/5dc37eb8e51d452a066999bf \"使用 Go 进行单元测试\")<br>\n\n\n---\n\n\n\n","slug":"05-go-test-coverage","published":1,"updated":"2023-01-22T07:05:18.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhac000hkp2xgmxd3cn0","content":"<h1 id=\"本章介紹：\"><a href=\"#本章介紹：\" class=\"headerlink\" title=\"本章介紹：\"></a>本章介紹：</h1><ul>\n<li>為上一篇 Gin 框架的 User &amp; PostName func.寫個簡單測試</li>\n<li>跑測試並瞭解 coverage 覆蓋率，產生測試報告(20210702 有新增vsocde用法補充)</li>\n</ul>\n<a id=\"more\"></a>\n\n<p>說明：新建一個檔案ＸＸ_test.go，並為 func 取名 Test ＸＸＸ(t *testing.T)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//測試打GET /api/v1/user 去跑User() 會拿到“ＯＫ”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestUser</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine)<span class=\"comment\">//你的路由邏輯</span></span><br><span class=\"line\">\turi := <span class=\"string\">&quot;/api/v1/user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbody := Get(uri, engine)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;response:%v\\n&quot;</span>, <span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !reflect.DeepEqual(<span class=\"keyword\">string</span>(body), <span class=\"string\">&quot;\\&quot;OK\\&quot;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用 t.Errorf 觸發錯誤</span></span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;Get user name need to be ok!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//同理測試 Post 去跑PostName() 會拿到回復的名字等於打的內容（body）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestPostName</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine) </span><br><span class=\"line\">\turi := <span class=\"string\">&quot;/api/v1/user&quot;</span></span><br><span class=\"line\">\tuser := structs.User&#123;Name: <span class=\"string\">&quot;user&quot;</span>, Age: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">\tbody := PostUser(uri, user, engine)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;response:%v\\n&quot;</span>, <span class=\"keyword\">string</span>(body))</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse := &amp;structs.User&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, response); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;Unmarshal，err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> response.Name != <span class=\"string\">&quot;user&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;response different，user:%v\\n&quot;</span>, response.Name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET HTTP Request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Get</span><span class=\"params\">(uri <span class=\"keyword\">string</span>, router *gin.Engine)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\treq := httptest.NewRequest(<span class=\"string\">&quot;GET&quot;</span>, uri, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tw := httptest.NewRecorder()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.ServeHTTP(w, req)</span><br><span class=\"line\">\tresult := w.Result()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> result.Body.Close()</span><br><span class=\"line\">\tbody, _ := ioutil.ReadAll(result.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// POST HTTP Request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PostUser</span><span class=\"params\">(uri <span class=\"keyword\">string</span>, param structs.User, router *gin.Engine)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tjsonByte, _ := json.Marshal(param)</span><br><span class=\"line\">\treq := httptest.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, uri, bytes.NewReader(jsonByte))</span><br><span class=\"line\">\tw := httptest.NewRecorder()</span><br><span class=\"line\">\trouter.ServeHTTP(w, req)</span><br><span class=\"line\">\tresult := w.Result()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> result.Body.Close()</span><br><span class=\"line\">\tbody, _ := ioutil.ReadAll(result.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"測試單一個-function\"><a href=\"#測試單一個-function\" class=\"headerlink\" title=\"測試單一個 function\"></a>測試單一個 function</h4><p>如果用 VS code，可以在上方看到 run test | debug test 按鈕可以按，十分方便</p>\n<h4 id=\"測試單一檔案內所有測試\"><a href=\"#測試單一檔案內所有測試\" class=\"headerlink\" title=\"測試單一檔案內所有測試\"></a>測試單一檔案內所有測試</h4><p>cover 有帶的話會算出覆蓋率，並要在該目錄下去執行，這邊跑出來結果大約有 57.1% 的覆蓋</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> <span class=\"built_in\">test</span> -v -cover=<span class=\"literal\">true</span> user_test.go user.go</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 57.1% of statements</span><br><span class=\"line\">ok      command-line-arguments  0.297s  coverage: 57.1% of statements</span><br></pre></td></tr></table></figure>\n<h4 id=\"測試整個專案\"><a href=\"#測試整個專案\" class=\"headerlink\" title=\"測試整個專案\"></a>測試整個專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果是在main的目錄要往子目錄找</span><br><span class=\"line\">＄go <span class=\"built_in\">test</span> -v ./…</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"產生測試覆蓋-coverage-報表-gotest\"><a href=\"#產生測試覆蓋-coverage-報表-gotest\" class=\"headerlink\" title=\"產生測試覆蓋(coverage)報表-gotest\"></a>產生測試覆蓋(coverage)報表-gotest</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -coverprofile=coverage.out ./...</span><br><span class=\"line\">用gool tool</span><br><span class=\"line\">go tool cover -func=coverage.out</span><br><span class=\"line\">go tool cover -html=coverage.out</span><br></pre></td></tr></table></figure>\n<p>這個真的很酷，用網頁產生報告，而且非常視覺化，<br>可以看出剛剛沒有寫到的 UserName()測試為紅色<br><img src=\"/images/post/test_coverage.png\"></p>\n<hr>\n<blockquote>\n<p>note warning %} 20210702 補充 :<br>其實後來發現vscode在跑完package test 後，右邊側欄就會跑出覆蓋的條線了<br>如果只是要在測試時查看可以直接用ＩＤＥ的便利性即可．</p>\n</blockquote>\n<p><img src=\"/images/post/test_coverage_vscode.png\" alt=\"vscode\"></p>\n<p>當然寫測試還有很多判斷的條件等等，是否等於，是否不等於，各種輸出可能．</p>\n<p>寫完之後，可以為下一次更動後確認邏輯，看跑過測試真的很有療癒的感覺！！！:grin:</p>\n<hr>\n<p>覺得有疑問嗎？可以再進一步看看參考文章：  </p>\n<ul>\n<li><a href=\"https://studygolang.com/articles/11836\" title=\"基于golang gin框架的单元测试\">基于 golang gin 框架的单元测试</a></li>\n<li><a href=\"https://www.sunzhongwei.com/go-test-suggests-no-test-files\" title=\"go test 提示 no test files\">go test 提示 no test files</a><br></li>\n<li><a href=\"https://medium.com/@kenanbek/go-tests-with-html-coverage-report-f977da09552d\" title=\"Go: tests with HTML coverage report\">Go: tests with HTML coverage report</a><br></li>\n<li><a href=\"https://juejin.im/post/5dc37eb8e51d452a066999bf\" title=\"使用 Go 进行单元测试\">使用 Go 进行单元测试</a><br></li>\n</ul>\n<hr>\n","site":{"data":{}},"excerpt":"<h1 id=\"本章介紹：\"><a href=\"#本章介紹：\" class=\"headerlink\" title=\"本章介紹：\"></a>本章介紹：</h1><ul>\n<li>為上一篇 Gin 框架的 User &amp; PostName func.寫個簡單測試</li>\n<li>跑測試並瞭解 coverage 覆蓋率，產生測試報告(20210702 有新增vsocde用法補充)</li>\n</ul>","more":"<p>說明：新建一個檔案ＸＸ_test.go，並為 func 取名 Test ＸＸＸ(t *testing.T)</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//測試打GET /api/v1/user 去跑User() 會拿到“ＯＫ”</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestUser</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine)<span class=\"comment\">//你的路由邏輯</span></span><br><span class=\"line\">\turi := <span class=\"string\">&quot;/api/v1/user&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tbody := Get(uri, engine)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;response:%v\\n&quot;</span>, <span class=\"keyword\">string</span>(body))</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> !reflect.DeepEqual(<span class=\"keyword\">string</span>(body), <span class=\"string\">&quot;\\&quot;OK\\&quot;&quot;</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//利用 t.Errorf 觸發錯誤</span></span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;Get user name need to be ok!&quot;</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//同理測試 Post 去跑PostName() 會拿到回復的名字等於打的內容（body）</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TestPostName</span><span class=\"params\">(t *testing.T)</span></span> &#123;</span><br><span class=\"line\">\tengine := gin.New()</span><br><span class=\"line\">\tinitRoutes(engine) </span><br><span class=\"line\">\turi := <span class=\"string\">&quot;/api/v1/user&quot;</span></span><br><span class=\"line\">\tuser := structs.User&#123;Name: <span class=\"string\">&quot;user&quot;</span>, Age: <span class=\"number\">18</span>&#125;</span><br><span class=\"line\">\tbody := PostUser(uri, user, engine)</span><br><span class=\"line\">\tfmt.Printf(<span class=\"string\">&quot;response:%v\\n&quot;</span>, <span class=\"keyword\">string</span>(body))</span><br><span class=\"line\"></span><br><span class=\"line\">\tresponse := &amp;structs.User&#123;&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err := json.Unmarshal(body, response); err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;Unmarshal，err:%v\\n&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> response.Name != <span class=\"string\">&quot;user&quot;</span> &#123;</span><br><span class=\"line\">\t\tt.Errorf(<span class=\"string\">&quot;response different，user:%v\\n&quot;</span>, response.Name)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// GET HTTP Request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">Get</span><span class=\"params\">(uri <span class=\"keyword\">string</span>, router *gin.Engine)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\treq := httptest.NewRequest(<span class=\"string\">&quot;GET&quot;</span>, uri, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\tw := httptest.NewRecorder()</span><br><span class=\"line\"></span><br><span class=\"line\">\trouter.ServeHTTP(w, req)</span><br><span class=\"line\">\tresult := w.Result()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> result.Body.Close()</span><br><span class=\"line\">\tbody, _ := ioutil.ReadAll(result.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// POST HTTP Request</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">PostUser</span><span class=\"params\">(uri <span class=\"keyword\">string</span>, param structs.User, router *gin.Engine)</span> []<span class=\"title\">byte</span></span> &#123;</span><br><span class=\"line\">\tjsonByte, _ := json.Marshal(param)</span><br><span class=\"line\">\treq := httptest.NewRequest(<span class=\"string\">&quot;POST&quot;</span>, uri, bytes.NewReader(jsonByte))</span><br><span class=\"line\">\tw := httptest.NewRecorder()</span><br><span class=\"line\">\trouter.ServeHTTP(w, req)</span><br><span class=\"line\">\tresult := w.Result()</span><br><span class=\"line\">\t<span class=\"keyword\">defer</span> result.Body.Close()</span><br><span class=\"line\">\tbody, _ := ioutil.ReadAll(result.Body)</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> body</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"測試單一個-function\"><a href=\"#測試單一個-function\" class=\"headerlink\" title=\"測試單一個 function\"></a>測試單一個 function</h4><p>如果用 VS code，可以在上方看到 run test | debug test 按鈕可以按，十分方便</p>\n<h4 id=\"測試單一檔案內所有測試\"><a href=\"#測試單一檔案內所有測試\" class=\"headerlink\" title=\"測試單一檔案內所有測試\"></a>測試單一檔案內所有測試</h4><p>cover 有帶的話會算出覆蓋率，並要在該目錄下去執行，這邊跑出來結果大約有 57.1% 的覆蓋</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$go</span> <span class=\"built_in\">test</span> -v -cover=<span class=\"literal\">true</span> user_test.go user.go</span><br><span class=\"line\">PASS</span><br><span class=\"line\">coverage: 57.1% of statements</span><br><span class=\"line\">ok      command-line-arguments  0.297s  coverage: 57.1% of statements</span><br></pre></td></tr></table></figure>\n<h4 id=\"測試整個專案\"><a href=\"#測試整個專案\" class=\"headerlink\" title=\"測試整個專案\"></a>測試整個專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果是在main的目錄要往子目錄找</span><br><span class=\"line\">＄go <span class=\"built_in\">test</span> -v ./…</span><br></pre></td></tr></table></figure>\n<hr>\n<h4 id=\"產生測試覆蓋-coverage-報表-gotest\"><a href=\"#產生測試覆蓋-coverage-報表-gotest\" class=\"headerlink\" title=\"產生測試覆蓋(coverage)報表-gotest\"></a>產生測試覆蓋(coverage)報表-gotest</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go <span class=\"built_in\">test</span> -coverprofile=coverage.out ./...</span><br><span class=\"line\">用gool tool</span><br><span class=\"line\">go tool cover -func=coverage.out</span><br><span class=\"line\">go tool cover -html=coverage.out</span><br></pre></td></tr></table></figure>\n<p>這個真的很酷，用網頁產生報告，而且非常視覺化，<br>可以看出剛剛沒有寫到的 UserName()測試為紅色<br><img src=\"/images/post/test_coverage.png\"></p>\n<hr>\n<blockquote>\n<p>note warning %} 20210702 補充 :<br>其實後來發現vscode在跑完package test 後，右邊側欄就會跑出覆蓋的條線了<br>如果只是要在測試時查看可以直接用ＩＤＥ的便利性即可．</p>\n</blockquote>\n<p><img src=\"/images/post/test_coverage_vscode.png\" alt=\"vscode\"></p>\n<p>當然寫測試還有很多判斷的條件等等，是否等於，是否不等於，各種輸出可能．</p>\n<p>寫完之後，可以為下一次更動後確認邏輯，看跑過測試真的很有療癒的感覺！！！:grin:</p>\n<hr>\n<p>覺得有疑問嗎？可以再進一步看看參考文章：  </p>\n<ul>\n<li><a href=\"https://studygolang.com/articles/11836\" title=\"基于golang gin框架的单元测试\">基于 golang gin 框架的单元测试</a></li>\n<li><a href=\"https://www.sunzhongwei.com/go-test-suggests-no-test-files\" title=\"go test 提示 no test files\">go test 提示 no test files</a><br></li>\n<li><a href=\"https://medium.com/@kenanbek/go-tests-with-html-coverage-report-f977da09552d\" title=\"Go: tests with HTML coverage report\">Go: tests with HTML coverage report</a><br></li>\n<li><a href=\"https://juejin.im/post/5dc37eb8e51d452a066999bf\" title=\"使用 Go 进行单元测试\">使用 Go 进行单元测试</a><br></li>\n</ul>\n<hr>"},{"title":"[Go 07] 使用 zap 框架印出 log","date":"2020-05-18T07:51:23.000Z","_content":"\n本章內容：\n\n- 實作使用高性能 zap log 框架\n- 擁有 log level 配置 (常用 debug/warn/info/error)與程式碼位置\n- 可以選擇印出在 console 或是文件（要外掛 lumberjack 去分割）\n- zap 有 suger 函式可以增加易用性，但犧牲效能\n\n<!--more-->\n\n> 雖然目前還未有高性能之需求，網路上也有很多不同的ＬＯＧ框架可以選擇，有興趣可以看這篇[在 Github 中 stars 数最多的 Go 日志库集合](https://my.oschina.net/u/168737/blog/1536117 \"在Github中stars数最多的Go日志库集合\")，看了各框架說明介紹，這個框架實作上看來蠻容易的，今天就還試試看．\n\n直接上實作完之程式碼\n\n```go\npackage logger\n\nimport (\n\t\"mywork/demo/internal/config\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n\nvar ZapLogger *zap.Logger\nvar SugarLogger *zap.SugaredLogger\n\nfunc InitLogger() {\n\n\tlogWriter := []zapcore.WriteSyncer{zapcore.AddSync(os.Stdout)}\n\n\tif config.Configuration.Logger.File != \"\" {\n\t\thook := setFileWriter(config.Configuration.Logger.File)\n\t\tlogWriter = append(logWriter, hook)\n\t}\n\tencoderConfig := setEncoder()\n\n\tlevel := getLogLevel(config.Configuration.Logger.Level)\n\n\tcore := zapcore.NewCore(encoderConfig,\n\t\tzapcore.NewMultiWriteSyncer(logWriter...),\n\t\tlevel)\n\n\tZapLogger = zap.New(core, zap.AddCaller()) //印出log的位置\n\t// ZapLogger.Debug(\"POK\")                     // ZapLogger sample\n\tZapLogger.Info(\"ZapLogger\",\n\t\tzap.String(\"String\", \"ohoh\"),\n\t\tzap.Int(\"Int\", 3),\n\t\tzap.Duration(\"backoff\", time.Second),\n\t)\n\tSugarLogger = ZapLogger.Sugar()\n\t//SugarLogger.Infof(\"Success! statusCode = %s for URL %s\", \"OK\", \"OK\")  // SugarLogger sample\n\n}\n\nfunc setEncoder() zapcore.Encoder {\n\tencoderConfig := zap.NewProductionEncoderConfig()\n\tencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n\tencoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n\treturn zapcore.NewConsoleEncoder(encoderConfig)\n}\n\nfunc setFileWriter(filePath string) zapcore.WriteSyncer {\n\tlumberJackLogger := &lumberjack.Logger{\n\t\tFilename:   filePath,\n\t\tMaxSize:    1,\n\t\tMaxBackups: 5,\n\t\tMaxAge:     30,\n\t\tCompress:   false,\n\t}\n\treturn zapcore.AddSync(lumberJackLogger)\n}\n\nfunc getLogLevel(lv string) zapcore.Level {\n\tlv = strings.ToLower(lv)\n\tif level, ok := levelMap[lv]; ok {\n\t\treturn level\n\t}\n\treturn zapcore.InfoLevel\n}\n\nvar levelMap = map[string]zapcore.Level{\n\t\"debug\":  zapcore.DebugLevel,\n\t\"info\":   zapcore.InfoLevel,\n\t\"warn\":   zapcore.WarnLevel,\n\t\"error\":  zapcore.ErrorLevel,\n}\n\n\n\n```\n\nLOG 輸出範例\n\n- zap.Logger 輸出需針對 Type 去輸入，使用跟印出看起來都比較麻煩一點\n- zap.SugaredLogger 就像是語法糖\n\n```\n2021-01-31T11:46:00.954+0800    INFO    log/log.go:27   ZapLogger       {\"String\": \"ohoh\", \"Int\": 3, \"backoff\": 1}\n2021-01-31T11:46:01.012+0800    INFO    http_server/httpserver.go:35    Listening on port: 56888\n```\n","source":"_posts/06-go-zap-log.md","raw":"---\ntitle: \"[Go 07] 使用 zap 框架印出 log\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-05-18T23:51:23+08:00\n---\n\n本章內容：\n\n- 實作使用高性能 zap log 框架\n- 擁有 log level 配置 (常用 debug/warn/info/error)與程式碼位置\n- 可以選擇印出在 console 或是文件（要外掛 lumberjack 去分割）\n- zap 有 suger 函式可以增加易用性，但犧牲效能\n\n<!--more-->\n\n> 雖然目前還未有高性能之需求，網路上也有很多不同的ＬＯＧ框架可以選擇，有興趣可以看這篇[在 Github 中 stars 数最多的 Go 日志库集合](https://my.oschina.net/u/168737/blog/1536117 \"在Github中stars数最多的Go日志库集合\")，看了各框架說明介紹，這個框架實作上看來蠻容易的，今天就還試試看．\n\n直接上實作完之程式碼\n\n```go\npackage logger\n\nimport (\n\t\"mywork/demo/internal/config\"\n\t\"os\"\n\t\"strings\"\n\t\"time\"\n\t\"go.uber.org/zap\"\n\t\"go.uber.org/zap/zapcore\"\n\t\"gopkg.in/natefinch/lumberjack.v2\"\n)\n\n\nvar ZapLogger *zap.Logger\nvar SugarLogger *zap.SugaredLogger\n\nfunc InitLogger() {\n\n\tlogWriter := []zapcore.WriteSyncer{zapcore.AddSync(os.Stdout)}\n\n\tif config.Configuration.Logger.File != \"\" {\n\t\thook := setFileWriter(config.Configuration.Logger.File)\n\t\tlogWriter = append(logWriter, hook)\n\t}\n\tencoderConfig := setEncoder()\n\n\tlevel := getLogLevel(config.Configuration.Logger.Level)\n\n\tcore := zapcore.NewCore(encoderConfig,\n\t\tzapcore.NewMultiWriteSyncer(logWriter...),\n\t\tlevel)\n\n\tZapLogger = zap.New(core, zap.AddCaller()) //印出log的位置\n\t// ZapLogger.Debug(\"POK\")                     // ZapLogger sample\n\tZapLogger.Info(\"ZapLogger\",\n\t\tzap.String(\"String\", \"ohoh\"),\n\t\tzap.Int(\"Int\", 3),\n\t\tzap.Duration(\"backoff\", time.Second),\n\t)\n\tSugarLogger = ZapLogger.Sugar()\n\t//SugarLogger.Infof(\"Success! statusCode = %s for URL %s\", \"OK\", \"OK\")  // SugarLogger sample\n\n}\n\nfunc setEncoder() zapcore.Encoder {\n\tencoderConfig := zap.NewProductionEncoderConfig()\n\tencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder\n\tencoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder\n\treturn zapcore.NewConsoleEncoder(encoderConfig)\n}\n\nfunc setFileWriter(filePath string) zapcore.WriteSyncer {\n\tlumberJackLogger := &lumberjack.Logger{\n\t\tFilename:   filePath,\n\t\tMaxSize:    1,\n\t\tMaxBackups: 5,\n\t\tMaxAge:     30,\n\t\tCompress:   false,\n\t}\n\treturn zapcore.AddSync(lumberJackLogger)\n}\n\nfunc getLogLevel(lv string) zapcore.Level {\n\tlv = strings.ToLower(lv)\n\tif level, ok := levelMap[lv]; ok {\n\t\treturn level\n\t}\n\treturn zapcore.InfoLevel\n}\n\nvar levelMap = map[string]zapcore.Level{\n\t\"debug\":  zapcore.DebugLevel,\n\t\"info\":   zapcore.InfoLevel,\n\t\"warn\":   zapcore.WarnLevel,\n\t\"error\":  zapcore.ErrorLevel,\n}\n\n\n\n```\n\nLOG 輸出範例\n\n- zap.Logger 輸出需針對 Type 去輸入，使用跟印出看起來都比較麻煩一點\n- zap.SugaredLogger 就像是語法糖\n\n```\n2021-01-31T11:46:00.954+0800    INFO    log/log.go:27   ZapLogger       {\"String\": \"ohoh\", \"Int\": 3, \"backoff\": 1}\n2021-01-31T11:46:01.012+0800    INFO    http_server/httpserver.go:35    Listening on port: 56888\n```\n","slug":"06-go-zap-log","published":1,"updated":"2022-10-11T03:09:13.234Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhad000jkp2x6huyeok5","content":"<p>本章內容：</p>\n<ul>\n<li>實作使用高性能 zap log 框架</li>\n<li>擁有 log level 配置 (常用 debug/warn/info/error)與程式碼位置</li>\n<li>可以選擇印出在 console 或是文件（要外掛 lumberjack 去分割）</li>\n<li>zap 有 suger 函式可以增加易用性，但犧牲效能</li>\n</ul>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>雖然目前還未有高性能之需求，網路上也有很多不同的ＬＯＧ框架可以選擇，有興趣可以看這篇<a href=\"https://my.oschina.net/u/168737/blog/1536117\" title=\"在Github中stars数最多的Go日志库集合\">在 Github 中 stars 数最多的 Go 日志库集合</a>，看了各框架說明介紹，這個框架實作上看來蠻容易的，今天就還試試看．</p>\n</blockquote>\n<p>直接上實作完之程式碼</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> logger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;mywork/demo/internal/config&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gopkg.in/natefinch/lumberjack.v2&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ZapLogger *zap.Logger</span><br><span class=\"line\"><span class=\"keyword\">var</span> SugarLogger *zap.SugaredLogger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitLogger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlogWriter := []zapcore.WriteSyncer&#123;zapcore.AddSync(os.Stdout)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> config.Configuration.Logger.File != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\thook := setFileWriter(config.Configuration.Logger.File)</span><br><span class=\"line\">\t\tlogWriter = <span class=\"built_in\">append</span>(logWriter, hook)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tencoderConfig := setEncoder()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlevel := getLogLevel(config.Configuration.Logger.Level)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcore := zapcore.NewCore(encoderConfig,</span><br><span class=\"line\">\t\tzapcore.NewMultiWriteSyncer(logWriter...),</span><br><span class=\"line\">\t\tlevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tZapLogger = zap.New(core, zap.AddCaller()) <span class=\"comment\">//印出log的位置</span></span><br><span class=\"line\">\t<span class=\"comment\">// ZapLogger.Debug(&quot;POK&quot;)                     // ZapLogger sample</span></span><br><span class=\"line\">\tZapLogger.Info(<span class=\"string\">&quot;ZapLogger&quot;</span>,</span><br><span class=\"line\">\t\tzap.String(<span class=\"string\">&quot;String&quot;</span>, <span class=\"string\">&quot;ohoh&quot;</span>),</span><br><span class=\"line\">\t\tzap.Int(<span class=\"string\">&quot;Int&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">\t\tzap.Duration(<span class=\"string\">&quot;backoff&quot;</span>, time.Second),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tSugarLogger = ZapLogger.Sugar()</span><br><span class=\"line\">\t<span class=\"comment\">//SugarLogger.Infof(&quot;Success! statusCode = %s for URL %s&quot;, &quot;OK&quot;, &quot;OK&quot;)  // SugarLogger sample</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setEncoder</span><span class=\"params\">()</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Encoder</span></span> &#123;</span><br><span class=\"line\">\tencoderConfig := zap.NewProductionEncoderConfig()</span><br><span class=\"line\">\tencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class=\"line\">\tencoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setFileWriter</span><span class=\"params\">(filePath <span class=\"keyword\">string</span>)</span> <span class=\"title\">zapcore</span>.<span class=\"title\">WriteSyncer</span></span> &#123;</span><br><span class=\"line\">\tlumberJackLogger := &amp;lumberjack.Logger&#123;</span><br><span class=\"line\">\t\tFilename:   filePath,</span><br><span class=\"line\">\t\tMaxSize:    <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tMaxBackups: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\tMaxAge:     <span class=\"number\">30</span>,</span><br><span class=\"line\">\t\tCompress:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.AddSync(lumberJackLogger)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getLogLevel</span><span class=\"params\">(lv <span class=\"keyword\">string</span>)</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Level</span></span> &#123;</span><br><span class=\"line\">\tlv = strings.ToLower(lv)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> level, ok := levelMap[lv]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> level</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.InfoLevel</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelMap = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]zapcore.Level&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;debug&quot;</span>:  zapcore.DebugLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;info&quot;</span>:   zapcore.InfoLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;warn&quot;</span>:   zapcore.WarnLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;error&quot;</span>:  zapcore.ErrorLevel,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>LOG 輸出範例</p>\n<ul>\n<li>zap.Logger 輸出需針對 Type 去輸入，使用跟印出看起來都比較麻煩一點</li>\n<li>zap.SugaredLogger 就像是語法糖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021-01-31T11:46:00.954+0800    INFO    log&#x2F;log.go:27   ZapLogger       &#123;&quot;String&quot;: &quot;ohoh&quot;, &quot;Int&quot;: 3, &quot;backoff&quot;: 1&#125;</span><br><span class=\"line\">2021-01-31T11:46:01.012+0800    INFO    http_server&#x2F;httpserver.go:35    Listening on port: 56888</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"<p>本章內容：</p>\n<ul>\n<li>實作使用高性能 zap log 框架</li>\n<li>擁有 log level 配置 (常用 debug/warn/info/error)與程式碼位置</li>\n<li>可以選擇印出在 console 或是文件（要外掛 lumberjack 去分割）</li>\n<li>zap 有 suger 函式可以增加易用性，但犧牲效能</li>\n</ul>","more":"<blockquote>\n<p>雖然目前還未有高性能之需求，網路上也有很多不同的ＬＯＧ框架可以選擇，有興趣可以看這篇<a href=\"https://my.oschina.net/u/168737/blog/1536117\" title=\"在Github中stars数最多的Go日志库集合\">在 Github 中 stars 数最多的 Go 日志库集合</a>，看了各框架說明介紹，這個框架實作上看來蠻容易的，今天就還試試看．</p>\n</blockquote>\n<p>直接上實作完之程式碼</p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> logger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;mywork/demo/internal/config&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;os&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;strings&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;go.uber.org/zap/zapcore&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;gopkg.in/natefinch/lumberjack.v2&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> ZapLogger *zap.Logger</span><br><span class=\"line\"><span class=\"keyword\">var</span> SugarLogger *zap.SugaredLogger</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">InitLogger</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlogWriter := []zapcore.WriteSyncer&#123;zapcore.AddSync(os.Stdout)&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"keyword\">if</span> config.Configuration.Logger.File != <span class=\"string\">&quot;&quot;</span> &#123;</span><br><span class=\"line\">\t\thook := setFileWriter(config.Configuration.Logger.File)</span><br><span class=\"line\">\t\tlogWriter = <span class=\"built_in\">append</span>(logWriter, hook)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tencoderConfig := setEncoder()</span><br><span class=\"line\"></span><br><span class=\"line\">\tlevel := getLogLevel(config.Configuration.Logger.Level)</span><br><span class=\"line\"></span><br><span class=\"line\">\tcore := zapcore.NewCore(encoderConfig,</span><br><span class=\"line\">\t\tzapcore.NewMultiWriteSyncer(logWriter...),</span><br><span class=\"line\">\t\tlevel)</span><br><span class=\"line\"></span><br><span class=\"line\">\tZapLogger = zap.New(core, zap.AddCaller()) <span class=\"comment\">//印出log的位置</span></span><br><span class=\"line\">\t<span class=\"comment\">// ZapLogger.Debug(&quot;POK&quot;)                     // ZapLogger sample</span></span><br><span class=\"line\">\tZapLogger.Info(<span class=\"string\">&quot;ZapLogger&quot;</span>,</span><br><span class=\"line\">\t\tzap.String(<span class=\"string\">&quot;String&quot;</span>, <span class=\"string\">&quot;ohoh&quot;</span>),</span><br><span class=\"line\">\t\tzap.Int(<span class=\"string\">&quot;Int&quot;</span>, <span class=\"number\">3</span>),</span><br><span class=\"line\">\t\tzap.Duration(<span class=\"string\">&quot;backoff&quot;</span>, time.Second),</span><br><span class=\"line\">\t)</span><br><span class=\"line\">\tSugarLogger = ZapLogger.Sugar()</span><br><span class=\"line\">\t<span class=\"comment\">//SugarLogger.Infof(&quot;Success! statusCode = %s for URL %s&quot;, &quot;OK&quot;, &quot;OK&quot;)  // SugarLogger sample</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setEncoder</span><span class=\"params\">()</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Encoder</span></span> &#123;</span><br><span class=\"line\">\tencoderConfig := zap.NewProductionEncoderConfig()</span><br><span class=\"line\">\tencoderConfig.EncodeTime = zapcore.ISO8601TimeEncoder</span><br><span class=\"line\">\tencoderConfig.EncodeLevel = zapcore.CapitalLevelEncoder</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.NewConsoleEncoder(encoderConfig)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">setFileWriter</span><span class=\"params\">(filePath <span class=\"keyword\">string</span>)</span> <span class=\"title\">zapcore</span>.<span class=\"title\">WriteSyncer</span></span> &#123;</span><br><span class=\"line\">\tlumberJackLogger := &amp;lumberjack.Logger&#123;</span><br><span class=\"line\">\t\tFilename:   filePath,</span><br><span class=\"line\">\t\tMaxSize:    <span class=\"number\">1</span>,</span><br><span class=\"line\">\t\tMaxBackups: <span class=\"number\">5</span>,</span><br><span class=\"line\">\t\tMaxAge:     <span class=\"number\">30</span>,</span><br><span class=\"line\">\t\tCompress:   <span class=\"literal\">false</span>,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.AddSync(lumberJackLogger)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">getLogLevel</span><span class=\"params\">(lv <span class=\"keyword\">string</span>)</span> <span class=\"title\">zapcore</span>.<span class=\"title\">Level</span></span> &#123;</span><br><span class=\"line\">\tlv = strings.ToLower(lv)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> level, ok := levelMap[lv]; ok &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> level</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> zapcore.InfoLevel</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> levelMap = <span class=\"keyword\">map</span>[<span class=\"keyword\">string</span>]zapcore.Level&#123;</span><br><span class=\"line\">\t<span class=\"string\">&quot;debug&quot;</span>:  zapcore.DebugLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;info&quot;</span>:   zapcore.InfoLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;warn&quot;</span>:   zapcore.WarnLevel,</span><br><span class=\"line\">\t<span class=\"string\">&quot;error&quot;</span>:  zapcore.ErrorLevel,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>LOG 輸出範例</p>\n<ul>\n<li>zap.Logger 輸出需針對 Type 去輸入，使用跟印出看起來都比較麻煩一點</li>\n<li>zap.SugaredLogger 就像是語法糖</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021-01-31T11:46:00.954+0800    INFO    log&#x2F;log.go:27   ZapLogger       &#123;&quot;String&quot;: &quot;ohoh&quot;, &quot;Int&quot;: 3, &quot;backoff&quot;: 1&#125;</span><br><span class=\"line\">2021-01-31T11:46:01.012+0800    INFO    http_server&#x2F;httpserver.go:35    Listening on port: 56888</span><br></pre></td></tr></table></figure>"},{"title":"[Go 08] 認識時間格式與golang的時區轉換寫法","date":"2021-05-30T02:22:20.000Z","_content":"\n\n>\n開發過程中，曾遇過部署到別的平台，時間就變成+0時區了（例如明明下午五點，部署平台顯示早上九點），這時才發現原來你的時間不是他的時間，而資料庫中也常常用時間戳數字來做紀錄，但顯示給使用者時又要轉成格式化顯示，本篇紀錄各種時間格式的理解與go程式對於時間的使用\n<!--more-->\n\n\n\n## 理解時間的各種顯示格式\n時間可以以很多格式化的方式做顯示。例如最常看到的2021-04-22 17:27:44\n### 標準時間格式\n國際標準格式，像是 [ISO_8601](https://zh.wikipedia.org/wiki/ISO_8601)\n- 合併表示時，要在時間前面加一大寫字母T\n- 如果時間在零時區，並恰好與協調世界時相同，那麼（不加空格）在時間最後加一個大寫字母Z\n例如以下這樣的顯示方式:\n```\n2021-04-28T01:51:35Z\n2004-05-03T17:30:08+08:00  //+08:00代表比世界協調時間快8小時的時區\n```\n\n\n### UNIX時間與時間戳\nUNIX時間代表從UTC1970年1月1日0時0分0秒起至現在的總秒數\n* 而UTC為世界協調時間（英語：Coordinated Universal Time，法語：Temps Universel Coordonné，簡稱UTC）是最主要的世界時間標準。\n- 這種你會看到可能是十位數的數字(s:1621999487)或是十三位數的數字(ms:1621999487377)，可以透過[線上時間戳轉換器](https://tool.lu/timestamp/)得出代表的時間。\n\n\n### 時區的轉換\n世界各國位於地球不同位置上，，不同地區的人會有不同的地方時間，可以看[時區轉換器](https://tw.piliapp.com/time-now/converter/)\n\n----\n## golang 時間轉換\n接著說明使用golang實現以上幾種常見的轉換，而2006-01-02 15:04:05-0700是一串go獨特神奇的對應順序。可以看[time/format.go](https://go.dev/src/time/format.go)\n\n大致列出四種轉換:\n1. 將時間戳轉換為時間\n2. 將時間做格式化輸出，golang語法的時間輸出跟java比較不一樣。2006-01-02 15:04:05-0700 對應到\tyyyy-MM-dd HH:mm:ss Z，請見[golang 與java time的對照表](https://programming.guide/go/format-parse-string-time-date-example.html)， `記憶順序有點像是06代表年，後面則是1,2,3,4,5,7`\n3. 時區轉換: FixedZone(name,位移的秒數)，可以自訂時區命名信息，loc := time.FixedZone(\"UTC-8\", -8 * 60 * 60)第二個參數轉移多少秒，可以改+8時區等等\n\n4. 時區轉換: LoadLocation(name)，可以輸入空值，\"UTC\"，\"Local\"，或是時區的資料庫 EX: \"Asia/Taipei\"，命名使用的資料庫為[IANA Time Zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)，好處是不用自己輸入到底是＋8還加多久，知道時區命名就好，但是背後的定義還是會依下列順序去找尋對應資料：\n\t- ZONEINFO 環境變數所指定的zip文件\n\t- Unix系统中已经安装的\n\t- $GOROOT/lib/time/zoneinfo.zip，\n\n>note warning %} \n因此如果在windows系统上，没有安装go語言環境，time.LoadLocation會失敗，建議用time.FixedZone。\n \n另外在docker環境裡也要注意使用的image是否已經有包含這些資料，否則會出現unknown time zone XXXX的錯誤，解決方法需要加入以下設定\n```\nFROM alpine\n...\nCOPY --from=0 /usr/local/go/lib/time/zoneinfo.zip /opt/zoneinfo.zip\nENV ZONEINFO /opt/zoneinfo.zip\nOR\nRUN apk --no-cache add tzdata\n...\n```\n\n---\n\n四種轉換時間格式範例程式:\n```go diff\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar Time int64\n\tTime = 1619083664867 //ms->2021-04-22 17:27:44\n\n\tt := time.Unix(0, Time*int64(time.Millisecond))\n\tfmt.Println(\"case1: timestamp to time:\", t)\n\t\n\t\n\tlayout1 := \"2006-01-02T15:04:05\"\n\tfmt.Println(\"case2: Formatlayout1:\", t.Format(layout1))\n\t\n\tzone := time.FixedZone(\"\", +0*60*60)\n\tnewTimezone0 := t.In(zone)\n\tfmt.Println(\"case3: Timezone at +0:\", newTimezone0.Format(layout1))\n\n\t// name := \"America/New_York\"\n\tname := \"Asia/Taipei\"\n\tt, err := TimeIn(t, name)\n\tif err != nil {\n\t\tfmt.Println(\"err:\", err)\n\t}\n\tfmt.Println(\"case4: Timezone at Taipei:\", t.Format(layout1))\n\n}\nfunc TimeIn(t time.Time, name string) (time.Time, error) {\n\tloc, err := time.LoadLocation(name)\n\tif err == nil {\n\t\tt = t.In(loc)\n\t}\n\treturn t, err\n}\n```\n\n轉換結果：\n```\ntimestamp: 1619083664867\ncase1: timestamp to time: 2021-04-22 09:27:44.867 +0000 UTC\ncase2: Formatlayout1: 2021-04-22T09:27:44\ncase3: Timezone at +0: 2021-04-22T09:27:44\ncase4: Timezone at Taipei: 2021-04-22T17:27:44\n```\n\n\n----\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [数据库存时间戳的好处](https://blog.csdn.net/qq_34908844/article/details/78817420)\n- [time-unix examples](https://www.geeksforgeeks.org/time-unix-function-in-golang-with-examples/)\n- [1milli->1000000 nano sec](https://www.translatorscafe.com/unit-converter/zh-CN/time/2-4/millisecond-nanosecond/)\n- [Golang 時區 golang-timezone](https://jasonlee.xyz/golang-timezone/)\n- [到底是 GMT+8 還是 UTC+8 ?](https://pansci.asia/archives/84978)\n- [golang-TimeIn example](https://yourbasic.org/golang/time-change-convert-location-timezone/)\n- [Golang神奇的2006-01-02 15:04:05](https://www.jianshu.com/p/c7f7fbb16932)\n- [Go语言标准包解析Location](https://syaning.github.io/go-pkgs/time/#location)\n- [Golang时区设置](https://studygolang.com/articles/13018)\n- [解决容器运行 Go 代码 unknown time zone 的正确姿势](https://liqiang.io/post/unknonw-time-zone-solution-with-running-go-in-docker-6d0edc5d)\n\n\n\n","source":"_posts/07-go-time.md","raw":"---\ntitle: \"[Go 08] 認識時間格式與golang的時區轉換寫法\"\ntags:\n  - golang\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2021-05-30 10:22:20\n---\n\n\n>\n開發過程中，曾遇過部署到別的平台，時間就變成+0時區了（例如明明下午五點，部署平台顯示早上九點），這時才發現原來你的時間不是他的時間，而資料庫中也常常用時間戳數字來做紀錄，但顯示給使用者時又要轉成格式化顯示，本篇紀錄各種時間格式的理解與go程式對於時間的使用\n<!--more-->\n\n\n\n## 理解時間的各種顯示格式\n時間可以以很多格式化的方式做顯示。例如最常看到的2021-04-22 17:27:44\n### 標準時間格式\n國際標準格式，像是 [ISO_8601](https://zh.wikipedia.org/wiki/ISO_8601)\n- 合併表示時，要在時間前面加一大寫字母T\n- 如果時間在零時區，並恰好與協調世界時相同，那麼（不加空格）在時間最後加一個大寫字母Z\n例如以下這樣的顯示方式:\n```\n2021-04-28T01:51:35Z\n2004-05-03T17:30:08+08:00  //+08:00代表比世界協調時間快8小時的時區\n```\n\n\n### UNIX時間與時間戳\nUNIX時間代表從UTC1970年1月1日0時0分0秒起至現在的總秒數\n* 而UTC為世界協調時間（英語：Coordinated Universal Time，法語：Temps Universel Coordonné，簡稱UTC）是最主要的世界時間標準。\n- 這種你會看到可能是十位數的數字(s:1621999487)或是十三位數的數字(ms:1621999487377)，可以透過[線上時間戳轉換器](https://tool.lu/timestamp/)得出代表的時間。\n\n\n### 時區的轉換\n世界各國位於地球不同位置上，，不同地區的人會有不同的地方時間，可以看[時區轉換器](https://tw.piliapp.com/time-now/converter/)\n\n----\n## golang 時間轉換\n接著說明使用golang實現以上幾種常見的轉換，而2006-01-02 15:04:05-0700是一串go獨特神奇的對應順序。可以看[time/format.go](https://go.dev/src/time/format.go)\n\n大致列出四種轉換:\n1. 將時間戳轉換為時間\n2. 將時間做格式化輸出，golang語法的時間輸出跟java比較不一樣。2006-01-02 15:04:05-0700 對應到\tyyyy-MM-dd HH:mm:ss Z，請見[golang 與java time的對照表](https://programming.guide/go/format-parse-string-time-date-example.html)， `記憶順序有點像是06代表年，後面則是1,2,3,4,5,7`\n3. 時區轉換: FixedZone(name,位移的秒數)，可以自訂時區命名信息，loc := time.FixedZone(\"UTC-8\", -8 * 60 * 60)第二個參數轉移多少秒，可以改+8時區等等\n\n4. 時區轉換: LoadLocation(name)，可以輸入空值，\"UTC\"，\"Local\"，或是時區的資料庫 EX: \"Asia/Taipei\"，命名使用的資料庫為[IANA Time Zone database](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones)，好處是不用自己輸入到底是＋8還加多久，知道時區命名就好，但是背後的定義還是會依下列順序去找尋對應資料：\n\t- ZONEINFO 環境變數所指定的zip文件\n\t- Unix系统中已经安装的\n\t- $GOROOT/lib/time/zoneinfo.zip，\n\n>note warning %} \n因此如果在windows系统上，没有安装go語言環境，time.LoadLocation會失敗，建議用time.FixedZone。\n \n另外在docker環境裡也要注意使用的image是否已經有包含這些資料，否則會出現unknown time zone XXXX的錯誤，解決方法需要加入以下設定\n```\nFROM alpine\n...\nCOPY --from=0 /usr/local/go/lib/time/zoneinfo.zip /opt/zoneinfo.zip\nENV ZONEINFO /opt/zoneinfo.zip\nOR\nRUN apk --no-cache add tzdata\n...\n```\n\n---\n\n四種轉換時間格式範例程式:\n```go diff\npackage main\n\nimport (\n\t\"fmt\"\n\t\"time\"\n)\n\nfunc main() {\n\tvar Time int64\n\tTime = 1619083664867 //ms->2021-04-22 17:27:44\n\n\tt := time.Unix(0, Time*int64(time.Millisecond))\n\tfmt.Println(\"case1: timestamp to time:\", t)\n\t\n\t\n\tlayout1 := \"2006-01-02T15:04:05\"\n\tfmt.Println(\"case2: Formatlayout1:\", t.Format(layout1))\n\t\n\tzone := time.FixedZone(\"\", +0*60*60)\n\tnewTimezone0 := t.In(zone)\n\tfmt.Println(\"case3: Timezone at +0:\", newTimezone0.Format(layout1))\n\n\t// name := \"America/New_York\"\n\tname := \"Asia/Taipei\"\n\tt, err := TimeIn(t, name)\n\tif err != nil {\n\t\tfmt.Println(\"err:\", err)\n\t}\n\tfmt.Println(\"case4: Timezone at Taipei:\", t.Format(layout1))\n\n}\nfunc TimeIn(t time.Time, name string) (time.Time, error) {\n\tloc, err := time.LoadLocation(name)\n\tif err == nil {\n\t\tt = t.In(loc)\n\t}\n\treturn t, err\n}\n```\n\n轉換結果：\n```\ntimestamp: 1619083664867\ncase1: timestamp to time: 2021-04-22 09:27:44.867 +0000 UTC\ncase2: Formatlayout1: 2021-04-22T09:27:44\ncase3: Timezone at +0: 2021-04-22T09:27:44\ncase4: Timezone at Taipei: 2021-04-22T17:27:44\n```\n\n\n----\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [数据库存时间戳的好处](https://blog.csdn.net/qq_34908844/article/details/78817420)\n- [time-unix examples](https://www.geeksforgeeks.org/time-unix-function-in-golang-with-examples/)\n- [1milli->1000000 nano sec](https://www.translatorscafe.com/unit-converter/zh-CN/time/2-4/millisecond-nanosecond/)\n- [Golang 時區 golang-timezone](https://jasonlee.xyz/golang-timezone/)\n- [到底是 GMT+8 還是 UTC+8 ?](https://pansci.asia/archives/84978)\n- [golang-TimeIn example](https://yourbasic.org/golang/time-change-convert-location-timezone/)\n- [Golang神奇的2006-01-02 15:04:05](https://www.jianshu.com/p/c7f7fbb16932)\n- [Go语言标准包解析Location](https://syaning.github.io/go-pkgs/time/#location)\n- [Golang时区设置](https://studygolang.com/articles/13018)\n- [解决容器运行 Go 代码 unknown time zone 的正确姿势](https://liqiang.io/post/unknonw-time-zone-solution-with-running-go-in-docker-6d0edc5d)\n\n\n\n","slug":"07-go-time","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhaf000mkp2xd5277gvf","content":"<blockquote>\n</blockquote>\n<p>開發過程中，曾遇過部署到別的平台，時間就變成+0時區了（例如明明下午五點，部署平台顯示早上九點），這時才發現原來你的時間不是他的時間，而資料庫中也常常用時間戳數字來做紀錄，但顯示給使用者時又要轉成格式化顯示，本篇紀錄各種時間格式的理解與go程式對於時間的使用</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"理解時間的各種顯示格式\"><a href=\"#理解時間的各種顯示格式\" class=\"headerlink\" title=\"理解時間的各種顯示格式\"></a>理解時間的各種顯示格式</h2><p>時間可以以很多格式化的方式做顯示。例如最常看到的2021-04-22 17:27:44</p>\n<h3 id=\"標準時間格式\"><a href=\"#標準時間格式\" class=\"headerlink\" title=\"標準時間格式\"></a>標準時間格式</h3><p>國際標準格式，像是 <a href=\"https://zh.wikipedia.org/wiki/ISO_8601\">ISO_8601</a></p>\n<ul>\n<li>合併表示時，要在時間前面加一大寫字母T</li>\n<li>如果時間在零時區，並恰好與協調世界時相同，那麼（不加空格）在時間最後加一個大寫字母Z<br>例如以下這樣的顯示方式:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021-04-28T01:51:35Z</span><br><span class=\"line\">2004-05-03T17:30:08+08:00  &#x2F;&#x2F;+08:00代表比世界協調時間快8小時的時區</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"UNIX時間與時間戳\"><a href=\"#UNIX時間與時間戳\" class=\"headerlink\" title=\"UNIX時間與時間戳\"></a>UNIX時間與時間戳</h3><p>UNIX時間代表從UTC1970年1月1日0時0分0秒起至現在的總秒數</p>\n<ul>\n<li>而UTC為世界協調時間（英語：Coordinated Universal Time，法語：Temps Universel Coordonné，簡稱UTC）是最主要的世界時間標準。</li>\n</ul>\n<ul>\n<li>這種你會看到可能是十位數的數字(s:1621999487)或是十三位數的數字(ms:1621999487377)，可以透過<a href=\"https://tool.lu/timestamp/\">線上時間戳轉換器</a>得出代表的時間。</li>\n</ul>\n<h3 id=\"時區的轉換\"><a href=\"#時區的轉換\" class=\"headerlink\" title=\"時區的轉換\"></a>時區的轉換</h3><p>世界各國位於地球不同位置上，，不同地區的人會有不同的地方時間，可以看<a href=\"https://tw.piliapp.com/time-now/converter/\">時區轉換器</a></p>\n<hr>\n<h2 id=\"golang-時間轉換\"><a href=\"#golang-時間轉換\" class=\"headerlink\" title=\"golang 時間轉換\"></a>golang 時間轉換</h2><p>接著說明使用golang實現以上幾種常見的轉換，而2006-01-02 15:04:05-0700是一串go獨特神奇的對應順序。可以看<a href=\"https://go.dev/src/time/format.go\">time/format.go</a></p>\n<p>大致列出四種轉換:</p>\n<ol>\n<li><p>將時間戳轉換為時間</p>\n</li>\n<li><p>將時間做格式化輸出，golang語法的時間輸出跟java比較不一樣。2006-01-02 15:04:05-0700 對應到    yyyy-MM-dd HH:mm:ss Z，請見<a href=\"https://programming.guide/go/format-parse-string-time-date-example.html\">golang 與java time的對照表</a>， <code>記憶順序有點像是06代表年，後面則是1,2,3,4,5,7</code></p>\n</li>\n<li><p>時區轉換: FixedZone(name,位移的秒數)，可以自訂時區命名信息，loc := time.FixedZone(“UTC-8”, -8 * 60 * 60)第二個參數轉移多少秒，可以改+8時區等等</p>\n</li>\n<li><p>時區轉換: LoadLocation(name)，可以輸入空值，”UTC”，”Local”，或是時區的資料庫 EX: “Asia/Taipei”，命名使用的資料庫為<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA Time Zone database</a>，好處是不用自己輸入到底是＋8還加多久，知道時區命名就好，但是背後的定義還是會依下列順序去找尋對應資料：</p>\n<ul>\n<li>ZONEINFO 環境變數所指定的zip文件</li>\n<li>Unix系统中已经安装的</li>\n<li>$GOROOT/lib/time/zoneinfo.zip，</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>note warning %}<br>因此如果在windows系统上，没有安装go語言環境，time.LoadLocation會失敗，建議用time.FixedZone。</p>\n</blockquote>\n<p>另外在docker環境裡也要注意使用的image是否已經有包含這些資料，否則會出現unknown time zone XXXX的錯誤，解決方法需要加入以下設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM alpine</span><br><span class=\"line\">...</span><br><span class=\"line\">COPY --from&#x3D;0 &#x2F;usr&#x2F;local&#x2F;go&#x2F;lib&#x2F;time&#x2F;zoneinfo.zip &#x2F;opt&#x2F;zoneinfo.zip</span><br><span class=\"line\">ENV ZONEINFO &#x2F;opt&#x2F;zoneinfo.zip</span><br><span class=\"line\">OR</span><br><span class=\"line\">RUN apk --no-cache add tzdata</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>四種轉換時間格式範例程式:</p>\n<figure class=\"highlight go\"><figcaption><span>diff</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Time <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tTime = <span class=\"number\">1619083664867</span> <span class=\"comment\">//ms-&gt;2021-04-22 17:27:44</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tt := time.Unix(<span class=\"number\">0</span>, Time*<span class=\"keyword\">int64</span>(time.Millisecond))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case1: timestamp to time:&quot;</span>, t)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlayout1 := <span class=\"string\">&quot;2006-01-02T15:04:05&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case2: Formatlayout1:&quot;</span>, t.Format(layout1))</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tzone := time.FixedZone(<span class=\"string\">&quot;&quot;</span>, +<span class=\"number\">0</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span><br><span class=\"line\">\tnewTimezone0 := t.In(zone)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case3: Timezone at +0:&quot;</span>, newTimezone0.Format(layout1))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// name := &quot;America/New_York&quot;</span></span><br><span class=\"line\">\tname := <span class=\"string\">&quot;Asia/Taipei&quot;</span></span><br><span class=\"line\">\tt, err := TimeIn(t, name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err:&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case4: Timezone at Taipei:&quot;</span>, t.Format(layout1))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TimeIn</span><span class=\"params\">(t time.Time, name <span class=\"keyword\">string</span>)</span> <span class=\"params\">(time.Time, error)</span></span> &#123;</span><br><span class=\"line\">\tloc, err := time.LoadLocation(name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tt = t.In(loc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轉換結果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp: 1619083664867</span><br><span class=\"line\">case1: timestamp to time: 2021-04-22 09:27:44.867 +0000 UTC</span><br><span class=\"line\">case2: Formatlayout1: 2021-04-22T09:27:44</span><br><span class=\"line\">case3: Timezone at +0: 2021-04-22T09:27:44</span><br><span class=\"line\">case4: Timezone at Taipei: 2021-04-22T17:27:44</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_34908844/article/details/78817420\">数据库存时间戳的好处</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/time-unix-function-in-golang-with-examples/\">time-unix examples</a></li>\n<li><a href=\"https://www.translatorscafe.com/unit-converter/zh-CN/time/2-4/millisecond-nanosecond/\">1milli-&gt;1000000 nano sec</a></li>\n<li><a href=\"https://jasonlee.xyz/golang-timezone/\">Golang 時區 golang-timezone</a></li>\n<li><a href=\"https://pansci.asia/archives/84978\">到底是 GMT+8 還是 UTC+8 ?</a></li>\n<li><a href=\"https://yourbasic.org/golang/time-change-convert-location-timezone/\">golang-TimeIn example</a></li>\n<li><a href=\"https://www.jianshu.com/p/c7f7fbb16932\">Golang神奇的2006-01-02 15:04:05</a></li>\n<li><a href=\"https://syaning.github.io/go-pkgs/time/#location\">Go语言标准包解析Location</a></li>\n<li><a href=\"https://studygolang.com/articles/13018\">Golang时区设置</a></li>\n<li><a href=\"https://liqiang.io/post/unknonw-time-zone-solution-with-running-go-in-docker-6d0edc5d\">解决容器运行 Go 代码 unknown time zone 的正确姿势</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n</blockquote>\n<p>開發過程中，曾遇過部署到別的平台，時間就變成+0時區了（例如明明下午五點，部署平台顯示早上九點），這時才發現原來你的時間不是他的時間，而資料庫中也常常用時間戳數字來做紀錄，但顯示給使用者時又要轉成格式化顯示，本篇紀錄各種時間格式的理解與go程式對於時間的使用</p>","more":"<h2 id=\"理解時間的各種顯示格式\"><a href=\"#理解時間的各種顯示格式\" class=\"headerlink\" title=\"理解時間的各種顯示格式\"></a>理解時間的各種顯示格式</h2><p>時間可以以很多格式化的方式做顯示。例如最常看到的2021-04-22 17:27:44</p>\n<h3 id=\"標準時間格式\"><a href=\"#標準時間格式\" class=\"headerlink\" title=\"標準時間格式\"></a>標準時間格式</h3><p>國際標準格式，像是 <a href=\"https://zh.wikipedia.org/wiki/ISO_8601\">ISO_8601</a></p>\n<ul>\n<li>合併表示時，要在時間前面加一大寫字母T</li>\n<li>如果時間在零時區，並恰好與協調世界時相同，那麼（不加空格）在時間最後加一個大寫字母Z<br>例如以下這樣的顯示方式:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2021-04-28T01:51:35Z</span><br><span class=\"line\">2004-05-03T17:30:08+08:00  &#x2F;&#x2F;+08:00代表比世界協調時間快8小時的時區</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"UNIX時間與時間戳\"><a href=\"#UNIX時間與時間戳\" class=\"headerlink\" title=\"UNIX時間與時間戳\"></a>UNIX時間與時間戳</h3><p>UNIX時間代表從UTC1970年1月1日0時0分0秒起至現在的總秒數</p>\n<ul>\n<li>而UTC為世界協調時間（英語：Coordinated Universal Time，法語：Temps Universel Coordonné，簡稱UTC）是最主要的世界時間標準。</li>\n</ul>\n<ul>\n<li>這種你會看到可能是十位數的數字(s:1621999487)或是十三位數的數字(ms:1621999487377)，可以透過<a href=\"https://tool.lu/timestamp/\">線上時間戳轉換器</a>得出代表的時間。</li>\n</ul>\n<h3 id=\"時區的轉換\"><a href=\"#時區的轉換\" class=\"headerlink\" title=\"時區的轉換\"></a>時區的轉換</h3><p>世界各國位於地球不同位置上，，不同地區的人會有不同的地方時間，可以看<a href=\"https://tw.piliapp.com/time-now/converter/\">時區轉換器</a></p>\n<hr>\n<h2 id=\"golang-時間轉換\"><a href=\"#golang-時間轉換\" class=\"headerlink\" title=\"golang 時間轉換\"></a>golang 時間轉換</h2><p>接著說明使用golang實現以上幾種常見的轉換，而2006-01-02 15:04:05-0700是一串go獨特神奇的對應順序。可以看<a href=\"https://go.dev/src/time/format.go\">time/format.go</a></p>\n<p>大致列出四種轉換:</p>\n<ol>\n<li><p>將時間戳轉換為時間</p>\n</li>\n<li><p>將時間做格式化輸出，golang語法的時間輸出跟java比較不一樣。2006-01-02 15:04:05-0700 對應到    yyyy-MM-dd HH:mm:ss Z，請見<a href=\"https://programming.guide/go/format-parse-string-time-date-example.html\">golang 與java time的對照表</a>， <code>記憶順序有點像是06代表年，後面則是1,2,3,4,5,7</code></p>\n</li>\n<li><p>時區轉換: FixedZone(name,位移的秒數)，可以自訂時區命名信息，loc := time.FixedZone(“UTC-8”, -8 * 60 * 60)第二個參數轉移多少秒，可以改+8時區等等</p>\n</li>\n<li><p>時區轉換: LoadLocation(name)，可以輸入空值，”UTC”，”Local”，或是時區的資料庫 EX: “Asia/Taipei”，命名使用的資料庫為<a href=\"https://en.wikipedia.org/wiki/List_of_tz_database_time_zones\">IANA Time Zone database</a>，好處是不用自己輸入到底是＋8還加多久，知道時區命名就好，但是背後的定義還是會依下列順序去找尋對應資料：</p>\n<ul>\n<li>ZONEINFO 環境變數所指定的zip文件</li>\n<li>Unix系统中已经安装的</li>\n<li>$GOROOT/lib/time/zoneinfo.zip，</li>\n</ul>\n</li>\n</ol>\n<blockquote>\n<p>note warning %}<br>因此如果在windows系统上，没有安装go語言環境，time.LoadLocation會失敗，建議用time.FixedZone。</p>\n</blockquote>\n<p>另外在docker環境裡也要注意使用的image是否已經有包含這些資料，否則會出現unknown time zone XXXX的錯誤，解決方法需要加入以下設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM alpine</span><br><span class=\"line\">...</span><br><span class=\"line\">COPY --from&#x3D;0 &#x2F;usr&#x2F;local&#x2F;go&#x2F;lib&#x2F;time&#x2F;zoneinfo.zip &#x2F;opt&#x2F;zoneinfo.zip</span><br><span class=\"line\">ENV ZONEINFO &#x2F;opt&#x2F;zoneinfo.zip</span><br><span class=\"line\">OR</span><br><span class=\"line\">RUN apk --no-cache add tzdata</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<hr>\n<p>四種轉換時間格式範例程式:</p>\n<figure class=\"highlight go\"><figcaption><span>diff</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;fmt&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;time&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> Time <span class=\"keyword\">int64</span></span><br><span class=\"line\">\tTime = <span class=\"number\">1619083664867</span> <span class=\"comment\">//ms-&gt;2021-04-22 17:27:44</span></span><br><span class=\"line\"></span><br><span class=\"line\">\tt := time.Unix(<span class=\"number\">0</span>, Time*<span class=\"keyword\">int64</span>(time.Millisecond))</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case1: timestamp to time:&quot;</span>, t)</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tlayout1 := <span class=\"string\">&quot;2006-01-02T15:04:05&quot;</span></span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case2: Formatlayout1:&quot;</span>, t.Format(layout1))</span><br><span class=\"line\">\t</span><br><span class=\"line\">\tzone := time.FixedZone(<span class=\"string\">&quot;&quot;</span>, +<span class=\"number\">0</span>*<span class=\"number\">60</span>*<span class=\"number\">60</span>)</span><br><span class=\"line\">\tnewTimezone0 := t.In(zone)</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case3: Timezone at +0:&quot;</span>, newTimezone0.Format(layout1))</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// name := &quot;America/New_York&quot;</span></span><br><span class=\"line\">\tname := <span class=\"string\">&quot;Asia/Taipei&quot;</span></span><br><span class=\"line\">\tt, err := TimeIn(t, name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tfmt.Println(<span class=\"string\">&quot;err:&quot;</span>, err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tfmt.Println(<span class=\"string\">&quot;case4: Timezone at Taipei:&quot;</span>, t.Format(layout1))</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">TimeIn</span><span class=\"params\">(t time.Time, name <span class=\"keyword\">string</span>)</span> <span class=\"params\">(time.Time, error)</span></span> &#123;</span><br><span class=\"line\">\tloc, err := time.LoadLocation(name)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err == <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tt = t.In(loc)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> t, err</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>轉換結果：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">timestamp: 1619083664867</span><br><span class=\"line\">case1: timestamp to time: 2021-04-22 09:27:44.867 +0000 UTC</span><br><span class=\"line\">case2: Formatlayout1: 2021-04-22T09:27:44</span><br><span class=\"line\">case3: Timezone at +0: 2021-04-22T09:27:44</span><br><span class=\"line\">case4: Timezone at Taipei: 2021-04-22T17:27:44</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://blog.csdn.net/qq_34908844/article/details/78817420\">数据库存时间戳的好处</a></li>\n<li><a href=\"https://www.geeksforgeeks.org/time-unix-function-in-golang-with-examples/\">time-unix examples</a></li>\n<li><a href=\"https://www.translatorscafe.com/unit-converter/zh-CN/time/2-4/millisecond-nanosecond/\">1milli-&gt;1000000 nano sec</a></li>\n<li><a href=\"https://jasonlee.xyz/golang-timezone/\">Golang 時區 golang-timezone</a></li>\n<li><a href=\"https://pansci.asia/archives/84978\">到底是 GMT+8 還是 UTC+8 ?</a></li>\n<li><a href=\"https://yourbasic.org/golang/time-change-convert-location-timezone/\">golang-TimeIn example</a></li>\n<li><a href=\"https://www.jianshu.com/p/c7f7fbb16932\">Golang神奇的2006-01-02 15:04:05</a></li>\n<li><a href=\"https://syaning.github.io/go-pkgs/time/#location\">Go语言标准包解析Location</a></li>\n<li><a href=\"https://studygolang.com/articles/13018\">Golang时区设置</a></li>\n<li><a href=\"https://liqiang.io/post/unknonw-time-zone-solution-with-running-go-in-docker-6d0edc5d\">解决容器运行 Go 代码 unknown time zone 的正确姿势</a></li>\n</ul>"},{"title":"[Go] 性能/品質檢測","date":"2020-09-18T07:03:37.000Z","_content":"\n <blockquote class=\"blockquote-center\">\n 當開發golang程式完成後，其實有一些工具可以查看自己的程式效能，是否有些地方佔了太大的資訊進而改進，另外也可以\n 透過品質檢測工具去看修改建議；最後，如果有撰寫測試案例的話，也有工具可以產生測試報告，確認測試案例涵蓋了程式多少百分比，還有沒被寫到的地方也可以透過報告顯示出來．</blockquote>\n\n\n本章介紹:\n- 性能分析工具-pprof 查看CPU/memory 等的瓶頸\n- 檢視go的品質與建議-gosec\n\n\n<!--more-->\n\n\n## 性能分析工具-pprof\n\n先在程式碼插入以下程式後執行。<br>\n```go\nimport _ \"net/http/pprof\"\nfunc main() {\n\tgo func() {\n\t\thttp.ListenAndServe(\"0.0.0.0:8080\", nil)\n\t}()\n}\n```\n開啟http://localhost:8080/debug/pprof/\n可以看到一個簡單的分析數字\n\n### go tool 看記憶體(heap)\n透過以下指令可以看到佔記憶體的前幾名\n```\n$go tool pprof  http://127.0.0.1:8080/debug/pprof/heap<br>\n\n-> 輸入top<br>\n-> 輸入web可以看到圖形<br>\n\n(pprof) top<br>\n\nShowing nodes accounting for 1.50MB, 100% of 1.50MB total\n      flat  flat%   sum%        cum   cum%<br>\n    1.50MB   100%   100%     1.50MB   100%  golang.org/x/net/webdav.(*memFile).Write<br>\n         0     0%   100%     1.50MB   100%  github.com/swaggo/files.init.8<br>\n```\n\n### go tool 看CPU(profile)\n而以下幾令則是幾秒內的ＣＰＵ計算\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=60<br>\n```\n\n### 網頁版查看 圖表\n以上兩種指令其實可以透過以下指令可以開啟一個網頁更容易看到資料的圖表呈現\n```\ngo tool pprof -http=\":9099\" -seconds=30 http://localhost:8080/debug/pprof/profile\ngo tool pprof -http=\":9099\"  http://localhost:8088/debug/pprof/heap\ngo tool pprof -http=\":9099\"  http://localhost:8088/debug/pprof/goroutine\n\n```\n\n參考文章:<br>\n- [golang pprof](https://lrita.github.io/2017/05/26/golang-memory-pprof/ \"golang pprof\")<br>\n- [使用多年的go pprof检查内存泄漏的方法居然是错的?!](https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/ \"使用多年的go pprof检查内存泄漏的方法居然是错的?!\")<br>\n\n\n-------------------------------\n\n## 檢視go的品質與建議\n1.先下載 go set<br>\ngo get github.com/securego/gosec/cmd/gosec@v2.2.0\n<br>\n\n2.輸出報告(可選格式)<br>\n```\ngosec -fmt=json -out=results.json ./...<br>\ngosec -fmt=html -out=results.html ./...<br> \n注意是*三個點\n```\n- 然後打開ＨＴＭＬ檔案就可以看到程式品質分析報告了\n<img src=\"/images/post/gosec.png\" width=\"500px\" />\n\n- 像是以上這條處理檔案位置時，path應該清理處理過以避免輸入異常\n\n\n\n\n\n\n\n\n\n>note class_name %}  ## 延伸文章 \n\n|  來源 |  摘要 |\n| ------------ | ------------ |\n|[新手问题 golang内存检测工具](https://gocn.vip/topics/250 \"新手问题 golang内存检测工具\")   | 生产环境中使用 pprof 时会遇到一些问题  |\n|  [go pprof与线上事故：一次成功的定位与失败的复现](https://www.jianshu.com/p/21b53f061a0a \"go pprof与线上事故：一次成功的定位与失败的复现\") |  很多小伙伴担心线上使用pprof会影响性能，担心安全问题。这个在我看来利大于弊，当服务出现问题的时候，资源占用多一点点与能够解决问题相比微不足道，当服务没有问题的时候使用pprof那更没有问题了~ |\n| [Golang 語言的單元測試和性能測試(也叫 壓力測試)](https://www.itdaan.com/tw/c8c0ed4d4e43c2a0d6a2917232d6499b \"Golang 語言的單元測試和性能測試(也叫 壓力測試)\")  |  （高級測試技術） |\n|  https://etcnotes.com/posts/pprof/ | 生成圖   |","source":"_posts/13-go-pprof-gosec.md","raw":"---\ntitle: \"[Go] 性能/品質檢測\"\ntags:\n  - test\n  - golang\n  - cleanCode\ncategories:\n  - Tech.\n  - back-end\n  - golang\ndate: 2020-09-18 15:03:37\n---\n\n <blockquote class=\"blockquote-center\">\n 當開發golang程式完成後，其實有一些工具可以查看自己的程式效能，是否有些地方佔了太大的資訊進而改進，另外也可以\n 透過品質檢測工具去看修改建議；最後，如果有撰寫測試案例的話，也有工具可以產生測試報告，確認測試案例涵蓋了程式多少百分比，還有沒被寫到的地方也可以透過報告顯示出來．</blockquote>\n\n\n本章介紹:\n- 性能分析工具-pprof 查看CPU/memory 等的瓶頸\n- 檢視go的品質與建議-gosec\n\n\n<!--more-->\n\n\n## 性能分析工具-pprof\n\n先在程式碼插入以下程式後執行。<br>\n```go\nimport _ \"net/http/pprof\"\nfunc main() {\n\tgo func() {\n\t\thttp.ListenAndServe(\"0.0.0.0:8080\", nil)\n\t}()\n}\n```\n開啟http://localhost:8080/debug/pprof/\n可以看到一個簡單的分析數字\n\n### go tool 看記憶體(heap)\n透過以下指令可以看到佔記憶體的前幾名\n```\n$go tool pprof  http://127.0.0.1:8080/debug/pprof/heap<br>\n\n-> 輸入top<br>\n-> 輸入web可以看到圖形<br>\n\n(pprof) top<br>\n\nShowing nodes accounting for 1.50MB, 100% of 1.50MB total\n      flat  flat%   sum%        cum   cum%<br>\n    1.50MB   100%   100%     1.50MB   100%  golang.org/x/net/webdav.(*memFile).Write<br>\n         0     0%   100%     1.50MB   100%  github.com/swaggo/files.init.8<br>\n```\n\n### go tool 看CPU(profile)\n而以下幾令則是幾秒內的ＣＰＵ計算\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile?seconds=60<br>\n```\n\n### 網頁版查看 圖表\n以上兩種指令其實可以透過以下指令可以開啟一個網頁更容易看到資料的圖表呈現\n```\ngo tool pprof -http=\":9099\" -seconds=30 http://localhost:8080/debug/pprof/profile\ngo tool pprof -http=\":9099\"  http://localhost:8088/debug/pprof/heap\ngo tool pprof -http=\":9099\"  http://localhost:8088/debug/pprof/goroutine\n\n```\n\n參考文章:<br>\n- [golang pprof](https://lrita.github.io/2017/05/26/golang-memory-pprof/ \"golang pprof\")<br>\n- [使用多年的go pprof检查内存泄漏的方法居然是错的?!](https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/ \"使用多年的go pprof检查内存泄漏的方法居然是错的?!\")<br>\n\n\n-------------------------------\n\n## 檢視go的品質與建議\n1.先下載 go set<br>\ngo get github.com/securego/gosec/cmd/gosec@v2.2.0\n<br>\n\n2.輸出報告(可選格式)<br>\n```\ngosec -fmt=json -out=results.json ./...<br>\ngosec -fmt=html -out=results.html ./...<br> \n注意是*三個點\n```\n- 然後打開ＨＴＭＬ檔案就可以看到程式品質分析報告了\n<img src=\"/images/post/gosec.png\" width=\"500px\" />\n\n- 像是以上這條處理檔案位置時，path應該清理處理過以避免輸入異常\n\n\n\n\n\n\n\n\n\n>note class_name %}  ## 延伸文章 \n\n|  來源 |  摘要 |\n| ------------ | ------------ |\n|[新手问题 golang内存检测工具](https://gocn.vip/topics/250 \"新手问题 golang内存检测工具\")   | 生产环境中使用 pprof 时会遇到一些问题  |\n|  [go pprof与线上事故：一次成功的定位与失败的复现](https://www.jianshu.com/p/21b53f061a0a \"go pprof与线上事故：一次成功的定位与失败的复现\") |  很多小伙伴担心线上使用pprof会影响性能，担心安全问题。这个在我看来利大于弊，当服务出现问题的时候，资源占用多一点点与能够解决问题相比微不足道，当服务没有问题的时候使用pprof那更没有问题了~ |\n| [Golang 語言的單元測試和性能測試(也叫 壓力測試)](https://www.itdaan.com/tw/c8c0ed4d4e43c2a0d6a2917232d6499b \"Golang 語言的單元測試和性能測試(也叫 壓力測試)\")  |  （高級測試技術） |\n|  https://etcnotes.com/posts/pprof/ | 生成圖   |","slug":"13-go-pprof-gosec","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhag000okp2x745r57tp","content":" <blockquote class=\"blockquote-center\">\n 當開發golang程式完成後，其實有一些工具可以查看自己的程式效能，是否有些地方佔了太大的資訊進而改進，另外也可以\n 透過品質檢測工具去看修改建議；最後，如果有撰寫測試案例的話，也有工具可以產生測試報告，確認測試案例涵蓋了程式多少百分比，還有沒被寫到的地方也可以透過報告顯示出來．</blockquote>\n\n\n<p>本章介紹:</p>\n<ul>\n<li>性能分析工具-pprof 查看CPU/memory 等的瓶頸</li>\n<li>檢視go的品質與建議-gosec</li>\n</ul>\n<a id=\"more\"></a>\n\n\n<h2 id=\"性能分析工具-pprof\"><a href=\"#性能分析工具-pprof\" class=\"headerlink\" title=\"性能分析工具-pprof\"></a>性能分析工具-pprof</h2><p>先在程式碼插入以下程式後執行。<br></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;net/http/pprof&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\thttp.ListenAndServe(<span class=\"string\">&quot;0.0.0.0:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>開啟<a href=\"http://localhost:8080/debug/pprof/\">http://localhost:8080/debug/pprof/</a><br>可以看到一個簡單的分析數字</p>\n<h3 id=\"go-tool-看記憶體-heap\"><a href=\"#go-tool-看記憶體-heap\" class=\"headerlink\" title=\"go tool 看記憶體(heap)\"></a>go tool 看記憶體(heap)</h3><p>透過以下指令可以看到佔記憶體的前幾名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go tool pprof  http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;debug&#x2F;pprof&#x2F;heap&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 輸入top&lt;br&gt;</span><br><span class=\"line\">-&gt; 輸入web可以看到圖形&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(pprof) top&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Showing nodes accounting for 1.50MB, 100% of 1.50MB total</span><br><span class=\"line\">      flat  flat%   sum%        cum   cum%&lt;br&gt;</span><br><span class=\"line\">    1.50MB   100%   100%     1.50MB   100%  golang.org&#x2F;x&#x2F;net&#x2F;webdav.(*memFile).Write&lt;br&gt;</span><br><span class=\"line\">         0     0%   100%     1.50MB   100%  github.com&#x2F;swaggo&#x2F;files.init.8&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-tool-看CPU-profile\"><a href=\"#go-tool-看CPU-profile\" class=\"headerlink\" title=\"go tool 看CPU(profile)\"></a>go tool 看CPU(profile)</h3><p>而以下幾令則是幾秒內的ＣＰＵ計算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof http:&#x2F;&#x2F;localhost:6060&#x2F;debug&#x2F;pprof&#x2F;profile?seconds&#x3D;60&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"網頁版查看-圖表\"><a href=\"#網頁版查看-圖表\" class=\"headerlink\" title=\"網頁版查看 圖表\"></a>網頁版查看 圖表</h3><p>以上兩種指令其實可以透過以下指令可以開啟一個網頁更容易看到資料的圖表呈現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot; -seconds&#x3D;30 http:&#x2F;&#x2F;localhost:8080&#x2F;debug&#x2F;pprof&#x2F;profile</span><br><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot;  http:&#x2F;&#x2F;localhost:8088&#x2F;debug&#x2F;pprof&#x2F;heap</span><br><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot;  http:&#x2F;&#x2F;localhost:8088&#x2F;debug&#x2F;pprof&#x2F;goroutine</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>參考文章:<br></p>\n<ul>\n<li><a href=\"https://lrita.github.io/2017/05/26/golang-memory-pprof/\" title=\"golang pprof\">golang pprof</a><br></li>\n<li><a href=\"https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/\" title=\"使用多年的go pprof检查内存泄漏的方法居然是错的?!\">使用多年的go pprof检查内存泄漏的方法居然是错的?!</a><br></li>\n</ul>\n<hr>\n<h2 id=\"檢視go的品質與建議\"><a href=\"#檢視go的品質與建議\" class=\"headerlink\" title=\"檢視go的品質與建議\"></a>檢視go的品質與建議</h2><p>1.先下載 go set<br><br>go get github.com/securego/gosec/cmd/gosec@v2.2.0<br><br></p>\n<p>2.輸出報告(可選格式)<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gosec -fmt&#x3D;json -out&#x3D;results.json .&#x2F;...&lt;br&gt;</span><br><span class=\"line\">gosec -fmt&#x3D;html -out&#x3D;results.html .&#x2F;...&lt;br&gt; </span><br><span class=\"line\">注意是*三個點</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>然後打開ＨＴＭＬ檔案就可以看到程式品質分析報告了</p>\n<img src=\"/images/post/gosec.png\" width=\"500px\">\n</li>\n<li><p>像是以上這條處理檔案位置時，path應該清理處理過以避免輸入異常</p>\n</li>\n</ul>\n<blockquote>\n<p>note class_name %}  ## 延伸文章 </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>來源</th>\n<th>摘要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://gocn.vip/topics/250\" title=\"新手问题 golang内存检测工具\">新手问题 golang内存检测工具</a></td>\n<td>生产环境中使用 pprof 时会遇到一些问题</td>\n</tr>\n<tr>\n<td><a href=\"https://www.jianshu.com/p/21b53f061a0a\" title=\"go pprof与线上事故：一次成功的定位与失败的复现\">go pprof与线上事故：一次成功的定位与失败的复现</a></td>\n<td>很多小伙伴担心线上使用pprof会影响性能，担心安全问题。这个在我看来利大于弊，当服务出现问题的时候，资源占用多一点点与能够解决问题相比微不足道，当服务没有问题的时候使用pprof那更没有问题了~</td>\n</tr>\n<tr>\n<td><a href=\"https://www.itdaan.com/tw/c8c0ed4d4e43c2a0d6a2917232d6499b\" title=\"Golang 語言的單元測試和性能測試(也叫 壓力測試)\">Golang 語言的單元測試和性能測試(也叫 壓力測試)</a></td>\n<td>（高級測試技術）</td>\n</tr>\n<tr>\n<td><a href=\"https://etcnotes.com/posts/pprof/\">https://etcnotes.com/posts/pprof/</a></td>\n<td>生成圖</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\">\n 當開發golang程式完成後，其實有一些工具可以查看自己的程式效能，是否有些地方佔了太大的資訊進而改進，另外也可以\n 透過品質檢測工具去看修改建議；最後，如果有撰寫測試案例的話，也有工具可以產生測試報告，確認測試案例涵蓋了程式多少百分比，還有沒被寫到的地方也可以透過報告顯示出來．</blockquote>\n\n\n<p>本章介紹:</p>\n<ul>\n<li>性能分析工具-pprof 查看CPU/memory 等的瓶頸</li>\n<li>檢視go的品質與建議-gosec</li>\n</ul>","more":"<h2 id=\"性能分析工具-pprof\"><a href=\"#性能分析工具-pprof\" class=\"headerlink\" title=\"性能分析工具-pprof\"></a>性能分析工具-pprof</h2><p>先在程式碼插入以下程式後執行。<br></p>\n<figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> _ <span class=\"string\">&quot;net/http/pprof&quot;</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"keyword\">go</span> <span class=\"function\"><span class=\"keyword\">func</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t\thttp.ListenAndServe(<span class=\"string\">&quot;0.0.0.0:8080&quot;</span>, <span class=\"literal\">nil</span>)</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>開啟<a href=\"http://localhost:8080/debug/pprof/\">http://localhost:8080/debug/pprof/</a><br>可以看到一個簡單的分析數字</p>\n<h3 id=\"go-tool-看記憶體-heap\"><a href=\"#go-tool-看記憶體-heap\" class=\"headerlink\" title=\"go tool 看記憶體(heap)\"></a>go tool 看記憶體(heap)</h3><p>透過以下指令可以看到佔記憶體的前幾名</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$go tool pprof  http:&#x2F;&#x2F;127.0.0.1:8080&#x2F;debug&#x2F;pprof&#x2F;heap&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">-&gt; 輸入top&lt;br&gt;</span><br><span class=\"line\">-&gt; 輸入web可以看到圖形&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">(pprof) top&lt;br&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">Showing nodes accounting for 1.50MB, 100% of 1.50MB total</span><br><span class=\"line\">      flat  flat%   sum%        cum   cum%&lt;br&gt;</span><br><span class=\"line\">    1.50MB   100%   100%     1.50MB   100%  golang.org&#x2F;x&#x2F;net&#x2F;webdav.(*memFile).Write&lt;br&gt;</span><br><span class=\"line\">         0     0%   100%     1.50MB   100%  github.com&#x2F;swaggo&#x2F;files.init.8&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"go-tool-看CPU-profile\"><a href=\"#go-tool-看CPU-profile\" class=\"headerlink\" title=\"go tool 看CPU(profile)\"></a>go tool 看CPU(profile)</h3><p>而以下幾令則是幾秒內的ＣＰＵ計算</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof http:&#x2F;&#x2F;localhost:6060&#x2F;debug&#x2F;pprof&#x2F;profile?seconds&#x3D;60&lt;br&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"網頁版查看-圖表\"><a href=\"#網頁版查看-圖表\" class=\"headerlink\" title=\"網頁版查看 圖表\"></a>網頁版查看 圖表</h3><p>以上兩種指令其實可以透過以下指令可以開啟一個網頁更容易看到資料的圖表呈現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot; -seconds&#x3D;30 http:&#x2F;&#x2F;localhost:8080&#x2F;debug&#x2F;pprof&#x2F;profile</span><br><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot;  http:&#x2F;&#x2F;localhost:8088&#x2F;debug&#x2F;pprof&#x2F;heap</span><br><span class=\"line\">go tool pprof -http&#x3D;&quot;:9099&quot;  http:&#x2F;&#x2F;localhost:8088&#x2F;debug&#x2F;pprof&#x2F;goroutine</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>參考文章:<br></p>\n<ul>\n<li><a href=\"https://lrita.github.io/2017/05/26/golang-memory-pprof/\" title=\"golang pprof\">golang pprof</a><br></li>\n<li><a href=\"https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/\" title=\"使用多年的go pprof检查内存泄漏的方法居然是错的?!\">使用多年的go pprof检查内存泄漏的方法居然是错的?!</a><br></li>\n</ul>\n<hr>\n<h2 id=\"檢視go的品質與建議\"><a href=\"#檢視go的品質與建議\" class=\"headerlink\" title=\"檢視go的品質與建議\"></a>檢視go的品質與建議</h2><p>1.先下載 go set<br><br>go get github.com/securego/gosec/cmd/gosec@v2.2.0<br><br></p>\n<p>2.輸出報告(可選格式)<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gosec -fmt&#x3D;json -out&#x3D;results.json .&#x2F;...&lt;br&gt;</span><br><span class=\"line\">gosec -fmt&#x3D;html -out&#x3D;results.html .&#x2F;...&lt;br&gt; </span><br><span class=\"line\">注意是*三個點</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>然後打開ＨＴＭＬ檔案就可以看到程式品質分析報告了</p>\n<img src=\"/images/post/gosec.png\" width=\"500px\">\n</li>\n<li><p>像是以上這條處理檔案位置時，path應該清理處理過以避免輸入異常</p>\n</li>\n</ul>\n<blockquote>\n<p>note class_name %}  ## 延伸文章 </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>來源</th>\n<th>摘要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://gocn.vip/topics/250\" title=\"新手问题 golang内存检测工具\">新手问题 golang内存检测工具</a></td>\n<td>生产环境中使用 pprof 时会遇到一些问题</td>\n</tr>\n<tr>\n<td><a href=\"https://www.jianshu.com/p/21b53f061a0a\" title=\"go pprof与线上事故：一次成功的定位与失败的复现\">go pprof与线上事故：一次成功的定位与失败的复现</a></td>\n<td>很多小伙伴担心线上使用pprof会影响性能，担心安全问题。这个在我看来利大于弊，当服务出现问题的时候，资源占用多一点点与能够解决问题相比微不足道，当服务没有问题的时候使用pprof那更没有问题了~</td>\n</tr>\n<tr>\n<td><a href=\"https://www.itdaan.com/tw/c8c0ed4d4e43c2a0d6a2917232d6499b\" title=\"Golang 語言的單元測試和性能測試(也叫 壓力測試)\">Golang 語言的單元測試和性能測試(也叫 壓力測試)</a></td>\n<td>（高級測試技術）</td>\n</tr>\n<tr>\n<td><a href=\"https://etcnotes.com/posts/pprof/\">https://etcnotes.com/posts/pprof/</a></td>\n<td>生成圖</td>\n</tr>\n</tbody></table>"},{"title":"[純紀錄]Kubernetes基本操作","date":"2020-12-31T03:53:14.000Z","_content":"\n>學習 Kubernetes 與基本操作紀錄 \n\n\n<!--more-->\n\n# Kubernetes 文章\n\n\n- [学习 Kubernetes 基础知识](https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/)\n官方\n- [[Day 6] 實際環境運行的 Kubernetes - Node & Architecture Overview](https://ithelp.ithome.com.tw/articles/10193248)\n概觀 Kubernetes 的內部運作\n\n- [Kubernetes 元件介紹與 minikube 安裝教學](https://blog.toright.com/posts/6513/kubernetes-%E5%9F%BA%E7%A4%8E%E5%85%83%E4%BB%B6%E4%BB%8B%E7%B4%B9%E8%88%87minikube%E5%AE%89%E8%A3%9D.html)\npod/Service/Deployment介紹\n\n- [适用于 Docker 用户的 kubectl](https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/)\n提供docker與kubectl指令對應參考\n\n- [[Day 5] 在 Minikube 上跑起你的 Docker Containers - Pod & kubectl 常用指令](https://ithelp.ithome.com.tw/articles/10193232)\npod與yaml說明與如何與 Pod 中的 container 互動\n\n- [Day 4 - 部署應用程式到 Kubernetes 叢集 - Part I - 手動建立 deployment 與 Service](https://ithelp.ithome.com.tw/articles/10202313)\n建立deployment 與 Service/nodePort從本地開啟\n\n- [Kubernetes & OpenShift Java Client](https://github.com/fabric8io/kubernetes-client)\n\n\n- Kubernetes —學習好幫手minikube — 01\n將K8s所需的Master/Worker node封裝在一個虛擬機器中\nhttps://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\n\n# kubectl的簡單查看，新增，重開\n\nkubectl的簡單查看，新增，重開\n\n- kubectl get pod -A \n\nkubectl create 建立 後面可以直接加參數或是用yaml來建立\n\n- 簡單建立deployment\n啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，\n```\n$ kubectl create deployment first-deployment --image=katacoda/docker-http-server\ndeployment.apps/first-deployment created\n$ kubectl get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nfirst-deployment-8cbf74484-xgc4l   1/1     Running   0          25s\n```\n\n- 建立namespaces\n```\n>kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   7m52s\nkube-node-lease   Active   7m53s\nkube-public       Active   7m53s\nkube-system       Active   7m53s\n\n //Create a new Namespaces\nD:\\k8syaml>kubectl create namespace my\nnamespace/my created\n```\n\n- 建立deployment\nhttps://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\nD:\\k8syaml>kubectl create -f my-first-pod.yaml   編輯要部屬的程式\ndeployment.apps/my-pod created\n\n\n- 查看所有pod\nD:\\k8syaml>kubectl get pod -A\n\n- 看LOG\nkubectl -n eda logs my-pod-5b788d95bc-kx76k\n\n- 刪除\nD:\\k8syaml>kubectl delete deployment my-pod -n eda  先刪除\ndeployment.apps \"my-pod\" deleted\n\n- 重開\nD:\\k8syaml>kubectl -n eda rollout restart deployment  nginx179   執行重開指令\ndeployment.apps/nginx179 restarted   \n\n- 編輯一樣可以達到重開效果\nkubectl edit deployment -n eda  nginx179\nkubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功\n\n# minikube \n\nKubernetes —學習好幫手minikube — 01\n將K8s所需的Master/Worker node封裝在一個虛擬機器中\nhttps://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\n1.install kubuctl\n你可以使用 Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。\n\n2.Minikube \n>Minikube 是由 Google 發布的一個輕量級工具。讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。Minikube 會在本機上跑起一個 virtual machine，並且在這 VM 裡建立一個 signle-node Kubernetes Cluster，本身並不支援 HA (High availability)，也不推薦在實際應用上運行。\n\n安裝:https://minikube.sigs.k8s.io/docs/start/\n\n*開啟docker的k8s設定\ndocker desktop ->settings->\n\n```\n>kubectl get nodes\nNo resources found\n\n- 啟動minikube start\n>minikube start\n* minikube v1.16.0 on Microsoft Windows 10 Enterprise 10.0.17763 Build 17763\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Restarting existing docker container for \"minikube\" ...\n* Preparing Kubernetes v1.20.0 on Docker 20.10.0 ...\n* Verifying Kubernetes components...\n* Enabled addons: storage-provisioner, default-storageclass\n* Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n```\n\n- 確認kubectl version\n```\n>kubectl version\nClient Version: version.Info{Major:\"1\", Minor:\"19\", GitVersion:\"v1.19.3\", GitCommit:\"1e11e4a2108024935ecfcb2912226cedeafd99df\", GitTreeState:\"clean\", BuildDate:\"2020-10-14T12:50:19Z\", GoVersion:\"go1.15.2\", Compiler:\"gc\", Platform:\"windows/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"20\", GitVersion:\"v1.20.0\", GitCommit:\"af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38\", GitTreeState:\"clean\", BuildDate:\"2020-12-08T17:51:19Z\", GoVersion:\"go1.15.5\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```\nserver version需要minikube有安裝才會出現\n```\n>kubectl get nodes\nNAME       STATUS   ROLES                  AGE   VERSION\nminikube   Ready    control-plane,master   3d    v1.20.0\n```\n\nPS C:\\> minikube dashboard\nOpening kubernetes dashboard in default browser...\n\n\n啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，\n\n$ kubectl create deployment first-deployment --image=katacoda/docker-http-server\ndeployment.apps/first-deployment created\n$ kubectl get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nfirst-deployment-8cbf74484-xgc4l   1/1     Running   0          25s\n\n\n在 minikube 上透過 kubectl get\n\n來自 <https://ithelp.ithome.com.tw/articles/10197186> \n\nD:\\k8syaml>kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   7m52s\nkube-node-lease   Active   7m53s\nkube-public       Active   7m53s\nkube-system       Active   7m53s\n\nCreate a new Namespaces\nD:\\k8syaml>kubectl create namespace eda\nnamespace/eda created\n\n\n建立deployment\nhttps://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\nD:\\k8syaml>kubectl create -f my-first-pod.yaml   編輯要部屬的程式\ndeployment.apps/my-pod created\n\nD:\\k8syaml>kubectl get pods\nNo resources found in default namespace.\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           my-pod-5b788d95bc-kx76k            0/1     Error     0          46s  建立不成功因為有相依\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          10m\nkube-system   etcd-minikube                      1/1     Running   0          10m\nkube-system   kube-apiserver-minikube            1/1     Running   0          10m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          10m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          10m\nkube-system   kube-scheduler-minikube            1/1     Running   0          10m\nkube-system   storage-provisioner                1/1     Running   0          10m\n\n看LOG\nkubectl -n eda logs my-pod-5b788d95bc-kx76k\n\n\nD:\\k8syaml>kubectl delete deployment my-pod -n eda  先刪除\ndeployment.apps \"my-pod\" deleted\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS        RESTARTS   AGE\neda           my-pod-5b788d95bc-kx76k            0/1     Terminating   5          6m20s\nkube-system   coredns-74ff55c5b-wf484            1/1     Running       0          16m\nkube-system   etcd-minikube                      1/1     Running       0          16m\nkube-system   kube-apiserver-minikube            1/1     Running       0          16m\nkube-system   kube-controller-manager-minikube   1/1     Running       0          16m\nkube-system   kube-proxy-skl6r                   1/1     Running       0          16m\nkube-system   kube-scheduler-minikube            1/1     Running       0          16m\nkube-system   storage-provisioner                1/1     Running       0          16m\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          16m\nkube-system   etcd-minikube                      1/1     Running   0          16m\nkube-system   kube-apiserver-minikube            1/1     Running   0          16m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          16m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          16m\nkube-system   kube-scheduler-minikube            1/1     Running   0          16m\nkube-system   storage-provisioner                1/1     Running   0          16m\n\nD:\\k8syaml>kubectl create -f my-first-nginx179.yaml //重新建立一個\ndeployment.apps/nginx179 created\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-75c6f6f5b8-bwzgm          1/1     Running   0          98s  //啟動成功\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          20m\nkube-system   etcd-minikube                      1/1     Running   0          20m\nkube-system   kube-apiserver-minikube            1/1     Running   0          20m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          20m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          20m\nkube-system   kube-scheduler-minikube            1/1     Running   0          20m\nkube-system   storage-provisioner                1/1     Running   0          20m\n\nD:\\k8syaml>kubectl -n eda rollout restart deployment  nginx179   執行重開指令\ndeployment.apps/nginx179 restarted   \n\n編輯一樣可以達到重開效果\nkubectl edit deployment -n eda  nginx179\nkubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功\n\n\n建立stateful\nhttps://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/\n\nD:\\k8syaml>kubectl apply -f my-web.yaml\nservice/nginx created\nstatefulset.apps/web created\nD:\\k8syaml>kubectl get pods -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\ndefault       web-0                              1/1     Running   0          39s\ndefault       web-1                              1/1     Running   0          27s\n\nD:\\k8syaml>kubectl delete pod -l app=nginx\npod \"web-0\" deleted\npod \"web-1\" deleted\n\nD:\\k8syaml>kubectl apply -f my-web.yaml\nservice/nginx unchanged\nstatefulset.apps/web created\n\nD:\\k8syaml>kubectl edit statefulset -n eda  my-web\nEdit cancelled, no changes made.\n\n\n","source":"_posts/Kubernetes.md","raw":"---\ntitle: \"[純紀錄]Kubernetes基本操作\"\ntags:\n  - Kubernetes\n  - CLI\ncategories:\n  - Tech.\n  - deploy\n  - Kubernetes\n\ndate: 2020-12-31 11:53:14\n---\n\n>學習 Kubernetes 與基本操作紀錄 \n\n\n<!--more-->\n\n# Kubernetes 文章\n\n\n- [学习 Kubernetes 基础知识](https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/)\n官方\n- [[Day 6] 實際環境運行的 Kubernetes - Node & Architecture Overview](https://ithelp.ithome.com.tw/articles/10193248)\n概觀 Kubernetes 的內部運作\n\n- [Kubernetes 元件介紹與 minikube 安裝教學](https://blog.toright.com/posts/6513/kubernetes-%E5%9F%BA%E7%A4%8E%E5%85%83%E4%BB%B6%E4%BB%8B%E7%B4%B9%E8%88%87minikube%E5%AE%89%E8%A3%9D.html)\npod/Service/Deployment介紹\n\n- [适用于 Docker 用户的 kubectl](https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/)\n提供docker與kubectl指令對應參考\n\n- [[Day 5] 在 Minikube 上跑起你的 Docker Containers - Pod & kubectl 常用指令](https://ithelp.ithome.com.tw/articles/10193232)\npod與yaml說明與如何與 Pod 中的 container 互動\n\n- [Day 4 - 部署應用程式到 Kubernetes 叢集 - Part I - 手動建立 deployment 與 Service](https://ithelp.ithome.com.tw/articles/10202313)\n建立deployment 與 Service/nodePort從本地開啟\n\n- [Kubernetes & OpenShift Java Client](https://github.com/fabric8io/kubernetes-client)\n\n\n- Kubernetes —學習好幫手minikube — 01\n將K8s所需的Master/Worker node封裝在一個虛擬機器中\nhttps://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\n\n# kubectl的簡單查看，新增，重開\n\nkubectl的簡單查看，新增，重開\n\n- kubectl get pod -A \n\nkubectl create 建立 後面可以直接加參數或是用yaml來建立\n\n- 簡單建立deployment\n啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，\n```\n$ kubectl create deployment first-deployment --image=katacoda/docker-http-server\ndeployment.apps/first-deployment created\n$ kubectl get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nfirst-deployment-8cbf74484-xgc4l   1/1     Running   0          25s\n```\n\n- 建立namespaces\n```\n>kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   7m52s\nkube-node-lease   Active   7m53s\nkube-public       Active   7m53s\nkube-system       Active   7m53s\n\n //Create a new Namespaces\nD:\\k8syaml>kubectl create namespace my\nnamespace/my created\n```\n\n- 建立deployment\nhttps://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\nD:\\k8syaml>kubectl create -f my-first-pod.yaml   編輯要部屬的程式\ndeployment.apps/my-pod created\n\n\n- 查看所有pod\nD:\\k8syaml>kubectl get pod -A\n\n- 看LOG\nkubectl -n eda logs my-pod-5b788d95bc-kx76k\n\n- 刪除\nD:\\k8syaml>kubectl delete deployment my-pod -n eda  先刪除\ndeployment.apps \"my-pod\" deleted\n\n- 重開\nD:\\k8syaml>kubectl -n eda rollout restart deployment  nginx179   執行重開指令\ndeployment.apps/nginx179 restarted   \n\n- 編輯一樣可以達到重開效果\nkubectl edit deployment -n eda  nginx179\nkubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功\n\n# minikube \n\nKubernetes —學習好幫手minikube — 01\n將K8s所需的Master/Worker node封裝在一個虛擬機器中\nhttps://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\n1.install kubuctl\n你可以使用 Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。\n\n2.Minikube \n>Minikube 是由 Google 發布的一個輕量級工具。讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。Minikube 會在本機上跑起一個 virtual machine，並且在這 VM 裡建立一個 signle-node Kubernetes Cluster，本身並不支援 HA (High availability)，也不推薦在實際應用上運行。\n\n安裝:https://minikube.sigs.k8s.io/docs/start/\n\n*開啟docker的k8s設定\ndocker desktop ->settings->\n\n```\n>kubectl get nodes\nNo resources found\n\n- 啟動minikube start\n>minikube start\n* minikube v1.16.0 on Microsoft Windows 10 Enterprise 10.0.17763 Build 17763\n* Using the docker driver based on existing profile\n* Starting control plane node minikube in cluster minikube\n* Restarting existing docker container for \"minikube\" ...\n* Preparing Kubernetes v1.20.0 on Docker 20.10.0 ...\n* Verifying Kubernetes components...\n* Enabled addons: storage-provisioner, default-storageclass\n* Done! kubectl is now configured to use \"minikube\" cluster and \"default\" namespace by default\n```\n\n- 確認kubectl version\n```\n>kubectl version\nClient Version: version.Info{Major:\"1\", Minor:\"19\", GitVersion:\"v1.19.3\", GitCommit:\"1e11e4a2108024935ecfcb2912226cedeafd99df\", GitTreeState:\"clean\", BuildDate:\"2020-10-14T12:50:19Z\", GoVersion:\"go1.15.2\", Compiler:\"gc\", Platform:\"windows/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"20\", GitVersion:\"v1.20.0\", GitCommit:\"af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38\", GitTreeState:\"clean\", BuildDate:\"2020-12-08T17:51:19Z\", GoVersion:\"go1.15.5\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n```\nserver version需要minikube有安裝才會出現\n```\n>kubectl get nodes\nNAME       STATUS   ROLES                  AGE   VERSION\nminikube   Ready    control-plane,master   3d    v1.20.0\n```\n\nPS C:\\> minikube dashboard\nOpening kubernetes dashboard in default browser...\n\n\n啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，\n\n$ kubectl create deployment first-deployment --image=katacoda/docker-http-server\ndeployment.apps/first-deployment created\n$ kubectl get pods\nNAME                               READY   STATUS    RESTARTS   AGE\nfirst-deployment-8cbf74484-xgc4l   1/1     Running   0          25s\n\n\n在 minikube 上透過 kubectl get\n\n來自 <https://ithelp.ithome.com.tw/articles/10197186> \n\nD:\\k8syaml>kubectl get namespaces\nNAME              STATUS   AGE\ndefault           Active   7m52s\nkube-node-lease   Active   7m53s\nkube-public       Active   7m53s\nkube-system       Active   7m53s\n\nCreate a new Namespaces\nD:\\k8syaml>kubectl create namespace eda\nnamespace/eda created\n\n\n建立deployment\nhttps://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\nD:\\k8syaml>kubectl create -f my-first-pod.yaml   編輯要部屬的程式\ndeployment.apps/my-pod created\n\nD:\\k8syaml>kubectl get pods\nNo resources found in default namespace.\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           my-pod-5b788d95bc-kx76k            0/1     Error     0          46s  建立不成功因為有相依\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          10m\nkube-system   etcd-minikube                      1/1     Running   0          10m\nkube-system   kube-apiserver-minikube            1/1     Running   0          10m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          10m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          10m\nkube-system   kube-scheduler-minikube            1/1     Running   0          10m\nkube-system   storage-provisioner                1/1     Running   0          10m\n\n看LOG\nkubectl -n eda logs my-pod-5b788d95bc-kx76k\n\n\nD:\\k8syaml>kubectl delete deployment my-pod -n eda  先刪除\ndeployment.apps \"my-pod\" deleted\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS        RESTARTS   AGE\neda           my-pod-5b788d95bc-kx76k            0/1     Terminating   5          6m20s\nkube-system   coredns-74ff55c5b-wf484            1/1     Running       0          16m\nkube-system   etcd-minikube                      1/1     Running       0          16m\nkube-system   kube-apiserver-minikube            1/1     Running       0          16m\nkube-system   kube-controller-manager-minikube   1/1     Running       0          16m\nkube-system   kube-proxy-skl6r                   1/1     Running       0          16m\nkube-system   kube-scheduler-minikube            1/1     Running       0          16m\nkube-system   storage-provisioner                1/1     Running       0          16m\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          16m\nkube-system   etcd-minikube                      1/1     Running   0          16m\nkube-system   kube-apiserver-minikube            1/1     Running   0          16m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          16m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          16m\nkube-system   kube-scheduler-minikube            1/1     Running   0          16m\nkube-system   storage-provisioner                1/1     Running   0          16m\n\nD:\\k8syaml>kubectl create -f my-first-nginx179.yaml //重新建立一個\ndeployment.apps/nginx179 created\n\nD:\\k8syaml>kubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-75c6f6f5b8-bwzgm          1/1     Running   0          98s  //啟動成功\nkube-system   coredns-74ff55c5b-wf484            1/1     Running   0          20m\nkube-system   etcd-minikube                      1/1     Running   0          20m\nkube-system   kube-apiserver-minikube            1/1     Running   0          20m\nkube-system   kube-controller-manager-minikube   1/1     Running   0          20m\nkube-system   kube-proxy-skl6r                   1/1     Running   0          20m\nkube-system   kube-scheduler-minikube            1/1     Running   0          20m\nkube-system   storage-provisioner                1/1     Running   0          20m\n\nD:\\k8syaml>kubectl -n eda rollout restart deployment  nginx179   執行重開指令\ndeployment.apps/nginx179 restarted   \n\n編輯一樣可以達到重開效果\nkubectl edit deployment -n eda  nginx179\nkubectl get pod -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\neda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功\n\n\n建立stateful\nhttps://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/\n\nD:\\k8syaml>kubectl apply -f my-web.yaml\nservice/nginx created\nstatefulset.apps/web created\nD:\\k8syaml>kubectl get pods -A\nNAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE\ndefault       web-0                              1/1     Running   0          39s\ndefault       web-1                              1/1     Running   0          27s\n\nD:\\k8syaml>kubectl delete pod -l app=nginx\npod \"web-0\" deleted\npod \"web-1\" deleted\n\nD:\\k8syaml>kubectl apply -f my-web.yaml\nservice/nginx unchanged\nstatefulset.apps/web created\n\nD:\\k8syaml>kubectl edit statefulset -n eda  my-web\nEdit cancelled, no changes made.\n\n\n","slug":"Kubernetes","published":1,"updated":"2023-01-22T07:03:26.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhah000skp2xh9ay8j3h","content":"<blockquote>\n<p>學習 Kubernetes 與基本操作紀錄 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"Kubernetes-文章\"><a href=\"#Kubernetes-文章\" class=\"headerlink\" title=\"Kubernetes 文章\"></a>Kubernetes 文章</h1><ul>\n<li><p><a href=\"https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/\">学习 Kubernetes 基础知识</a><br>官方</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10193248\">[Day 6] 實際環境運行的 Kubernetes - Node &amp; Architecture Overview</a><br>概觀 Kubernetes 的內部運作</p>\n</li>\n<li><p><a href=\"https://blog.toright.com/posts/6513/kubernetes-%E5%9F%BA%E7%A4%8E%E5%85%83%E4%BB%B6%E4%BB%8B%E7%B4%B9%E8%88%87minikube%E5%AE%89%E8%A3%9D.html\">Kubernetes 元件介紹與 minikube 安裝教學</a><br>pod/Service/Deployment介紹</p>\n</li>\n<li><p><a href=\"https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/\">适用于 Docker 用户的 kubectl</a><br>提供docker與kubectl指令對應參考</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10193232\">[Day 5] 在 Minikube 上跑起你的 Docker Containers - Pod &amp; kubectl 常用指令</a><br>pod與yaml說明與如何與 Pod 中的 container 互動</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10202313\">Day 4 - 部署應用程式到 Kubernetes 叢集 - Part I - 手動建立 deployment 與 Service</a><br>建立deployment 與 Service/nodePort從本地開啟</p>\n</li>\n<li><p><a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes &amp; OpenShift Java Client</a></p>\n</li>\n</ul>\n<ul>\n<li>Kubernetes —學習好幫手minikube — 01<br>將K8s所需的Master/Worker node封裝在一個虛擬機器中<br><a href=\"https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\">https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe</a></li>\n</ul>\n<h1 id=\"kubectl的簡單查看，新增，重開\"><a href=\"#kubectl的簡單查看，新增，重開\" class=\"headerlink\" title=\"kubectl的簡單查看，新增，重開\"></a>kubectl的簡單查看，新增，重開</h1><p>kubectl的簡單查看，新增，重開</p>\n<ul>\n<li>kubectl get pod -A </li>\n</ul>\n<p>kubectl create 建立 後面可以直接加參數或是用yaml來建立</p>\n<ul>\n<li>簡單建立deployment<br>啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create deployment first-deployment --image&#x3D;katacoda&#x2F;docker-http-server</span><br><span class=\"line\">deployment.apps&#x2F;first-deployment created</span><br><span class=\"line\">$ kubectl get pods</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">first-deployment-8cbf74484-xgc4l   1&#x2F;1     Running   0          25s</span><br></pre></td></tr></table></figure></li>\n<li>建立namespaces<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get namespaces</span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   7m52s</span><br><span class=\"line\">kube-node-lease   Active   7m53s</span><br><span class=\"line\">kube-public       Active   7m53s</span><br><span class=\"line\">kube-system       Active   7m53s</span><br><span class=\"line\"></span><br><span class=\"line\"> &#x2F;&#x2F;Create a new Namespaces</span><br><span class=\"line\">D:\\k8syaml&gt;kubectl create namespace my</span><br><span class=\"line\">namespace&#x2F;my created</span><br></pre></td></tr></table></figure></li>\n<li>建立deployment<br><a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/</a><br>D:\\k8syaml&gt;kubectl create -f my-first-pod.yaml   編輯要部屬的程式<br>deployment.apps/my-pod created</li>\n</ul>\n<ul>\n<li><p>查看所有pod<br>D:\\k8syaml&gt;kubectl get pod -A</p>\n</li>\n<li><p>看LOG<br>kubectl -n eda logs my-pod-5b788d95bc-kx76k</p>\n</li>\n<li><p>刪除<br>D:\\k8syaml&gt;kubectl delete deployment my-pod -n eda  先刪除<br>deployment.apps “my-pod” deleted</p>\n</li>\n<li><p>重開<br>D:\\k8syaml&gt;kubectl -n eda rollout restart deployment  nginx179   執行重開指令<br>deployment.apps/nginx179 restarted   </p>\n</li>\n<li><p>編輯一樣可以達到重開效果<br>kubectl edit deployment -n eda  nginx179<br>kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功</p>\n</li>\n</ul>\n<h1 id=\"minikube\"><a href=\"#minikube\" class=\"headerlink\" title=\"minikube\"></a>minikube</h1><p>Kubernetes —學習好幫手minikube — 01<br>將K8s所需的Master/Worker node封裝在一個虛擬機器中<br><a href=\"https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\">https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe</a><br>1.install kubuctl<br>你可以使用 Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。</p>\n<p>2.Minikube </p>\n<blockquote>\n<p>Minikube 是由 Google 發布的一個輕量級工具。讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。Minikube 會在本機上跑起一個 virtual machine，並且在這 VM 裡建立一個 signle-node Kubernetes Cluster，本身並不支援 HA (High availability)，也不推薦在實際應用上運行。</p>\n</blockquote>\n<p>安裝:<a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a></p>\n<p>*開啟docker的k8s設定<br>docker desktop -&gt;settings-&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get nodes</span><br><span class=\"line\">No resources found</span><br><span class=\"line\"></span><br><span class=\"line\">- 啟動minikube start</span><br><span class=\"line\">&gt;minikube start</span><br><span class=\"line\">* minikube v1.16.0 on Microsoft Windows 10 Enterprise 10.0.17763 Build 17763</span><br><span class=\"line\">* Using the docker driver based on existing profile</span><br><span class=\"line\">* Starting control plane node minikube in cluster minikube</span><br><span class=\"line\">* Restarting existing docker container for &quot;minikube&quot; ...</span><br><span class=\"line\">* Preparing Kubernetes v1.20.0 on Docker 20.10.0 ...</span><br><span class=\"line\">* Verifying Kubernetes components...</span><br><span class=\"line\">* Enabled addons: storage-provisioner, default-storageclass</span><br><span class=\"line\">* Done! kubectl is now configured to use &quot;minikube&quot; cluster and &quot;default&quot; namespace by default</span><br></pre></td></tr></table></figure>\n<ul>\n<li>確認kubectl version<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl version</span><br><span class=\"line\">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:50:19Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;windows&#x2F;amd64&quot;&#125;</span><br><span class=\"line\">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.0&quot;, GitCommit:&quot;af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-12-08T17:51:19Z&quot;, GoVersion:&quot;go1.15.5&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br></pre></td></tr></table></figure>\nserver version需要minikube有安裝才會出現<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">minikube   Ready    control-plane,master   3d    v1.20.0</span><br></pre></td></tr></table></figure>\nPS C:&gt; minikube dashboard<br>Opening kubernetes dashboard in default browser…</li>\n</ul>\n<p>啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，</p>\n<p>$ kubectl create deployment first-deployment –image=katacoda/docker-http-server<br>deployment.apps/first-deployment created<br>$ kubectl get pods<br>NAME                               READY   STATUS    RESTARTS   AGE<br>first-deployment-8cbf74484-xgc4l   1/1     Running   0          25s</p>\n<p>在 minikube 上透過 kubectl get</p>\n<p>來自 <a href=\"https://ithelp.ithome.com.tw/articles/10197186\">https://ithelp.ithome.com.tw/articles/10197186</a> </p>\n<p>D:\\k8syaml&gt;kubectl get namespaces<br>NAME              STATUS   AGE<br>default           Active   7m52s<br>kube-node-lease   Active   7m53s<br>kube-public       Active   7m53s<br>kube-system       Active   7m53s</p>\n<p>Create a new Namespaces<br>D:\\k8syaml&gt;kubectl create namespace eda<br>namespace/eda created</p>\n<p>建立deployment<br><a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/</a><br>D:\\k8syaml&gt;kubectl create -f my-first-pod.yaml   編輯要部屬的程式<br>deployment.apps/my-pod created</p>\n<p>D:\\k8syaml&gt;kubectl get pods<br>No resources found in default namespace.</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           my-pod-5b788d95bc-kx76k            0/1     Error     0          46s  建立不成功因為有相依<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          10m<br>kube-system   etcd-minikube                      1/1     Running   0          10m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          10m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          10m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          10m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          10m<br>kube-system   storage-provisioner                1/1     Running   0          10m</p>\n<p>看LOG<br>kubectl -n eda logs my-pod-5b788d95bc-kx76k</p>\n<p>D:\\k8syaml&gt;kubectl delete deployment my-pod -n eda  先刪除<br>deployment.apps “my-pod” deleted</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS        RESTARTS   AGE<br>eda           my-pod-5b788d95bc-kx76k            0/1     Terminating   5          6m20s<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running       0          16m<br>kube-system   etcd-minikube                      1/1     Running       0          16m<br>kube-system   kube-apiserver-minikube            1/1     Running       0          16m<br>kube-system   kube-controller-manager-minikube   1/1     Running       0          16m<br>kube-system   kube-proxy-skl6r                   1/1     Running       0          16m<br>kube-system   kube-scheduler-minikube            1/1     Running       0          16m<br>kube-system   storage-provisioner                1/1     Running       0          16m</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          16m<br>kube-system   etcd-minikube                      1/1     Running   0          16m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          16m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          16m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          16m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          16m<br>kube-system   storage-provisioner                1/1     Running   0          16m</p>\n<p>D:\\k8syaml&gt;kubectl create -f my-first-nginx179.yaml //重新建立一個<br>deployment.apps/nginx179 created</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-75c6f6f5b8-bwzgm          1/1     Running   0          98s  //啟動成功<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          20m<br>kube-system   etcd-minikube                      1/1     Running   0          20m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          20m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          20m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          20m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          20m<br>kube-system   storage-provisioner                1/1     Running   0          20m</p>\n<p>D:\\k8syaml&gt;kubectl -n eda rollout restart deployment  nginx179   執行重開指令<br>deployment.apps/nginx179 restarted   </p>\n<p>編輯一樣可以達到重開效果<br>kubectl edit deployment -n eda  nginx179<br>kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功</p>\n<p>建立stateful<br><a href=\"https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/\">https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/</a></p>\n<p>D:\\k8syaml&gt;kubectl apply -f my-web.yaml<br>service/nginx created<br>statefulset.apps/web created<br>D:\\k8syaml&gt;kubectl get pods -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>default       web-0                              1/1     Running   0          39s<br>default       web-1                              1/1     Running   0          27s</p>\n<p>D:\\k8syaml&gt;kubectl delete pod -l app=nginx<br>pod “web-0” deleted<br>pod “web-1” deleted</p>\n<p>D:\\k8syaml&gt;kubectl apply -f my-web.yaml<br>service/nginx unchanged<br>statefulset.apps/web created</p>\n<p>D:\\k8syaml&gt;kubectl edit statefulset -n eda  my-web<br>Edit cancelled, no changes made.</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>學習 Kubernetes 與基本操作紀錄 </p>\n</blockquote>","more":"<h1 id=\"Kubernetes-文章\"><a href=\"#Kubernetes-文章\" class=\"headerlink\" title=\"Kubernetes 文章\"></a>Kubernetes 文章</h1><ul>\n<li><p><a href=\"https://kubernetes.io/zh/docs/tutorials/kubernetes-basics/\">学习 Kubernetes 基础知识</a><br>官方</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10193248\">[Day 6] 實際環境運行的 Kubernetes - Node &amp; Architecture Overview</a><br>概觀 Kubernetes 的內部運作</p>\n</li>\n<li><p><a href=\"https://blog.toright.com/posts/6513/kubernetes-%E5%9F%BA%E7%A4%8E%E5%85%83%E4%BB%B6%E4%BB%8B%E7%B4%B9%E8%88%87minikube%E5%AE%89%E8%A3%9D.html\">Kubernetes 元件介紹與 minikube 安裝教學</a><br>pod/Service/Deployment介紹</p>\n</li>\n<li><p><a href=\"https://kubernetes.io/zh/docs/reference/kubectl/docker-cli-to-kubectl/\">适用于 Docker 用户的 kubectl</a><br>提供docker與kubectl指令對應參考</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10193232\">[Day 5] 在 Minikube 上跑起你的 Docker Containers - Pod &amp; kubectl 常用指令</a><br>pod與yaml說明與如何與 Pod 中的 container 互動</p>\n</li>\n<li><p><a href=\"https://ithelp.ithome.com.tw/articles/10202313\">Day 4 - 部署應用程式到 Kubernetes 叢集 - Part I - 手動建立 deployment 與 Service</a><br>建立deployment 與 Service/nodePort從本地開啟</p>\n</li>\n<li><p><a href=\"https://github.com/fabric8io/kubernetes-client\">Kubernetes &amp; OpenShift Java Client</a></p>\n</li>\n</ul>\n<ul>\n<li>Kubernetes —學習好幫手minikube — 01<br>將K8s所需的Master/Worker node封裝在一個虛擬機器中<br><a href=\"https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\">https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe</a></li>\n</ul>\n<h1 id=\"kubectl的簡單查看，新增，重開\"><a href=\"#kubectl的簡單查看，新增，重開\" class=\"headerlink\" title=\"kubectl的簡單查看，新增，重開\"></a>kubectl的簡單查看，新增，重開</h1><p>kubectl的簡單查看，新增，重開</p>\n<ul>\n<li>kubectl get pod -A </li>\n</ul>\n<p>kubectl create 建立 後面可以直接加參數或是用yaml來建立</p>\n<ul>\n<li>簡單建立deployment<br>啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ kubectl create deployment first-deployment --image&#x3D;katacoda&#x2F;docker-http-server</span><br><span class=\"line\">deployment.apps&#x2F;first-deployment created</span><br><span class=\"line\">$ kubectl get pods</span><br><span class=\"line\">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class=\"line\">first-deployment-8cbf74484-xgc4l   1&#x2F;1     Running   0          25s</span><br></pre></td></tr></table></figure></li>\n<li>建立namespaces<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get namespaces</span><br><span class=\"line\">NAME              STATUS   AGE</span><br><span class=\"line\">default           Active   7m52s</span><br><span class=\"line\">kube-node-lease   Active   7m53s</span><br><span class=\"line\">kube-public       Active   7m53s</span><br><span class=\"line\">kube-system       Active   7m53s</span><br><span class=\"line\"></span><br><span class=\"line\"> &#x2F;&#x2F;Create a new Namespaces</span><br><span class=\"line\">D:\\k8syaml&gt;kubectl create namespace my</span><br><span class=\"line\">namespace&#x2F;my created</span><br></pre></td></tr></table></figure></li>\n<li>建立deployment<br><a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/</a><br>D:\\k8syaml&gt;kubectl create -f my-first-pod.yaml   編輯要部屬的程式<br>deployment.apps/my-pod created</li>\n</ul>\n<ul>\n<li><p>查看所有pod<br>D:\\k8syaml&gt;kubectl get pod -A</p>\n</li>\n<li><p>看LOG<br>kubectl -n eda logs my-pod-5b788d95bc-kx76k</p>\n</li>\n<li><p>刪除<br>D:\\k8syaml&gt;kubectl delete deployment my-pod -n eda  先刪除<br>deployment.apps “my-pod” deleted</p>\n</li>\n<li><p>重開<br>D:\\k8syaml&gt;kubectl -n eda rollout restart deployment  nginx179   執行重開指令<br>deployment.apps/nginx179 restarted   </p>\n</li>\n<li><p>編輯一樣可以達到重開效果<br>kubectl edit deployment -n eda  nginx179<br>kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功</p>\n</li>\n</ul>\n<h1 id=\"minikube\"><a href=\"#minikube\" class=\"headerlink\" title=\"minikube\"></a>minikube</h1><p>Kubernetes —學習好幫手minikube — 01<br>將K8s所需的Master/Worker node封裝在一個虛擬機器中<br><a href=\"https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe\">https://medium.com/@sniperbean/kubernetes-%E5%AD%B8%E7%BF%92%E5%A5%BD%E5%B9%AB%E6%89%8Bminikube-01-aedfaf8b00fe</a><br>1.install kubuctl<br>你可以使用 Kubectl 命令行工具管理 Kubernetes 集群。 kubectl 在 $HOME/.kube 目录中查找一个名为 config 的配置文件。</p>\n<p>2.Minikube </p>\n<blockquote>\n<p>Minikube 是由 Google 發布的一個輕量級工具。讓開發者可以在本機上輕易架設一個 Kubernetes Cluster，快速上手 Kubernetes 的指令與環境。Minikube 會在本機上跑起一個 virtual machine，並且在這 VM 裡建立一個 signle-node Kubernetes Cluster，本身並不支援 HA (High availability)，也不推薦在實際應用上運行。</p>\n</blockquote>\n<p>安裝:<a href=\"https://minikube.sigs.k8s.io/docs/start/\">https://minikube.sigs.k8s.io/docs/start/</a></p>\n<p>*開啟docker的k8s設定<br>docker desktop -&gt;settings-&gt;</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get nodes</span><br><span class=\"line\">No resources found</span><br><span class=\"line\"></span><br><span class=\"line\">- 啟動minikube start</span><br><span class=\"line\">&gt;minikube start</span><br><span class=\"line\">* minikube v1.16.0 on Microsoft Windows 10 Enterprise 10.0.17763 Build 17763</span><br><span class=\"line\">* Using the docker driver based on existing profile</span><br><span class=\"line\">* Starting control plane node minikube in cluster minikube</span><br><span class=\"line\">* Restarting existing docker container for &quot;minikube&quot; ...</span><br><span class=\"line\">* Preparing Kubernetes v1.20.0 on Docker 20.10.0 ...</span><br><span class=\"line\">* Verifying Kubernetes components...</span><br><span class=\"line\">* Enabled addons: storage-provisioner, default-storageclass</span><br><span class=\"line\">* Done! kubectl is now configured to use &quot;minikube&quot; cluster and &quot;default&quot; namespace by default</span><br></pre></td></tr></table></figure>\n<ul>\n<li>確認kubectl version<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl version</span><br><span class=\"line\">Client Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;19&quot;, GitVersion:&quot;v1.19.3&quot;, GitCommit:&quot;1e11e4a2108024935ecfcb2912226cedeafd99df&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-10-14T12:50:19Z&quot;, GoVersion:&quot;go1.15.2&quot;, Compiler:&quot;gc&quot;, Platform:&quot;windows&#x2F;amd64&quot;&#125;</span><br><span class=\"line\">Server Version: version.Info&#123;Major:&quot;1&quot;, Minor:&quot;20&quot;, GitVersion:&quot;v1.20.0&quot;, GitCommit:&quot;af46c47ce925f4c4ad5cc8d1fca46c7b77d13b38&quot;, GitTreeState:&quot;clean&quot;, BuildDate:&quot;2020-12-08T17:51:19Z&quot;, GoVersion:&quot;go1.15.5&quot;, Compiler:&quot;gc&quot;, Platform:&quot;linux&#x2F;amd64&quot;&#125;</span><br></pre></td></tr></table></figure>\nserver version需要minikube有安裝才會出現<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;kubectl get nodes</span><br><span class=\"line\">NAME       STATUS   ROLES                  AGE   VERSION</span><br><span class=\"line\">minikube   Ready    control-plane,master   3d    v1.20.0</span><br></pre></td></tr></table></figure>\nPS C:&gt; minikube dashboard<br>Opening kubernetes dashboard in default browser…</li>\n</ul>\n<p>啟動 minikube 之後，我們可以透過 kubectl run 在 minikube 上運行一個 Google 提供的 hello-minikube docker image，</p>\n<p>$ kubectl create deployment first-deployment –image=katacoda/docker-http-server<br>deployment.apps/first-deployment created<br>$ kubectl get pods<br>NAME                               READY   STATUS    RESTARTS   AGE<br>first-deployment-8cbf74484-xgc4l   1/1     Running   0          25s</p>\n<p>在 minikube 上透過 kubectl get</p>\n<p>來自 <a href=\"https://ithelp.ithome.com.tw/articles/10197186\">https://ithelp.ithome.com.tw/articles/10197186</a> </p>\n<p>D:\\k8syaml&gt;kubectl get namespaces<br>NAME              STATUS   AGE<br>default           Active   7m52s<br>kube-node-lease   Active   7m53s<br>kube-public       Active   7m53s<br>kube-system       Active   7m53s</p>\n<p>Create a new Namespaces<br>D:\\k8syaml&gt;kubectl create namespace eda<br>namespace/eda created</p>\n<p>建立deployment<br><a href=\"https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/\">https://kubernetes.io/zh/docs/concepts/workloads/controllers/deployment/</a><br>D:\\k8syaml&gt;kubectl create -f my-first-pod.yaml   編輯要部屬的程式<br>deployment.apps/my-pod created</p>\n<p>D:\\k8syaml&gt;kubectl get pods<br>No resources found in default namespace.</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           my-pod-5b788d95bc-kx76k            0/1     Error     0          46s  建立不成功因為有相依<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          10m<br>kube-system   etcd-minikube                      1/1     Running   0          10m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          10m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          10m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          10m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          10m<br>kube-system   storage-provisioner                1/1     Running   0          10m</p>\n<p>看LOG<br>kubectl -n eda logs my-pod-5b788d95bc-kx76k</p>\n<p>D:\\k8syaml&gt;kubectl delete deployment my-pod -n eda  先刪除<br>deployment.apps “my-pod” deleted</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS        RESTARTS   AGE<br>eda           my-pod-5b788d95bc-kx76k            0/1     Terminating   5          6m20s<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running       0          16m<br>kube-system   etcd-minikube                      1/1     Running       0          16m<br>kube-system   kube-apiserver-minikube            1/1     Running       0          16m<br>kube-system   kube-controller-manager-minikube   1/1     Running       0          16m<br>kube-system   kube-proxy-skl6r                   1/1     Running       0          16m<br>kube-system   kube-scheduler-minikube            1/1     Running       0          16m<br>kube-system   storage-provisioner                1/1     Running       0          16m</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          16m<br>kube-system   etcd-minikube                      1/1     Running   0          16m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          16m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          16m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          16m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          16m<br>kube-system   storage-provisioner                1/1     Running   0          16m</p>\n<p>D:\\k8syaml&gt;kubectl create -f my-first-nginx179.yaml //重新建立一個<br>deployment.apps/nginx179 created</p>\n<p>D:\\k8syaml&gt;kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-75c6f6f5b8-bwzgm          1/1     Running   0          98s  //啟動成功<br>kube-system   coredns-74ff55c5b-wf484            1/1     Running   0          20m<br>kube-system   etcd-minikube                      1/1     Running   0          20m<br>kube-system   kube-apiserver-minikube            1/1     Running   0          20m<br>kube-system   kube-controller-manager-minikube   1/1     Running   0          20m<br>kube-system   kube-proxy-skl6r                   1/1     Running   0          20m<br>kube-system   kube-scheduler-minikube            1/1     Running   0          20m<br>kube-system   storage-provisioner                1/1     Running   0          20m</p>\n<p>D:\\k8syaml&gt;kubectl -n eda rollout restart deployment  nginx179   執行重開指令<br>deployment.apps/nginx179 restarted   </p>\n<p>編輯一樣可以達到重開效果<br>kubectl edit deployment -n eda  nginx179<br>kubectl get pod -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>eda           nginx179-5ddfbfccb8-76qz8          1/1     Running   0          84s//啟動成功</p>\n<p>建立stateful<br><a href=\"https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/\">https://kubernetes.io/zh/docs/tutorials/stateful-application/basic-stateful-set/</a></p>\n<p>D:\\k8syaml&gt;kubectl apply -f my-web.yaml<br>service/nginx created<br>statefulset.apps/web created<br>D:\\k8syaml&gt;kubectl get pods -A<br>NAMESPACE     NAME                               READY   STATUS    RESTARTS   AGE<br>default       web-0                              1/1     Running   0          39s<br>default       web-1                              1/1     Running   0          27s</p>\n<p>D:\\k8syaml&gt;kubectl delete pod -l app=nginx<br>pod “web-0” deleted<br>pod “web-1” deleted</p>\n<p>D:\\k8syaml&gt;kubectl apply -f my-web.yaml<br>service/nginx unchanged<br>statefulset.apps/web created</p>\n<p>D:\\k8syaml&gt;kubectl edit statefulset -n eda  my-web<br>Edit cancelled, no changes made.</p>"},{"title":"[cloud]紀錄雲端儲存服務MinIO與Amazon S3開發筆記","date":"2021-04-28T11:26:23.000Z","_content":"\n\n>簡單紀錄雲端儲存服務MinIO與Amazon S3與使用GO SDK開發筆記\" \n\n\n<!--more-->\n\n\n## Amazon Web Services (AWS) S3\n\n*Amazon Web Services (AWS) S3，全名為亞馬遜簡易儲存服務，是亞馬遜公司利用其亞馬遜網路服務系統所提供的網路線上儲存服務。(目前可申請免費12個月)，沒有限制，就是用多少付多少錢，可以設定 Billing alert．\n\n\n如果你有申請AWS帳號，可以用AWS SDK操作上傳到AWS S3，\ns3沒有免費開發模擬器，只能註冊使用，但有其他可替代的兼容服務。\n剛開始開發時因為沒有申請帳號，所以使用minIO替代．\n\n\n## minIO\n> MinIO是與Amazon S3兼容的服務器端存儲協議，可以處理最大對像大小為5TB的非結構化數據，例如照片，視頻，日誌文件，備份和容器映像，並附帶web ui介面。\n官方文檔:https://docs.min.io/cn/\n### minIO server\n#### 1.自行建立安裝minIO server\n各種安裝方式:https://docs.min.io/cn/minio-quickstart-guide.html\n\n\n- Windows系统 執行檔安裝\nhttps://dl.min.io/server/minio/release/windows-amd64/minio.exe\n```\n執行minio.exe server D:\\Photos\n預設開啟9000\nRootUser: minioadmin\nRootPass: minioadmin\n```\n\n- Windows docker\n```\ndocker run -p 9000:9000 --name minio1 -v D:\\data:/data -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" minio/minio server /data\n```\n\n1.接著開啟:http://127.0.0.1:9000/，輸入上面的資訊就可以登入，\n2.新增一個bucket，\n3.然後上傳檔案成功，\n4.上傳的檔案就會出現在 D:\\data裡。\n\n但簡單建立的版本並沒有Https，設定上教學裡的win載點已不在..，有興趣可以看這篇安裝:[使用TLS安全的访问Minio服务](https://docs.min.io/cn/how-to-secure-access-to-minio-server-with-tls.html)\n\n*HTTPS經由HTTP進行通訊，但利用SSL/TLS來加密封包\n\n-------------------------------\n#### 2.使用官方提供建立好的minIO server  \n\n```\nhttps://play.min.io\n Play uses access_key_id Q3AM3UQ867SPQQA43P2F, secret_access_key zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG.\nGUI操作:https://play.min.io/\n```\n\n### minIO client\n#### mc\nMinIO Client (mc)为ls，cat，cp，mirror，diff，find等UNIX命令提供了一种替代方案。它支持文件系统和兼容Amazon S3的云存储服务（AWS Signature v2和v4）。\n\n有興趣可以至[MinIO客户端快速入门指南](https://docs.min.io/cn/minio-client-quickstart-guide.html)\n\n#### minIO SDK\n自行寫程式撰寫，範例:[Golang-minIO](https://docs.min.io/cn/golang-client-quickstart-guide.html)\n- 首先使用minio-go\n```\ngo get -u github.com/minio/minio-go\n```\n\n- 加入範例\n自行替換以下endpoint/accessKeyID/secretAccessKey/useSSL資訊\n```go 這個範例是使用minIO的SDK的範例  https://docs.min.io/cn/golang-client-quickstart-guide.html golang-client-quickstart-guide\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\tminio \"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n//1.先要建立minIO server\nfunc main() {\n\t// endpoint := \"play.min.io\"\n\t// accessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\t// secretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\t//useSSL := true\n\tendpoint := \"127.0.0.1:9000\"\n\taccessKeyID := \"AKIAIOSFODNN7EXAMPLE\"\n\tsecretAccessKey := \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n\tuseSSL := false //error http: server gave HTTP response to HTTPS client\n\n\t// 初使化 minio client对象。\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"err\\n\")\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"ok\\n\") // minioClient初使化成功\n\n\t// 创建一个叫mymusic的存储桶。\n\tbucketName := \"test11\"\n\tlocation := \"us-east-1\"\n\tctx := context.Background()\n\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions{Region: location})\n\tif err != nil {\n\t\t// 检查存储桶是否已经存在。\n\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)\n\t\tif errBucketExists == nil && exists {\n\t\t\tlog.Printf(\"We already own %s\\n\", bucketName)\n\t\t} else {\n\t\t\tlog.Printf(\"err\\n\")\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t} else {\n\t\tlog.Printf(\"Successfully created %s\\n\", bucketName)\n\t}\n\n\t// 上传一个zip文件。\n\tobjectName := \"ssss.zip\"\n\tfilePath := \"./ssss.zip\"\n\tcontentType := \"application/zip\"\n\n\t// 使用FPutObject上传一个zip文件。\n\tn, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"Successfully uploaded %s of size %d\\n\", objectName, n)\n\n}\n\n```\n\n\n\n####  AWS SDK\n如果你有用AWS S3的SDK，一樣可以使用它撰寫程式連結到minIO的server，\nMinIO官方範例:[How to use AWS SDK for Go with MinIO Server](https://docs.min.io/docs/how-to-use-aws-sdk-for-go-with-minio-server.html)，不過該AWS ADK已經有V2了，如果用V2版需要再改一下自行定義資訊的寫法[Overriding Endpoint with Fallback](https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/endpoints/)，或是讀取AWS config的本地Credentials資訊。\n\n##### 產生Credentials \n[組態與登入資料檔案設定](https://docs.aws.amazon.com/zh_tw/cli/latest/userguide/cli-configure-files.html)\n Windows 中是使用環境變數 %UserProfile% (通常是c:/users/xxx)來參考，而在 Unix 系統中是使用 $HOME 或 ~ (波狀符號) 來參考\n- 可以下載AWS CLI 來幫你產生這些檔案\n- minIO server的產生方式可以看這篇[AWS CLI with MinIO Server](https://docs.min.io/docs/aws-cli-with-minio.html)\n\n測試用aws CLI列出buckets\n```shell \n>aws configure\nAWS Access Key ID [****************MPLE]: Q3AM3UQ867SPQQA43P2F\nAWS Secret Access Key [****************EKEY]: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\nDefault region name [us-east-1]:\nDefault output format [None]:\n\n>aws configure set default.s3.signature_version s3v4\n\n>aws --endpoint-url https://play.min.io s3 ls\n\n2021-04-06 00:05:40 00dst1\n2021-04-06 00:05:53 00dst2\n(略)\n```\n\n\n\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [amazon-s3開發是否有免費帳號](https://stackoverflow.com/questions/1375285/amazon-s3-developer-free-account-for-testing-purposes)\n","source":"_posts/aws-s3.md","raw":"---\ntitle: \"[cloud]紀錄雲端儲存服務MinIO與Amazon S3開發筆記\"\ntags:\n  - cloud\n  - storage\n  - aws-s3\n  - MinIO\ncategories:\n  - Tech.\n  - cloud\n  - storage\ndate: 2021-04-28 19:26:23\n---\n\n\n>簡單紀錄雲端儲存服務MinIO與Amazon S3與使用GO SDK開發筆記\" \n\n\n<!--more-->\n\n\n## Amazon Web Services (AWS) S3\n\n*Amazon Web Services (AWS) S3，全名為亞馬遜簡易儲存服務，是亞馬遜公司利用其亞馬遜網路服務系統所提供的網路線上儲存服務。(目前可申請免費12個月)，沒有限制，就是用多少付多少錢，可以設定 Billing alert．\n\n\n如果你有申請AWS帳號，可以用AWS SDK操作上傳到AWS S3，\ns3沒有免費開發模擬器，只能註冊使用，但有其他可替代的兼容服務。\n剛開始開發時因為沒有申請帳號，所以使用minIO替代．\n\n\n## minIO\n> MinIO是與Amazon S3兼容的服務器端存儲協議，可以處理最大對像大小為5TB的非結構化數據，例如照片，視頻，日誌文件，備份和容器映像，並附帶web ui介面。\n官方文檔:https://docs.min.io/cn/\n### minIO server\n#### 1.自行建立安裝minIO server\n各種安裝方式:https://docs.min.io/cn/minio-quickstart-guide.html\n\n\n- Windows系统 執行檔安裝\nhttps://dl.min.io/server/minio/release/windows-amd64/minio.exe\n```\n執行minio.exe server D:\\Photos\n預設開啟9000\nRootUser: minioadmin\nRootPass: minioadmin\n```\n\n- Windows docker\n```\ndocker run -p 9000:9000 --name minio1 -v D:\\data:/data -e \"MINIO_ROOT_USER=AKIAIOSFODNN7EXAMPLE\" -e \"MINIO_ROOT_PASSWORD=wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\" minio/minio server /data\n```\n\n1.接著開啟:http://127.0.0.1:9000/，輸入上面的資訊就可以登入，\n2.新增一個bucket，\n3.然後上傳檔案成功，\n4.上傳的檔案就會出現在 D:\\data裡。\n\n但簡單建立的版本並沒有Https，設定上教學裡的win載點已不在..，有興趣可以看這篇安裝:[使用TLS安全的访问Minio服务](https://docs.min.io/cn/how-to-secure-access-to-minio-server-with-tls.html)\n\n*HTTPS經由HTTP進行通訊，但利用SSL/TLS來加密封包\n\n-------------------------------\n#### 2.使用官方提供建立好的minIO server  \n\n```\nhttps://play.min.io\n Play uses access_key_id Q3AM3UQ867SPQQA43P2F, secret_access_key zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG.\nGUI操作:https://play.min.io/\n```\n\n### minIO client\n#### mc\nMinIO Client (mc)为ls，cat，cp，mirror，diff，find等UNIX命令提供了一种替代方案。它支持文件系统和兼容Amazon S3的云存储服务（AWS Signature v2和v4）。\n\n有興趣可以至[MinIO客户端快速入门指南](https://docs.min.io/cn/minio-client-quickstart-guide.html)\n\n#### minIO SDK\n自行寫程式撰寫，範例:[Golang-minIO](https://docs.min.io/cn/golang-client-quickstart-guide.html)\n- 首先使用minio-go\n```\ngo get -u github.com/minio/minio-go\n```\n\n- 加入範例\n自行替換以下endpoint/accessKeyID/secretAccessKey/useSSL資訊\n```go 這個範例是使用minIO的SDK的範例  https://docs.min.io/cn/golang-client-quickstart-guide.html golang-client-quickstart-guide\npackage main\n\nimport (\n\t\"context\"\n\t\"log\"\n\tminio \"github.com/minio/minio-go/v7\"\n\t\"github.com/minio/minio-go/v7/pkg/credentials\"\n)\n//1.先要建立minIO server\nfunc main() {\n\t// endpoint := \"play.min.io\"\n\t// accessKeyID := \"Q3AM3UQ867SPQQA43P2F\"\n\t// secretAccessKey := \"zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\"\n\t//useSSL := true\n\tendpoint := \"127.0.0.1:9000\"\n\taccessKeyID := \"AKIAIOSFODNN7EXAMPLE\"\n\tsecretAccessKey := \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\"\n\tuseSSL := false //error http: server gave HTTP response to HTTPS client\n\n\t// 初使化 minio client对象。\n\tminioClient, err := minio.New(endpoint, &minio.Options{\n\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, \"\"),\n\t\tSecure: useSSL,\n\t})\n\tif err != nil {\n\t\tlog.Printf(\"err\\n\")\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"ok\\n\") // minioClient初使化成功\n\n\t// 创建一个叫mymusic的存储桶。\n\tbucketName := \"test11\"\n\tlocation := \"us-east-1\"\n\tctx := context.Background()\n\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions{Region: location})\n\tif err != nil {\n\t\t// 检查存储桶是否已经存在。\n\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)\n\t\tif errBucketExists == nil && exists {\n\t\t\tlog.Printf(\"We already own %s\\n\", bucketName)\n\t\t} else {\n\t\t\tlog.Printf(\"err\\n\")\n\t\t\tlog.Fatalln(err)\n\t\t}\n\t} else {\n\t\tlog.Printf(\"Successfully created %s\\n\", bucketName)\n\t}\n\n\t// 上传一个zip文件。\n\tobjectName := \"ssss.zip\"\n\tfilePath := \"./ssss.zip\"\n\tcontentType := \"application/zip\"\n\n\t// 使用FPutObject上传一个zip文件。\n\tn, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions{ContentType: contentType})\n\tif err != nil {\n\t\tlog.Fatalln(err)\n\t}\n\n\tlog.Printf(\"Successfully uploaded %s of size %d\\n\", objectName, n)\n\n}\n\n```\n\n\n\n####  AWS SDK\n如果你有用AWS S3的SDK，一樣可以使用它撰寫程式連結到minIO的server，\nMinIO官方範例:[How to use AWS SDK for Go with MinIO Server](https://docs.min.io/docs/how-to-use-aws-sdk-for-go-with-minio-server.html)，不過該AWS ADK已經有V2了，如果用V2版需要再改一下自行定義資訊的寫法[Overriding Endpoint with Fallback](https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/endpoints/)，或是讀取AWS config的本地Credentials資訊。\n\n##### 產生Credentials \n[組態與登入資料檔案設定](https://docs.aws.amazon.com/zh_tw/cli/latest/userguide/cli-configure-files.html)\n Windows 中是使用環境變數 %UserProfile% (通常是c:/users/xxx)來參考，而在 Unix 系統中是使用 $HOME 或 ~ (波狀符號) 來參考\n- 可以下載AWS CLI 來幫你產生這些檔案\n- minIO server的產生方式可以看這篇[AWS CLI with MinIO Server](https://docs.min.io/docs/aws-cli-with-minio.html)\n\n測試用aws CLI列出buckets\n```shell \n>aws configure\nAWS Access Key ID [****************MPLE]: Q3AM3UQ867SPQQA43P2F\nAWS Secret Access Key [****************EKEY]: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG\nDefault region name [us-east-1]:\nDefault output format [None]:\n\n>aws configure set default.s3.signature_version s3v4\n\n>aws --endpoint-url https://play.min.io s3 ls\n\n2021-04-06 00:05:40 00dst1\n2021-04-06 00:05:53 00dst2\n(略)\n```\n\n\n\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [amazon-s3開發是否有免費帳號](https://stackoverflow.com/questions/1375285/amazon-s3-developer-free-account-for-testing-purposes)\n","slug":"aws-s3","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhai000ukp2x1tps0bfo","content":"<blockquote>\n<p>簡單紀錄雲端儲存服務MinIO與Amazon S3與使用GO SDK開發筆記” </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h2 id=\"Amazon-Web-Services-AWS-S3\"><a href=\"#Amazon-Web-Services-AWS-S3\" class=\"headerlink\" title=\"Amazon Web Services (AWS) S3\"></a>Amazon Web Services (AWS) S3</h2><p>*Amazon Web Services (AWS) S3，全名為亞馬遜簡易儲存服務，是亞馬遜公司利用其亞馬遜網路服務系統所提供的網路線上儲存服務。(目前可申請免費12個月)，沒有限制，就是用多少付多少錢，可以設定 Billing alert．</p>\n<p>如果你有申請AWS帳號，可以用AWS SDK操作上傳到AWS S3，<br>s3沒有免費開發模擬器，只能註冊使用，但有其他可替代的兼容服務。<br>剛開始開發時因為沒有申請帳號，所以使用minIO替代．</p>\n<h2 id=\"minIO\"><a href=\"#minIO\" class=\"headerlink\" title=\"minIO\"></a>minIO</h2><blockquote>\n<p>MinIO是與Amazon S3兼容的服務器端存儲協議，可以處理最大對像大小為5TB的非結構化數據，例如照片，視頻，日誌文件，備份和容器映像，並附帶web ui介面。<br>官方文檔:<a href=\"https://docs.min.io/cn/\">https://docs.min.io/cn/</a></p>\n</blockquote>\n<h3 id=\"minIO-server\"><a href=\"#minIO-server\" class=\"headerlink\" title=\"minIO server\"></a>minIO server</h3><h4 id=\"1-自行建立安裝minIO-server\"><a href=\"#1-自行建立安裝minIO-server\" class=\"headerlink\" title=\"1.自行建立安裝minIO server\"></a>1.自行建立安裝minIO server</h4><p>各種安裝方式:<a href=\"https://docs.min.io/cn/minio-quickstart-guide.html\">https://docs.min.io/cn/minio-quickstart-guide.html</a></p>\n<ul>\n<li>Windows系统 執行檔安裝<br><a href=\"https://dl.min.io/server/minio/release/windows-amd64/minio.exe\">https://dl.min.io/server/minio/release/windows-amd64/minio.exe</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">執行minio.exe server D:\\Photos</span><br><span class=\"line\">預設開啟9000</span><br><span class=\"line\">RootUser: minioadmin</span><br><span class=\"line\">RootPass: minioadmin</span><br></pre></td></tr></table></figure></li>\n<li>Windows docker<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 --name minio1 -v D:\\data:&#x2F;data -e &quot;MINIO_ROOT_USER&#x3D;AKIAIOSFODNN7EXAMPLE&quot; -e &quot;MINIO_ROOT_PASSWORD&#x3D;wJalrXUtnFEMI&#x2F;K7MDENG&#x2F;bPxRfiCYEXAMPLEKEY&quot; minio&#x2F;minio server &#x2F;data</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>1.接著開啟:<a href=\"http://127.0.0.1:9000/%EF%BC%8C%E8%BC%B8%E5%85%A5%E4%B8%8A%E9%9D%A2%E7%9A%84%E8%B3%87%E8%A8%8A%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%99%BB%E5%85%A5%EF%BC%8C\">http://127.0.0.1:9000/，輸入上面的資訊就可以登入，</a><br>2.新增一個bucket，<br>3.然後上傳檔案成功，<br>4.上傳的檔案就會出現在 D:\\data裡。</p>\n<p>但簡單建立的版本並沒有Https，設定上教學裡的win載點已不在..，有興趣可以看這篇安裝:<a href=\"https://docs.min.io/cn/how-to-secure-access-to-minio-server-with-tls.html\">使用TLS安全的访问Minio服务</a></p>\n<p>*HTTPS經由HTTP進行通訊，但利用SSL/TLS來加密封包</p>\n<hr>\n<h4 id=\"2-使用官方提供建立好的minIO-server\"><a href=\"#2-使用官方提供建立好的minIO-server\" class=\"headerlink\" title=\"2.使用官方提供建立好的minIO server\"></a>2.使用官方提供建立好的minIO server</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;play.min.io</span><br><span class=\"line\"> Play uses access_key_id Q3AM3UQ867SPQQA43P2F, secret_access_key zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG.</span><br><span class=\"line\">GUI操作:https:&#x2F;&#x2F;play.min.io&#x2F;</span><br></pre></td></tr></table></figure>\n<h3 id=\"minIO-client\"><a href=\"#minIO-client\" class=\"headerlink\" title=\"minIO client\"></a>minIO client</h3><h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>MinIO Client (mc)为ls，cat，cp，mirror，diff，find等UNIX命令提供了一种替代方案。它支持文件系统和兼容Amazon S3的云存储服务（AWS Signature v2和v4）。</p>\n<p>有興趣可以至<a href=\"https://docs.min.io/cn/minio-client-quickstart-guide.html\">MinIO客户端快速入门指南</a></p>\n<h4 id=\"minIO-SDK\"><a href=\"#minIO-SDK\" class=\"headerlink\" title=\"minIO SDK\"></a>minIO SDK</h4><p>自行寫程式撰寫，範例:<a href=\"https://docs.min.io/cn/golang-client-quickstart-guide.html\">Golang-minIO</a></p>\n<ul>\n<li>首先使用minio-go<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com&#x2F;minio&#x2F;minio-go</span><br></pre></td></tr></table></figure></li>\n<li>加入範例<br>自行替換以下endpoint/accessKeyID/secretAccessKey/useSSL資訊<figure class=\"highlight go\"><figcaption><span>這個範例是使用minIO的SDK的範例</span><a href=\"https://docs.min.io/cn/golang-client-quickstart-guide.html\">golang-client-quickstart-guide</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\tminio <span class=\"string\">&quot;github.com/minio/minio-go/v7&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/minio/minio-go/v7/pkg/credentials&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//1.先要建立minIO server</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// endpoint := &quot;play.min.io&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// accessKeyID := &quot;Q3AM3UQ867SPQQA43P2F&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// secretAccessKey := &quot;zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//useSSL := true</span></span><br><span class=\"line\">\tendpoint := <span class=\"string\">&quot;127.0.0.1:9000&quot;</span></span><br><span class=\"line\">\taccessKeyID := <span class=\"string\">&quot;AKIAIOSFODNN7EXAMPLE&quot;</span></span><br><span class=\"line\">\tsecretAccessKey := <span class=\"string\">&quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;</span></span><br><span class=\"line\">\tuseSSL := <span class=\"literal\">false</span> <span class=\"comment\">//error http: server gave HTTP response to HTTPS client</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初使化 minio client对象。</span></span><br><span class=\"line\">\tminioClient, err := minio.New(endpoint, &amp;minio.Options&#123;</span><br><span class=\"line\">\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">\t\tSecure: useSSL,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;err\\n&quot;</span>)</span><br><span class=\"line\">\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;ok\\n&quot;</span>) <span class=\"comment\">// minioClient初使化成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个叫mymusic的存储桶。</span></span><br><span class=\"line\">\tbucketName := <span class=\"string\">&quot;test11&quot;</span></span><br><span class=\"line\">\tlocation := <span class=\"string\">&quot;us-east-1&quot;</span></span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions&#123;Region: location&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 检查存储桶是否已经存在。</span></span><br><span class=\"line\">\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> errBucketExists == <span class=\"literal\">nil</span> &amp;&amp; exists &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;We already own %s\\n&quot;</span>, bucketName)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;err\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;Successfully created %s\\n&quot;</span>, bucketName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 上传一个zip文件。</span></span><br><span class=\"line\">\tobjectName := <span class=\"string\">&quot;ssss.zip&quot;</span></span><br><span class=\"line\">\tfilePath := <span class=\"string\">&quot;./ssss.zip&quot;</span></span><br><span class=\"line\">\tcontentType := <span class=\"string\">&quot;application/zip&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用FPutObject上传一个zip文件。</span></span><br><span class=\"line\">\tn, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions&#123;ContentType: contentType&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Successfully uploaded %s of size %d\\n&quot;</span>, objectName, n)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"AWS-SDK\"><a href=\"#AWS-SDK\" class=\"headerlink\" title=\"AWS SDK\"></a>AWS SDK</h4><p>如果你有用AWS S3的SDK，一樣可以使用它撰寫程式連結到minIO的server，<br>MinIO官方範例:<a href=\"https://docs.min.io/docs/how-to-use-aws-sdk-for-go-with-minio-server.html\">How to use AWS SDK for Go with MinIO Server</a>，不過該AWS ADK已經有V2了，如果用V2版需要再改一下自行定義資訊的寫法<a href=\"https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/endpoints/\">Overriding Endpoint with Fallback</a>，或是讀取AWS config的本地Credentials資訊。</p>\n<h5 id=\"產生Credentials\"><a href=\"#產生Credentials\" class=\"headerlink\" title=\"產生Credentials\"></a>產生Credentials</h5><p><a href=\"https://docs.aws.amazon.com/zh_tw/cli/latest/userguide/cli-configure-files.html\">組態與登入資料檔案設定</a><br> Windows 中是使用環境變數 %UserProfile% (通常是c:/users/xxx)來參考，而在 Unix 系統中是使用 $HOME 或 ~ (波狀符號) 來參考</p>\n<ul>\n<li>可以下載AWS CLI 來幫你產生這些檔案</li>\n<li>minIO server的產生方式可以看這篇<a href=\"https://docs.min.io/docs/aws-cli-with-minio.html\">AWS CLI with MinIO Server</a></li>\n</ul>\n<p>測試用aws CLI列出buckets</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws configure</span></span><br><span class=\"line\">AWS Access Key ID [****************MPLE]: Q3AM3UQ867SPQQA43P2F</span><br><span class=\"line\">AWS Secret Access Key [****************EKEY]: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG</span><br><span class=\"line\">Default region name [us-east-1]:</span><br><span class=\"line\">Default output format [None]:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws configure <span class=\"built_in\">set</span> default.s3.signature_version s3v4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws --endpoint-url https://play.min.io s3 ls</span></span><br><span class=\"line\"></span><br><span class=\"line\">2021-04-06 00:05:40 00dst1</span><br><span class=\"line\">2021-04-06 00:05:53 00dst2</span><br><span class=\"line\">(略)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1375285/amazon-s3-developer-free-account-for-testing-purposes\">amazon-s3開發是否有免費帳號</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>簡單紀錄雲端儲存服務MinIO與Amazon S3與使用GO SDK開發筆記” </p>\n</blockquote>","more":"<h2 id=\"Amazon-Web-Services-AWS-S3\"><a href=\"#Amazon-Web-Services-AWS-S3\" class=\"headerlink\" title=\"Amazon Web Services (AWS) S3\"></a>Amazon Web Services (AWS) S3</h2><p>*Amazon Web Services (AWS) S3，全名為亞馬遜簡易儲存服務，是亞馬遜公司利用其亞馬遜網路服務系統所提供的網路線上儲存服務。(目前可申請免費12個月)，沒有限制，就是用多少付多少錢，可以設定 Billing alert．</p>\n<p>如果你有申請AWS帳號，可以用AWS SDK操作上傳到AWS S3，<br>s3沒有免費開發模擬器，只能註冊使用，但有其他可替代的兼容服務。<br>剛開始開發時因為沒有申請帳號，所以使用minIO替代．</p>\n<h2 id=\"minIO\"><a href=\"#minIO\" class=\"headerlink\" title=\"minIO\"></a>minIO</h2><blockquote>\n<p>MinIO是與Amazon S3兼容的服務器端存儲協議，可以處理最大對像大小為5TB的非結構化數據，例如照片，視頻，日誌文件，備份和容器映像，並附帶web ui介面。<br>官方文檔:<a href=\"https://docs.min.io/cn/\">https://docs.min.io/cn/</a></p>\n</blockquote>\n<h3 id=\"minIO-server\"><a href=\"#minIO-server\" class=\"headerlink\" title=\"minIO server\"></a>minIO server</h3><h4 id=\"1-自行建立安裝minIO-server\"><a href=\"#1-自行建立安裝minIO-server\" class=\"headerlink\" title=\"1.自行建立安裝minIO server\"></a>1.自行建立安裝minIO server</h4><p>各種安裝方式:<a href=\"https://docs.min.io/cn/minio-quickstart-guide.html\">https://docs.min.io/cn/minio-quickstart-guide.html</a></p>\n<ul>\n<li>Windows系统 執行檔安裝<br><a href=\"https://dl.min.io/server/minio/release/windows-amd64/minio.exe\">https://dl.min.io/server/minio/release/windows-amd64/minio.exe</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">執行minio.exe server D:\\Photos</span><br><span class=\"line\">預設開啟9000</span><br><span class=\"line\">RootUser: minioadmin</span><br><span class=\"line\">RootPass: minioadmin</span><br></pre></td></tr></table></figure></li>\n<li>Windows docker<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -p 9000:9000 --name minio1 -v D:\\data:&#x2F;data -e &quot;MINIO_ROOT_USER&#x3D;AKIAIOSFODNN7EXAMPLE&quot; -e &quot;MINIO_ROOT_PASSWORD&#x3D;wJalrXUtnFEMI&#x2F;K7MDENG&#x2F;bPxRfiCYEXAMPLEKEY&quot; minio&#x2F;minio server &#x2F;data</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>1.接著開啟:<a href=\"http://127.0.0.1:9000/%EF%BC%8C%E8%BC%B8%E5%85%A5%E4%B8%8A%E9%9D%A2%E7%9A%84%E8%B3%87%E8%A8%8A%E5%B0%B1%E5%8F%AF%E4%BB%A5%E7%99%BB%E5%85%A5%EF%BC%8C\">http://127.0.0.1:9000/，輸入上面的資訊就可以登入，</a><br>2.新增一個bucket，<br>3.然後上傳檔案成功，<br>4.上傳的檔案就會出現在 D:\\data裡。</p>\n<p>但簡單建立的版本並沒有Https，設定上教學裡的win載點已不在..，有興趣可以看這篇安裝:<a href=\"https://docs.min.io/cn/how-to-secure-access-to-minio-server-with-tls.html\">使用TLS安全的访问Minio服务</a></p>\n<p>*HTTPS經由HTTP進行通訊，但利用SSL/TLS來加密封包</p>\n<hr>\n<h4 id=\"2-使用官方提供建立好的minIO-server\"><a href=\"#2-使用官方提供建立好的minIO-server\" class=\"headerlink\" title=\"2.使用官方提供建立好的minIO server\"></a>2.使用官方提供建立好的minIO server</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;play.min.io</span><br><span class=\"line\"> Play uses access_key_id Q3AM3UQ867SPQQA43P2F, secret_access_key zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG.</span><br><span class=\"line\">GUI操作:https:&#x2F;&#x2F;play.min.io&#x2F;</span><br></pre></td></tr></table></figure>\n<h3 id=\"minIO-client\"><a href=\"#minIO-client\" class=\"headerlink\" title=\"minIO client\"></a>minIO client</h3><h4 id=\"mc\"><a href=\"#mc\" class=\"headerlink\" title=\"mc\"></a>mc</h4><p>MinIO Client (mc)为ls，cat，cp，mirror，diff，find等UNIX命令提供了一种替代方案。它支持文件系统和兼容Amazon S3的云存储服务（AWS Signature v2和v4）。</p>\n<p>有興趣可以至<a href=\"https://docs.min.io/cn/minio-client-quickstart-guide.html\">MinIO客户端快速入门指南</a></p>\n<h4 id=\"minIO-SDK\"><a href=\"#minIO-SDK\" class=\"headerlink\" title=\"minIO SDK\"></a>minIO SDK</h4><p>自行寫程式撰寫，範例:<a href=\"https://docs.min.io/cn/golang-client-quickstart-guide.html\">Golang-minIO</a></p>\n<ul>\n<li>首先使用minio-go<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">go get -u github.com&#x2F;minio&#x2F;minio-go</span><br></pre></td></tr></table></figure></li>\n<li>加入範例<br>自行替換以下endpoint/accessKeyID/secretAccessKey/useSSL資訊<figure class=\"highlight go\"><figcaption><span>這個範例是使用minIO的SDK的範例</span><a href=\"https://docs.min.io/cn/golang-client-quickstart-guide.html\">golang-client-quickstart-guide</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">package</span> main</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> (</span><br><span class=\"line\">\t<span class=\"string\">&quot;context&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;log&quot;</span></span><br><span class=\"line\">\tminio <span class=\"string\">&quot;github.com/minio/minio-go/v7&quot;</span></span><br><span class=\"line\">\t<span class=\"string\">&quot;github.com/minio/minio-go/v7/pkg/credentials&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\"><span class=\"comment\">//1.先要建立minIO server</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">main</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">\t<span class=\"comment\">// endpoint := &quot;play.min.io&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// accessKeyID := &quot;Q3AM3UQ867SPQQA43P2F&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">// secretAccessKey := &quot;zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG&quot;</span></span><br><span class=\"line\">\t<span class=\"comment\">//useSSL := true</span></span><br><span class=\"line\">\tendpoint := <span class=\"string\">&quot;127.0.0.1:9000&quot;</span></span><br><span class=\"line\">\taccessKeyID := <span class=\"string\">&quot;AKIAIOSFODNN7EXAMPLE&quot;</span></span><br><span class=\"line\">\tsecretAccessKey := <span class=\"string\">&quot;wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY&quot;</span></span><br><span class=\"line\">\tuseSSL := <span class=\"literal\">false</span> <span class=\"comment\">//error http: server gave HTTP response to HTTPS client</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 初使化 minio client对象。</span></span><br><span class=\"line\">\tminioClient, err := minio.New(endpoint, &amp;minio.Options&#123;</span><br><span class=\"line\">\t\tCreds:  credentials.NewStaticV4(accessKeyID, secretAccessKey, <span class=\"string\">&quot;&quot;</span>),</span><br><span class=\"line\">\t\tSecure: useSSL,</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;err\\n&quot;</span>)</span><br><span class=\"line\">\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;ok\\n&quot;</span>) <span class=\"comment\">// minioClient初使化成功</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 创建一个叫mymusic的存储桶。</span></span><br><span class=\"line\">\tbucketName := <span class=\"string\">&quot;test11&quot;</span></span><br><span class=\"line\">\tlocation := <span class=\"string\">&quot;us-east-1&quot;</span></span><br><span class=\"line\">\tctx := context.Background()</span><br><span class=\"line\">\terr = minioClient.MakeBucket(ctx, bucketName, minio.MakeBucketOptions&#123;Region: location&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// 检查存储桶是否已经存在。</span></span><br><span class=\"line\">\t\texists, errBucketExists := minioClient.BucketExists(ctx, bucketName)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> errBucketExists == <span class=\"literal\">nil</span> &amp;&amp; exists &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;We already own %s\\n&quot;</span>, bucketName)</span><br><span class=\"line\">\t\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\tlog.Printf(<span class=\"string\">&quot;err\\n&quot;</span>)</span><br><span class=\"line\">\t\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\tlog.Printf(<span class=\"string\">&quot;Successfully created %s\\n&quot;</span>, bucketName)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 上传一个zip文件。</span></span><br><span class=\"line\">\tobjectName := <span class=\"string\">&quot;ssss.zip&quot;</span></span><br><span class=\"line\">\tfilePath := <span class=\"string\">&quot;./ssss.zip&quot;</span></span><br><span class=\"line\">\tcontentType := <span class=\"string\">&quot;application/zip&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\">\t<span class=\"comment\">// 使用FPutObject上传一个zip文件。</span></span><br><span class=\"line\">\tn, err := minioClient.FPutObject(ctx, bucketName, objectName, filePath, minio.PutObjectOptions&#123;ContentType: contentType&#125;)</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> err != <span class=\"literal\">nil</span> &#123;</span><br><span class=\"line\">\t\tlog.Fatalln(err)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tlog.Printf(<span class=\"string\">&quot;Successfully uploaded %s of size %d\\n&quot;</span>, objectName, n)</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h4 id=\"AWS-SDK\"><a href=\"#AWS-SDK\" class=\"headerlink\" title=\"AWS SDK\"></a>AWS SDK</h4><p>如果你有用AWS S3的SDK，一樣可以使用它撰寫程式連結到minIO的server，<br>MinIO官方範例:<a href=\"https://docs.min.io/docs/how-to-use-aws-sdk-for-go-with-minio-server.html\">How to use AWS SDK for Go with MinIO Server</a>，不過該AWS ADK已經有V2了，如果用V2版需要再改一下自行定義資訊的寫法<a href=\"https://aws.github.io/aws-sdk-go-v2/docs/configuring-sdk/endpoints/\">Overriding Endpoint with Fallback</a>，或是讀取AWS config的本地Credentials資訊。</p>\n<h5 id=\"產生Credentials\"><a href=\"#產生Credentials\" class=\"headerlink\" title=\"產生Credentials\"></a>產生Credentials</h5><p><a href=\"https://docs.aws.amazon.com/zh_tw/cli/latest/userguide/cli-configure-files.html\">組態與登入資料檔案設定</a><br> Windows 中是使用環境變數 %UserProfile% (通常是c:/users/xxx)來參考，而在 Unix 系統中是使用 $HOME 或 ~ (波狀符號) 來參考</p>\n<ul>\n<li>可以下載AWS CLI 來幫你產生這些檔案</li>\n<li>minIO server的產生方式可以看這篇<a href=\"https://docs.min.io/docs/aws-cli-with-minio.html\">AWS CLI with MinIO Server</a></li>\n</ul>\n<p>測試用aws CLI列出buckets</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws configure</span></span><br><span class=\"line\">AWS Access Key ID [****************MPLE]: Q3AM3UQ867SPQQA43P2F</span><br><span class=\"line\">AWS Secret Access Key [****************EKEY]: zuf+tfteSlswRu7BJ86wekitnifILbZam1KYY3TG</span><br><span class=\"line\">Default region name [us-east-1]:</span><br><span class=\"line\">Default output format [None]:</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws configure <span class=\"built_in\">set</span> default.s3.signature_version s3v4</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">aws --endpoint-url https://play.min.io s3 ls</span></span><br><span class=\"line\"></span><br><span class=\"line\">2021-04-06 00:05:40 00dst1</span><br><span class=\"line\">2021-04-06 00:05:53 00dst2</span><br><span class=\"line\">(略)</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/1375285/amazon-s3-developer-free-account-for-testing-purposes\">amazon-s3開發是否有免費帳號</a></li>\n</ul>"},{"title":"[Blog] 五分鐘教你使用 docusaurus 建立筆記部落格","date":"2021-05-21T10:39:33.000Z","_content":"\n\n>雖然說現在用的hexo技術建立的部落格就是為了寫筆記，但有時候只是為了真的純快速紀錄，之後待查或待看，但要整理成新的文章往往要一段時間，且很多不同的速記比較很難一下找出來，這時看到有另一種風格的部落格蠻適合當這樣的記錄的，適合作文檔的站點． \n>note success %} \n1.Docusaurus will help you ship a beautiful documentation site in no time.\n2.是由[Faecbook團隊開源專案](https://github.com/facebook/docusaurus)，提供的一款易於維護的靜態網站建立工具，且可以使用react技術編輯．（MIT License）\n\n\n---\n個人選擇的優點：\n  1. 左側有可以開闔的側欄，且進入文章後不會不見，可以快速瀏覽．\n  2. 單純作為文檔保存筆記而建立\n  3. 玩玩Docusaurus ！！\n\n（第一點雖然hexo我有試圖找過有沒有不同主題可以符合這樣的需求，但搜尋上有點困難，就當作為了切開風格而另架一種風格的網站，而且也很快速．）\n\n<!--more-->\n\n## 建立Docusaurus\n馬上就進入[官網](https://docusaurus.io/docs) 看 get started 說明流程只要三個指令：\n```javascript\nnpx @docusaurus/init@latest init my-website classic\ncd my-website\nnpx docusaurus start\n```\nEx 我的配置流程，我用的命名為note-blog(你可以使用自訂的命名)：\n```javascript\nblog npx @docusaurus/init@latest init note-blog classic\n\nnpx: 40 安裝成功，花費 6.139 秒\n\nCreating new Docusaurus project ...\n\nSuccess! Created note-blog\nInside that directory, you can run several commands:\n\n  npm start\n    Starts the development server.\n\n  npm run build\n    Bundles the app into static files for production.\n\n  npm deploy\n    Publish website to GitHub pages.\n\nWe suggest that you begin by typing:\n\n  cd note-blog\n  npm start\n```\n這邊最後一步啟動介紹寫的有點不同，但是都可以啟動\n\n一些基本的畫面就出來了☼☼☼\nhttp://localhost:3000/note-blog/\n\n<img src=\"/images/post/note-blog-ui.png\" width=\"500px\"/>\n\n接著我先不改內容，先部署到網路上拿到正式網址．\n\n----\n\n## 上傳到github\n這邊我用的方式是用gh-pages工具的做法，跟[官網deployment介紹](https://docusaurus.io/docs/deployment)的有點不同，（個人覺得官網寫的覺得有點難懂，但流程可能比較正式，有興趣的人可以試著做做看）\n\n\n個人使用gh-pages工具流程記錄如下．\n\n1. 先到githu\bb新增專案名為“”note-blog\n2. 先把剛剛的專案上傳到GIT\n```Bash 基本上照gutbuh建立完的提示輸入就好\ngit remote add origin XXX\ngit push -u origin master\n```\n3.安裝gh-pages工具\n```\nnpm install --save gh-pages\n```\n3. 在專案的 package.json 中加入 homepage與scripts\n```diff\n\"name\": \"note-blog\",\n+ \"homepage\": \"https://minilabmemo.github.io/note-blog\",\nscripts\": {\n+   \"predeploy\": \"npm run build\",\n+    \"deploy\": \"gh-pages -d build\",\n     \"docusaurus\": \"docusaurus\",\n    \"start\": \"docusaurus start\",\n    \"build\": \"docusaurus build\",\n    \"swizzle\": \"docusaurus swizzle\",\n-    \"deploy\": \"docusaurus deploy\",\n```\n4.接著gh-page 就可以用下列指令上傳啦\n```shell console\nnpm run deploy\n\n略\nSuccess! Generated static files in build.\n\nUse `npm run serve` to test your build locally.\n> note-blog@0.0.0 deploy /xxxx\n> gh-pages -d build\n\nPublished\n```\n5. 成功部署到 Github 上後，會發現多了一個名為 gh-pages 的分支，教學文中說設定頁->GitHub Pages->Source要把頁面指到 gh-pages 這個分支（但我查看預設就是了）\n\n6. 接著打開頁面，結果發現馬上跳[錯誤畫面](https://docusaurus.io/docs/docusaurus.config.js#baseurlissuebanner)，但有指示要更改docusaurus.config.js檔案內的\n```\nbaseUrl: '/note-blog/',\n```\n\n7. 再開一次頁面會成功了！！\nhttps://minilabmemo.github.io/note-blog/\n\n\n（到這邊大約就五分鐘差不多，但為了看懂它的編輯設定還是花了我一點時間．）\n\n---\n\n## 開始編輯網站\n建立完後基本畫面上就有教學了，而且覺得比官網上的說明還要清楚，可以直接查看這邊就好，我也保留了這些教學文件（->[點我](https://minilabmemo.github.io/note-blog/docs/docusaurus/tutorial-basics/create-a-page)）\n\n---\n\n以下就簡單紀錄使用用法:\n\n### 更改設定檔 docusaurus.config.js\n這邊可以更改網站標題與logo，看欄位一一修改應該沒什麼困難,但也有更多可以新增的欄位設定:\n1. 主設定檔說明寫在[這邊](https://docusaurus.io/docs/docusaurus.config.js)\n2. [主題使用設定](https://docusaurus.io/docs/api/themes/configuration)，可以修改導覽列的下拉清單，新增通知訊息等．\n\n### 編輯的文件檔案說明\n文件的編輯格式檔案有兩種選擇\n1. 學過react可以用js撰寫\n2. 一般可以使用Markdown(.md)撰寫（不知道什麼是Markdown的可以先去玩玩線上編輯工具),而docusaurus可以輸入前言作為描述顯示相關位置：\n- [相關的markdown前言](https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#markdown-frontmatter)\n\n#### 新增頁面 page\n可以新增一個頁面，然後對應的網址就會出現對應內容了，這通常是獨立頁面，需要另外用超連結指到這個位置．\n- 須注意對應的網址會在 baseUrl底下喔\n```\nex\n/src/pages/foo/index.js → <baseUrl>/foo/\n```\n- 看看效果：\nnote-blog/src/pages/markdown-page.md\n →https://minilabmemo.github.io/note-blog/markdown-page/\n\n#### 建立文件 Document\n可以直接把文章放到docs資料夾裡，並在前言編輯位置與標題就會出現在側邊欄了．\n\n\n\n```markdown /docs/intro.md\n+ ---\n+ sidebar_label: \"Hi!\"  \n+ sidebar_position: 3\n+ ---\n\n# Hello 這邊就是文章內容\n\nThis is my **first Docusaurus document**!\n```\n\n### 建立blog\n這邊一樣方法，只是會建立在blog分頁，裡面已經有基本範本，且說明blog支援tags功能，如果不想要blog頁籤，可以把整個資料夾刪除（/your_repo/blog/2019-05-30-welcome.md）．\n\n## 新增與修改插件設定\n[插件列表](https://docusaurus.io/zh-CN/docs/api/plugins)\n\n### plugin-content-docs\n如果是有裝classic主題，就可以不用另外安裝，[plugin-content-docs](https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs)裡的內容可以像下面修改：\n\n- editUrl：修改進入github編輯的位址\n- showLastUpdateTime：顯示修改日期\n```diff /docusaurus.config.js \npresets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n           editUrl:\n            'https://github.com/<git_account>/<repo>/edit/master/', \n+          showLastUpdateTime: true,\n        }\n\n      },\n    ],\n  ],\n```\n-----\n\n## 注意事項 - 錯誤狀況\n不知道為什麼有的時候能顯示，但是跑到deploy & build時，如果文章中有錯誤連結，就會跑出一堆錯誤喔～！！！可以在一堆錯誤上方中找到,一不小心會以為是npm與libiary問題....\n\n```\nExhaustive list of all broken links found\n....\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/yiyin/.npm/_logs/2021-08-03T06_04_03_540Z-debug.log\n```\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [docusaurus 中文指南](https://www.docusaurus.cn/docs/configuration)\n- [[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！](https://ithelp.ithome.com.tw/articles/10228423)","source":"_posts/blog-docusaurus-01.md","raw":"---\ntitle: \"[Blog] 五分鐘教你使用 docusaurus 建立筆記部落格\"\ntags:\n  - blog\n  - docusaurus\ncategories:\n  - Tech.\n  - Web\n  - blog\ndate: 2021-05-21 18:39:33\n---\n\n\n>雖然說現在用的hexo技術建立的部落格就是為了寫筆記，但有時候只是為了真的純快速紀錄，之後待查或待看，但要整理成新的文章往往要一段時間，且很多不同的速記比較很難一下找出來，這時看到有另一種風格的部落格蠻適合當這樣的記錄的，適合作文檔的站點． \n>note success %} \n1.Docusaurus will help you ship a beautiful documentation site in no time.\n2.是由[Faecbook團隊開源專案](https://github.com/facebook/docusaurus)，提供的一款易於維護的靜態網站建立工具，且可以使用react技術編輯．（MIT License）\n\n\n---\n個人選擇的優點：\n  1. 左側有可以開闔的側欄，且進入文章後不會不見，可以快速瀏覽．\n  2. 單純作為文檔保存筆記而建立\n  3. 玩玩Docusaurus ！！\n\n（第一點雖然hexo我有試圖找過有沒有不同主題可以符合這樣的需求，但搜尋上有點困難，就當作為了切開風格而另架一種風格的網站，而且也很快速．）\n\n<!--more-->\n\n## 建立Docusaurus\n馬上就進入[官網](https://docusaurus.io/docs) 看 get started 說明流程只要三個指令：\n```javascript\nnpx @docusaurus/init@latest init my-website classic\ncd my-website\nnpx docusaurus start\n```\nEx 我的配置流程，我用的命名為note-blog(你可以使用自訂的命名)：\n```javascript\nblog npx @docusaurus/init@latest init note-blog classic\n\nnpx: 40 安裝成功，花費 6.139 秒\n\nCreating new Docusaurus project ...\n\nSuccess! Created note-blog\nInside that directory, you can run several commands:\n\n  npm start\n    Starts the development server.\n\n  npm run build\n    Bundles the app into static files for production.\n\n  npm deploy\n    Publish website to GitHub pages.\n\nWe suggest that you begin by typing:\n\n  cd note-blog\n  npm start\n```\n這邊最後一步啟動介紹寫的有點不同，但是都可以啟動\n\n一些基本的畫面就出來了☼☼☼\nhttp://localhost:3000/note-blog/\n\n<img src=\"/images/post/note-blog-ui.png\" width=\"500px\"/>\n\n接著我先不改內容，先部署到網路上拿到正式網址．\n\n----\n\n## 上傳到github\n這邊我用的方式是用gh-pages工具的做法，跟[官網deployment介紹](https://docusaurus.io/docs/deployment)的有點不同，（個人覺得官網寫的覺得有點難懂，但流程可能比較正式，有興趣的人可以試著做做看）\n\n\n個人使用gh-pages工具流程記錄如下．\n\n1. 先到githu\bb新增專案名為“”note-blog\n2. 先把剛剛的專案上傳到GIT\n```Bash 基本上照gutbuh建立完的提示輸入就好\ngit remote add origin XXX\ngit push -u origin master\n```\n3.安裝gh-pages工具\n```\nnpm install --save gh-pages\n```\n3. 在專案的 package.json 中加入 homepage與scripts\n```diff\n\"name\": \"note-blog\",\n+ \"homepage\": \"https://minilabmemo.github.io/note-blog\",\nscripts\": {\n+   \"predeploy\": \"npm run build\",\n+    \"deploy\": \"gh-pages -d build\",\n     \"docusaurus\": \"docusaurus\",\n    \"start\": \"docusaurus start\",\n    \"build\": \"docusaurus build\",\n    \"swizzle\": \"docusaurus swizzle\",\n-    \"deploy\": \"docusaurus deploy\",\n```\n4.接著gh-page 就可以用下列指令上傳啦\n```shell console\nnpm run deploy\n\n略\nSuccess! Generated static files in build.\n\nUse `npm run serve` to test your build locally.\n> note-blog@0.0.0 deploy /xxxx\n> gh-pages -d build\n\nPublished\n```\n5. 成功部署到 Github 上後，會發現多了一個名為 gh-pages 的分支，教學文中說設定頁->GitHub Pages->Source要把頁面指到 gh-pages 這個分支（但我查看預設就是了）\n\n6. 接著打開頁面，結果發現馬上跳[錯誤畫面](https://docusaurus.io/docs/docusaurus.config.js#baseurlissuebanner)，但有指示要更改docusaurus.config.js檔案內的\n```\nbaseUrl: '/note-blog/',\n```\n\n7. 再開一次頁面會成功了！！\nhttps://minilabmemo.github.io/note-blog/\n\n\n（到這邊大約就五分鐘差不多，但為了看懂它的編輯設定還是花了我一點時間．）\n\n---\n\n## 開始編輯網站\n建立完後基本畫面上就有教學了，而且覺得比官網上的說明還要清楚，可以直接查看這邊就好，我也保留了這些教學文件（->[點我](https://minilabmemo.github.io/note-blog/docs/docusaurus/tutorial-basics/create-a-page)）\n\n---\n\n以下就簡單紀錄使用用法:\n\n### 更改設定檔 docusaurus.config.js\n這邊可以更改網站標題與logo，看欄位一一修改應該沒什麼困難,但也有更多可以新增的欄位設定:\n1. 主設定檔說明寫在[這邊](https://docusaurus.io/docs/docusaurus.config.js)\n2. [主題使用設定](https://docusaurus.io/docs/api/themes/configuration)，可以修改導覽列的下拉清單，新增通知訊息等．\n\n### 編輯的文件檔案說明\n文件的編輯格式檔案有兩種選擇\n1. 學過react可以用js撰寫\n2. 一般可以使用Markdown(.md)撰寫（不知道什麼是Markdown的可以先去玩玩線上編輯工具),而docusaurus可以輸入前言作為描述顯示相關位置：\n- [相關的markdown前言](https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#markdown-frontmatter)\n\n#### 新增頁面 page\n可以新增一個頁面，然後對應的網址就會出現對應內容了，這通常是獨立頁面，需要另外用超連結指到這個位置．\n- 須注意對應的網址會在 baseUrl底下喔\n```\nex\n/src/pages/foo/index.js → <baseUrl>/foo/\n```\n- 看看效果：\nnote-blog/src/pages/markdown-page.md\n →https://minilabmemo.github.io/note-blog/markdown-page/\n\n#### 建立文件 Document\n可以直接把文章放到docs資料夾裡，並在前言編輯位置與標題就會出現在側邊欄了．\n\n\n\n```markdown /docs/intro.md\n+ ---\n+ sidebar_label: \"Hi!\"  \n+ sidebar_position: 3\n+ ---\n\n# Hello 這邊就是文章內容\n\nThis is my **first Docusaurus document**!\n```\n\n### 建立blog\n這邊一樣方法，只是會建立在blog分頁，裡面已經有基本範本，且說明blog支援tags功能，如果不想要blog頁籤，可以把整個資料夾刪除（/your_repo/blog/2019-05-30-welcome.md）．\n\n## 新增與修改插件設定\n[插件列表](https://docusaurus.io/zh-CN/docs/api/plugins)\n\n### plugin-content-docs\n如果是有裝classic主題，就可以不用另外安裝，[plugin-content-docs](https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs)裡的內容可以像下面修改：\n\n- editUrl：修改進入github編輯的位址\n- showLastUpdateTime：顯示修改日期\n```diff /docusaurus.config.js \npresets: [\n    [\n      '@docusaurus/preset-classic',\n      {\n        docs: {\n           editUrl:\n            'https://github.com/<git_account>/<repo>/edit/master/', \n+          showLastUpdateTime: true,\n        }\n\n      },\n    ],\n  ],\n```\n-----\n\n## 注意事項 - 錯誤狀況\n不知道為什麼有的時候能顯示，但是跑到deploy & build時，如果文章中有錯誤連結，就會跑出一堆錯誤喔～！！！可以在一堆錯誤上方中找到,一不小心會以為是npm與libiary問題....\n\n```\nExhaustive list of all broken links found\n....\nnpm ERR! This is probably not a problem with npm. There is likely additional logging output above.\n\nnpm ERR! A complete log of this run can be found in:\nnpm ERR!     /Users/yiyin/.npm/_logs/2021-08-03T06_04_03_540Z-debug.log\n```\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [docusaurus 中文指南](https://www.docusaurus.cn/docs/configuration)\n- [[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！](https://ithelp.ithome.com.tw/articles/10228423)","slug":"blog-docusaurus-01","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhak000ykp2x34ra96ni","content":"<blockquote>\n<p>雖然說現在用的hexo技術建立的部落格就是為了寫筆記，但有時候只是為了真的純快速紀錄，之後待查或待看，但要整理成新的文章往往要一段時間，且很多不同的速記比較很難一下找出來，這時看到有另一種風格的部落格蠻適合當這樣的記錄的，適合作文檔的站點．<br>note success %}<br>1.Docusaurus will help you ship a beautiful documentation site in no time.<br>2.是由<a href=\"https://github.com/facebook/docusaurus\">Faecbook團隊開源專案</a>，提供的一款易於維護的靜態網站建立工具，且可以使用react技術編輯．（MIT License）</p>\n</blockquote>\n<hr>\n<p>個人選擇的優點：</p>\n<ol>\n<li>左側有可以開闔的側欄，且進入文章後不會不見，可以快速瀏覽．</li>\n<li>單純作為文檔保存筆記而建立</li>\n<li>玩玩Docusaurus ！！</li>\n</ol>\n<p>（第一點雖然hexo我有試圖找過有沒有不同主題可以符合這樣的需求，但搜尋上有點困難，就當作為了切開風格而另架一種風格的網站，而且也很快速．）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"建立Docusaurus\"><a href=\"#建立Docusaurus\" class=\"headerlink\" title=\"建立Docusaurus\"></a>建立Docusaurus</h2><p>馬上就進入<a href=\"https://docusaurus.io/docs\">官網</a> 看 get started 說明流程只要三個指令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx @docusaurus/init@latest init my-website classic</span><br><span class=\"line\">cd my-website</span><br><span class=\"line\">npx docusaurus start</span><br></pre></td></tr></table></figure>\n<p>Ex 我的配置流程，我用的命名為note-blog(你可以使用自訂的命名)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog npx @docusaurus/init@latest init note-blog classic</span><br><span class=\"line\"></span><br><span class=\"line\">npx: <span class=\"number\">40</span> 安裝成功，花費 <span class=\"number\">6.139</span> 秒</span><br><span class=\"line\"></span><br><span class=\"line\">Creating <span class=\"keyword\">new</span> Docusaurus project ...</span><br><span class=\"line\"></span><br><span class=\"line\">Success! Created note-blog</span><br><span class=\"line\">Inside that directory, you can run several commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  npm start</span><br><span class=\"line\">    Starts the development server.</span><br><span class=\"line\"></span><br><span class=\"line\">  npm run build</span><br><span class=\"line\">    Bundles the app into <span class=\"keyword\">static</span> files <span class=\"keyword\">for</span> production.</span><br><span class=\"line\"></span><br><span class=\"line\">  npm deploy</span><br><span class=\"line\">    Publish website to GitHub pages.</span><br><span class=\"line\"></span><br><span class=\"line\">We suggest that you begin by typing:</span><br><span class=\"line\"></span><br><span class=\"line\">  cd note-blog</span><br><span class=\"line\">  npm start</span><br></pre></td></tr></table></figure>\n<p>這邊最後一步啟動介紹寫的有點不同，但是都可以啟動</p>\n<p>一些基本的畫面就出來了☼☼☼<br><a href=\"http://localhost:3000/note-blog/\">http://localhost:3000/note-blog/</a></p>\n<img src=\"/images/post/note-blog-ui.png\" width=\"500px\">\n\n<p>接著我先不改內容，先部署到網路上拿到正式網址．</p>\n<hr>\n<h2 id=\"上傳到github\"><a href=\"#上傳到github\" class=\"headerlink\" title=\"上傳到github\"></a>上傳到github</h2><p>這邊我用的方式是用gh-pages工具的做法，跟<a href=\"https://docusaurus.io/docs/deployment\">官網deployment介紹</a>的有點不同，（個人覺得官網寫的覺得有點難懂，但流程可能比較正式，有興趣的人可以試著做做看）</p>\n<p>個人使用gh-pages工具流程記錄如下．</p>\n<ol>\n<li><p>先到githu\bb新增專案名為“”note-blog</p>\n</li>\n<li><p>先把剛剛的專案上傳到GIT</p>\n<figure class=\"highlight bash\"><figcaption><span>基本上照gutbuh建立完的提示輸入就好</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin XXX</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>安裝gh-pages工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save gh-pages</span><br></pre></td></tr></table></figure></li>\n<li><p>在專案的 package.json 中加入 homepage與scripts</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;name&quot;: &quot;note-blog&quot;,</span><br><span class=\"line\"><span class=\"addition\">+ &quot;homepage&quot;: &quot;https://minilabmemo.github.io/note-blog&quot;,</span></span><br><span class=\"line\">scripts&quot;: &#123;</span><br><span class=\"line\"><span class=\"addition\">+   &quot;predeploy&quot;: &quot;npm run build&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+    &quot;deploy&quot;: &quot;gh-pages -d build&quot;,</span></span><br><span class=\"line\">     &quot;docusaurus&quot;: &quot;docusaurus&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;docusaurus start&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;docusaurus build&quot;,</span><br><span class=\"line\">    &quot;swizzle&quot;: &quot;docusaurus swizzle&quot;,</span><br><span class=\"line\"><span class=\"deletion\">-    &quot;deploy&quot;: &quot;docusaurus deploy&quot;,</span></span><br></pre></td></tr></table></figure></li>\n<li><p>接著gh-page 就可以用下列指令上傳啦</p>\n<figure class=\"highlight shell\"><figcaption><span>console</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run deploy</span><br><span class=\"line\"></span><br><span class=\"line\">略</span><br><span class=\"line\">Success! Generated static files in build.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm run serve` to test your build locally.</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> note-blog@0.0.0 deploy /xxxx</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> gh-pages -d build</span></span><br><span class=\"line\"></span><br><span class=\"line\">Published</span><br></pre></td></tr></table></figure></li>\n<li><p>成功部署到 Github 上後，會發現多了一個名為 gh-pages 的分支，教學文中說設定頁-&gt;GitHub Pages-&gt;Source要把頁面指到 gh-pages 這個分支（但我查看預設就是了）</p>\n</li>\n<li><p>接著打開頁面，結果發現馬上跳<a href=\"https://docusaurus.io/docs/docusaurus.config.js#baseurlissuebanner\">錯誤畫面</a>，但有指示要更改docusaurus.config.js檔案內的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl: &#39;&#x2F;note-blog&#x2F;&#39;,</span><br></pre></td></tr></table></figure></li>\n<li><p>再開一次頁面會成功了！！<br><a href=\"https://minilabmemo.github.io/note-blog/\">https://minilabmemo.github.io/note-blog/</a></p>\n</li>\n</ol>\n<p>（到這邊大約就五分鐘差不多，但為了看懂它的編輯設定還是花了我一點時間．）</p>\n<hr>\n<h2 id=\"開始編輯網站\"><a href=\"#開始編輯網站\" class=\"headerlink\" title=\"開始編輯網站\"></a>開始編輯網站</h2><p>建立完後基本畫面上就有教學了，而且覺得比官網上的說明還要清楚，可以直接查看這邊就好，我也保留了這些教學文件（-&gt;<a href=\"https://minilabmemo.github.io/note-blog/docs/docusaurus/tutorial-basics/create-a-page\">點我</a>）</p>\n<hr>\n<p>以下就簡單紀錄使用用法:</p>\n<h3 id=\"更改設定檔-docusaurus-config-js\"><a href=\"#更改設定檔-docusaurus-config-js\" class=\"headerlink\" title=\"更改設定檔 docusaurus.config.js\"></a>更改設定檔 docusaurus.config.js</h3><p>這邊可以更改網站標題與logo，看欄位一一修改應該沒什麼困難,但也有更多可以新增的欄位設定:</p>\n<ol>\n<li>主設定檔說明寫在<a href=\"https://docusaurus.io/docs/docusaurus.config.js\">這邊</a></li>\n<li><a href=\"https://docusaurus.io/docs/api/themes/configuration\">主題使用設定</a>，可以修改導覽列的下拉清單，新增通知訊息等．</li>\n</ol>\n<h3 id=\"編輯的文件檔案說明\"><a href=\"#編輯的文件檔案說明\" class=\"headerlink\" title=\"編輯的文件檔案說明\"></a>編輯的文件檔案說明</h3><p>文件的編輯格式檔案有兩種選擇</p>\n<ol>\n<li>學過react可以用js撰寫</li>\n<li>一般可以使用Markdown(.md)撰寫（不知道什麼是Markdown的可以先去玩玩線上編輯工具),而docusaurus可以輸入前言作為描述顯示相關位置：</li>\n</ol>\n<ul>\n<li><a href=\"https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#markdown-frontmatter\">相關的markdown前言</a></li>\n</ul>\n<h4 id=\"新增頁面-page\"><a href=\"#新增頁面-page\" class=\"headerlink\" title=\"新增頁面 page\"></a>新增頁面 page</h4><p>可以新增一個頁面，然後對應的網址就會出現對應內容了，這通常是獨立頁面，需要另外用超連結指到這個位置．</p>\n<ul>\n<li>須注意對應的網址會在 baseUrl底下喔<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex</span><br><span class=\"line\">&#x2F;src&#x2F;pages&#x2F;foo&#x2F;index.js → &lt;baseUrl&gt;&#x2F;foo&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>看看效果：<br>note-blog/src/pages/markdown-page.md<br>→<a href=\"https://minilabmemo.github.io/note-blog/markdown-page/\">https://minilabmemo.github.io/note-blog/markdown-page/</a></li>\n</ul>\n<h4 id=\"建立文件-Document\"><a href=\"#建立文件-Document\" class=\"headerlink\" title=\"建立文件 Document\"></a>建立文件 Document</h4><p>可以直接把文章放到docs資料夾裡，並在前言編輯位置與標題就會出現在側邊欄了．</p>\n<figure class=\"highlight markdown\"><figcaption><span>/docs/intro.md</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">+</span> ---</span><br><span class=\"line\"><span class=\"bullet\">+</span> sidebar<span class=\"emphasis\">_label: &quot;Hi!&quot;  </span></span><br><span class=\"line\"><span class=\"emphasis\">+ sidebar_</span>position: 3</span><br><span class=\"line\"><span class=\"bullet\">+</span> ---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Hello 這邊就是文章內容</span></span><br><span class=\"line\"></span><br><span class=\"line\">This is my <span class=\"strong\">**first Docusaurus document**</span>!</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立blog\"><a href=\"#建立blog\" class=\"headerlink\" title=\"建立blog\"></a>建立blog</h3><p>這邊一樣方法，只是會建立在blog分頁，裡面已經有基本範本，且說明blog支援tags功能，如果不想要blog頁籤，可以把整個資料夾刪除（/your_repo/blog/2019-05-30-welcome.md）．</p>\n<h2 id=\"新增與修改插件設定\"><a href=\"#新增與修改插件設定\" class=\"headerlink\" title=\"新增與修改插件設定\"></a>新增與修改插件設定</h2><p><a href=\"https://docusaurus.io/zh-CN/docs/api/plugins\">插件列表</a></p>\n<h3 id=\"plugin-content-docs\"><a href=\"#plugin-content-docs\" class=\"headerlink\" title=\"plugin-content-docs\"></a>plugin-content-docs</h3><p>如果是有裝classic主題，就可以不用另外安裝，<a href=\"https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs\">plugin-content-docs</a>裡的內容可以像下面修改：</p>\n<ul>\n<li>editUrl：修改進入github編輯的位址</li>\n<li>showLastUpdateTime：顯示修改日期<figure class=\"highlight diff\"><figcaption><span>/docusaurus.config.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#x27;@docusaurus/preset-classic&#x27;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        docs: &#123;</span><br><span class=\"line\">           editUrl:</span><br><span class=\"line\">            &#x27;https://github.com/&lt;git_account&gt;/&lt;repo&gt;/edit/master/&#x27;, </span><br><span class=\"line\"><span class=\"addition\">+          showLastUpdateTime: true,</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"注意事項-錯誤狀況\"><a href=\"#注意事項-錯誤狀況\" class=\"headerlink\" title=\"注意事項 - 錯誤狀況\"></a>注意事項 - 錯誤狀況</h2><p>不知道為什麼有的時候能顯示，但是跑到deploy &amp; build時，如果文章中有錯誤連結，就會跑出一堆錯誤喔～！！！可以在一堆錯誤上方中找到,一不小心會以為是npm與libiary問題….</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exhaustive list of all broken links found</span><br><span class=\"line\">....</span><br><span class=\"line\">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete log of this run can be found in:</span><br><span class=\"line\">npm ERR!     &#x2F;Users&#x2F;yiyin&#x2F;.npm&#x2F;_logs&#x2F;2021-08-03T06_04_03_540Z-debug.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.docusaurus.cn/docs/configuration\">docusaurus 中文指南</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10228423\">[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>雖然說現在用的hexo技術建立的部落格就是為了寫筆記，但有時候只是為了真的純快速紀錄，之後待查或待看，但要整理成新的文章往往要一段時間，且很多不同的速記比較很難一下找出來，這時看到有另一種風格的部落格蠻適合當這樣的記錄的，適合作文檔的站點．<br>note success %}<br>1.Docusaurus will help you ship a beautiful documentation site in no time.<br>2.是由<a href=\"https://github.com/facebook/docusaurus\">Faecbook團隊開源專案</a>，提供的一款易於維護的靜態網站建立工具，且可以使用react技術編輯．（MIT License）</p>\n</blockquote>\n<hr>\n<p>個人選擇的優點：</p>\n<ol>\n<li>左側有可以開闔的側欄，且進入文章後不會不見，可以快速瀏覽．</li>\n<li>單純作為文檔保存筆記而建立</li>\n<li>玩玩Docusaurus ！！</li>\n</ol>\n<p>（第一點雖然hexo我有試圖找過有沒有不同主題可以符合這樣的需求，但搜尋上有點困難，就當作為了切開風格而另架一種風格的網站，而且也很快速．）</p>","more":"<h2 id=\"建立Docusaurus\"><a href=\"#建立Docusaurus\" class=\"headerlink\" title=\"建立Docusaurus\"></a>建立Docusaurus</h2><p>馬上就進入<a href=\"https://docusaurus.io/docs\">官網</a> 看 get started 說明流程只要三個指令：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npx @docusaurus/init@latest init my-website classic</span><br><span class=\"line\">cd my-website</span><br><span class=\"line\">npx docusaurus start</span><br></pre></td></tr></table></figure>\n<p>Ex 我的配置流程，我用的命名為note-blog(你可以使用自訂的命名)：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog npx @docusaurus/init@latest init note-blog classic</span><br><span class=\"line\"></span><br><span class=\"line\">npx: <span class=\"number\">40</span> 安裝成功，花費 <span class=\"number\">6.139</span> 秒</span><br><span class=\"line\"></span><br><span class=\"line\">Creating <span class=\"keyword\">new</span> Docusaurus project ...</span><br><span class=\"line\"></span><br><span class=\"line\">Success! Created note-blog</span><br><span class=\"line\">Inside that directory, you can run several commands:</span><br><span class=\"line\"></span><br><span class=\"line\">  npm start</span><br><span class=\"line\">    Starts the development server.</span><br><span class=\"line\"></span><br><span class=\"line\">  npm run build</span><br><span class=\"line\">    Bundles the app into <span class=\"keyword\">static</span> files <span class=\"keyword\">for</span> production.</span><br><span class=\"line\"></span><br><span class=\"line\">  npm deploy</span><br><span class=\"line\">    Publish website to GitHub pages.</span><br><span class=\"line\"></span><br><span class=\"line\">We suggest that you begin by typing:</span><br><span class=\"line\"></span><br><span class=\"line\">  cd note-blog</span><br><span class=\"line\">  npm start</span><br></pre></td></tr></table></figure>\n<p>這邊最後一步啟動介紹寫的有點不同，但是都可以啟動</p>\n<p>一些基本的畫面就出來了☼☼☼<br><a href=\"http://localhost:3000/note-blog/\">http://localhost:3000/note-blog/</a></p>\n<img src=\"/images/post/note-blog-ui.png\" width=\"500px\">\n\n<p>接著我先不改內容，先部署到網路上拿到正式網址．</p>\n<hr>\n<h2 id=\"上傳到github\"><a href=\"#上傳到github\" class=\"headerlink\" title=\"上傳到github\"></a>上傳到github</h2><p>這邊我用的方式是用gh-pages工具的做法，跟<a href=\"https://docusaurus.io/docs/deployment\">官網deployment介紹</a>的有點不同，（個人覺得官網寫的覺得有點難懂，但流程可能比較正式，有興趣的人可以試著做做看）</p>\n<p>個人使用gh-pages工具流程記錄如下．</p>\n<ol>\n<li><p>先到githu\bb新增專案名為“”note-blog</p>\n</li>\n<li><p>先把剛剛的專案上傳到GIT</p>\n<figure class=\"highlight bash\"><figcaption><span>基本上照gutbuh建立完的提示輸入就好</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git remote add origin XXX</span><br><span class=\"line\">git push -u origin master</span><br></pre></td></tr></table></figure></li>\n<li><p>安裝gh-pages工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install --save gh-pages</span><br></pre></td></tr></table></figure></li>\n<li><p>在專案的 package.json 中加入 homepage與scripts</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;name&quot;: &quot;note-blog&quot;,</span><br><span class=\"line\"><span class=\"addition\">+ &quot;homepage&quot;: &quot;https://minilabmemo.github.io/note-blog&quot;,</span></span><br><span class=\"line\">scripts&quot;: &#123;</span><br><span class=\"line\"><span class=\"addition\">+   &quot;predeploy&quot;: &quot;npm run build&quot;,</span></span><br><span class=\"line\"><span class=\"addition\">+    &quot;deploy&quot;: &quot;gh-pages -d build&quot;,</span></span><br><span class=\"line\">     &quot;docusaurus&quot;: &quot;docusaurus&quot;,</span><br><span class=\"line\">    &quot;start&quot;: &quot;docusaurus start&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;docusaurus build&quot;,</span><br><span class=\"line\">    &quot;swizzle&quot;: &quot;docusaurus swizzle&quot;,</span><br><span class=\"line\"><span class=\"deletion\">-    &quot;deploy&quot;: &quot;docusaurus deploy&quot;,</span></span><br></pre></td></tr></table></figure></li>\n<li><p>接著gh-page 就可以用下列指令上傳啦</p>\n<figure class=\"highlight shell\"><figcaption><span>console</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run deploy</span><br><span class=\"line\"></span><br><span class=\"line\">略</span><br><span class=\"line\">Success! Generated static files in build.</span><br><span class=\"line\"></span><br><span class=\"line\">Use `npm run serve` to test your build locally.</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> note-blog@0.0.0 deploy /xxxx</span></span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\"> gh-pages -d build</span></span><br><span class=\"line\"></span><br><span class=\"line\">Published</span><br></pre></td></tr></table></figure></li>\n<li><p>成功部署到 Github 上後，會發現多了一個名為 gh-pages 的分支，教學文中說設定頁-&gt;GitHub Pages-&gt;Source要把頁面指到 gh-pages 這個分支（但我查看預設就是了）</p>\n</li>\n<li><p>接著打開頁面，結果發現馬上跳<a href=\"https://docusaurus.io/docs/docusaurus.config.js#baseurlissuebanner\">錯誤畫面</a>，但有指示要更改docusaurus.config.js檔案內的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">baseUrl: &#39;&#x2F;note-blog&#x2F;&#39;,</span><br></pre></td></tr></table></figure></li>\n<li><p>再開一次頁面會成功了！！<br><a href=\"https://minilabmemo.github.io/note-blog/\">https://minilabmemo.github.io/note-blog/</a></p>\n</li>\n</ol>\n<p>（到這邊大約就五分鐘差不多，但為了看懂它的編輯設定還是花了我一點時間．）</p>\n<hr>\n<h2 id=\"開始編輯網站\"><a href=\"#開始編輯網站\" class=\"headerlink\" title=\"開始編輯網站\"></a>開始編輯網站</h2><p>建立完後基本畫面上就有教學了，而且覺得比官網上的說明還要清楚，可以直接查看這邊就好，我也保留了這些教學文件（-&gt;<a href=\"https://minilabmemo.github.io/note-blog/docs/docusaurus/tutorial-basics/create-a-page\">點我</a>）</p>\n<hr>\n<p>以下就簡單紀錄使用用法:</p>\n<h3 id=\"更改設定檔-docusaurus-config-js\"><a href=\"#更改設定檔-docusaurus-config-js\" class=\"headerlink\" title=\"更改設定檔 docusaurus.config.js\"></a>更改設定檔 docusaurus.config.js</h3><p>這邊可以更改網站標題與logo，看欄位一一修改應該沒什麼困難,但也有更多可以新增的欄位設定:</p>\n<ol>\n<li>主設定檔說明寫在<a href=\"https://docusaurus.io/docs/docusaurus.config.js\">這邊</a></li>\n<li><a href=\"https://docusaurus.io/docs/api/themes/configuration\">主題使用設定</a>，可以修改導覽列的下拉清單，新增通知訊息等．</li>\n</ol>\n<h3 id=\"編輯的文件檔案說明\"><a href=\"#編輯的文件檔案說明\" class=\"headerlink\" title=\"編輯的文件檔案說明\"></a>編輯的文件檔案說明</h3><p>文件的編輯格式檔案有兩種選擇</p>\n<ol>\n<li>學過react可以用js撰寫</li>\n<li>一般可以使用Markdown(.md)撰寫（不知道什麼是Markdown的可以先去玩玩線上編輯工具),而docusaurus可以輸入前言作為描述顯示相關位置：</li>\n</ol>\n<ul>\n<li><a href=\"https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs#markdown-frontmatter\">相關的markdown前言</a></li>\n</ul>\n<h4 id=\"新增頁面-page\"><a href=\"#新增頁面-page\" class=\"headerlink\" title=\"新增頁面 page\"></a>新增頁面 page</h4><p>可以新增一個頁面，然後對應的網址就會出現對應內容了，這通常是獨立頁面，需要另外用超連結指到這個位置．</p>\n<ul>\n<li>須注意對應的網址會在 baseUrl底下喔<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ex</span><br><span class=\"line\">&#x2F;src&#x2F;pages&#x2F;foo&#x2F;index.js → &lt;baseUrl&gt;&#x2F;foo&#x2F;</span><br></pre></td></tr></table></figure></li>\n<li>看看效果：<br>note-blog/src/pages/markdown-page.md<br>→<a href=\"https://minilabmemo.github.io/note-blog/markdown-page/\">https://minilabmemo.github.io/note-blog/markdown-page/</a></li>\n</ul>\n<h4 id=\"建立文件-Document\"><a href=\"#建立文件-Document\" class=\"headerlink\" title=\"建立文件 Document\"></a>建立文件 Document</h4><p>可以直接把文章放到docs資料夾裡，並在前言編輯位置與標題就會出現在側邊欄了．</p>\n<figure class=\"highlight markdown\"><figcaption><span>/docs/intro.md</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">+</span> ---</span><br><span class=\"line\"><span class=\"bullet\">+</span> sidebar<span class=\"emphasis\">_label: &quot;Hi!&quot;  </span></span><br><span class=\"line\"><span class=\"emphasis\">+ sidebar_</span>position: 3</span><br><span class=\"line\"><span class=\"bullet\">+</span> ---</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\"># Hello 這邊就是文章內容</span></span><br><span class=\"line\"></span><br><span class=\"line\">This is my <span class=\"strong\">**first Docusaurus document**</span>!</span><br></pre></td></tr></table></figure>\n<h3 id=\"建立blog\"><a href=\"#建立blog\" class=\"headerlink\" title=\"建立blog\"></a>建立blog</h3><p>這邊一樣方法，只是會建立在blog分頁，裡面已經有基本範本，且說明blog支援tags功能，如果不想要blog頁籤，可以把整個資料夾刪除（/your_repo/blog/2019-05-30-welcome.md）．</p>\n<h2 id=\"新增與修改插件設定\"><a href=\"#新增與修改插件設定\" class=\"headerlink\" title=\"新增與修改插件設定\"></a>新增與修改插件設定</h2><p><a href=\"https://docusaurus.io/zh-CN/docs/api/plugins\">插件列表</a></p>\n<h3 id=\"plugin-content-docs\"><a href=\"#plugin-content-docs\" class=\"headerlink\" title=\"plugin-content-docs\"></a>plugin-content-docs</h3><p>如果是有裝classic主題，就可以不用另外安裝，<a href=\"https://docusaurus.io/zh-CN/docs/api/plugins/@docusaurus/plugin-content-docs\">plugin-content-docs</a>裡的內容可以像下面修改：</p>\n<ul>\n<li>editUrl：修改進入github編輯的位址</li>\n<li>showLastUpdateTime：顯示修改日期<figure class=\"highlight diff\"><figcaption><span>/docusaurus.config.js</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">presets: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      &#x27;@docusaurus/preset-classic&#x27;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        docs: &#123;</span><br><span class=\"line\">           editUrl:</span><br><span class=\"line\">            &#x27;https://github.com/&lt;git_account&gt;/&lt;repo&gt;/edit/master/&#x27;, </span><br><span class=\"line\"><span class=\"addition\">+          showLastUpdateTime: true,</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">    ],</span><br><span class=\"line\">  ],</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"注意事項-錯誤狀況\"><a href=\"#注意事項-錯誤狀況\" class=\"headerlink\" title=\"注意事項 - 錯誤狀況\"></a>注意事項 - 錯誤狀況</h2><p>不知道為什麼有的時候能顯示，但是跑到deploy &amp; build時，如果文章中有錯誤連結，就會跑出一堆錯誤喔～！！！可以在一堆錯誤上方中找到,一不小心會以為是npm與libiary問題….</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Exhaustive list of all broken links found</span><br><span class=\"line\">....</span><br><span class=\"line\">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class=\"line\"></span><br><span class=\"line\">npm ERR! A complete log of this run can be found in:</span><br><span class=\"line\">npm ERR!     &#x2F;Users&#x2F;yiyin&#x2F;.npm&#x2F;_logs&#x2F;2021-08-03T06_04_03_540Z-debug.log</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.docusaurus.cn/docs/configuration\">docusaurus 中文指南</a></li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10228423\">[Day 29 - 即時天氣] 寫網頁就是要炫耀啊，不然要幹麻？發布上 Github Pages 吧！</a></li>\n</ul>"},{"title":"[blog]簡易使用gitbbook建立線上文件筆記","date":"2022-09-09T04:50:07.000Z","_content":"\n\n>GitBook 幫助你創建一個好看好用的文件協作分享  \n\n\n<!--more-->\n\n### 使用gitbook\n\n最近嘗試用gitbook來記錄學習的線上備忘錄，發現還蠻好用的！所以建了一個golang memo的gitbook專區！！！把自己所學都整理往裡面放．\n\n\n#### 如何開始\n\n1. 上gitbook官網，註冊帳號\n2. 開始新增文章，於線上編輯\n3. 點擊發布！！就可以拿到網址了\n4. 還可以與github sync 做備份\n使用gitbook一切就是這麼簡單！！！ 因為太簡單就不附圖了ＸＤ\n\n>note success %} 看看長怎樣 ：<a href=\"https://minilabmemo.gitbook.io/golang-memo/\">點我「golang 學習區」</a>\n>label warning@也可以直接點本部落個側邊欄進入 %}\n ","source":"_posts/blog-gitbook.md","raw":"---\ntitle: \"[blog]簡易使用gitbbook建立線上文件筆記\"\ntags:\n  - blog\n  - gitbook \ncategories:\n  - Tech.\n  - Web\ndate: 2022-09-09 12:50:07\n---\n\n\n>GitBook 幫助你創建一個好看好用的文件協作分享  \n\n\n<!--more-->\n\n### 使用gitbook\n\n最近嘗試用gitbook來記錄學習的線上備忘錄，發現還蠻好用的！所以建了一個golang memo的gitbook專區！！！把自己所學都整理往裡面放．\n\n\n#### 如何開始\n\n1. 上gitbook官網，註冊帳號\n2. 開始新增文章，於線上編輯\n3. 點擊發布！！就可以拿到網址了\n4. 還可以與github sync 做備份\n使用gitbook一切就是這麼簡單！！！ 因為太簡單就不附圖了ＸＤ\n\n>note success %} 看看長怎樣 ：<a href=\"https://minilabmemo.gitbook.io/golang-memo/\">點我「golang 學習區」</a>\n>label warning@也可以直接點本部落個側邊欄進入 %}\n ","slug":"blog-gitbook","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhal0010kp2xcqrq1ei3","content":"<blockquote>\n<p>GitBook 幫助你創建一個好看好用的文件協作分享  </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"使用gitbook\"><a href=\"#使用gitbook\" class=\"headerlink\" title=\"使用gitbook\"></a>使用gitbook</h3><p>最近嘗試用gitbook來記錄學習的線上備忘錄，發現還蠻好用的！所以建了一個golang memo的gitbook專區！！！把自己所學都整理往裡面放．</p>\n<h4 id=\"如何開始\"><a href=\"#如何開始\" class=\"headerlink\" title=\"如何開始\"></a>如何開始</h4><ol>\n<li>上gitbook官網，註冊帳號</li>\n<li>開始新增文章，於線上編輯</li>\n<li>點擊發布！！就可以拿到網址了</li>\n<li>還可以與github sync 做備份<br>使用gitbook一切就是這麼簡單！！！ 因為太簡單就不附圖了ＸＤ</li>\n</ol>\n<blockquote>\n<p>note success %} 看看長怎樣 ：<a href=\"https://minilabmemo.gitbook.io/golang-memo/\">點我「golang 學習區」</a><br>label warning@也可以直接點本部落個側邊欄進入 %}</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>GitBook 幫助你創建一個好看好用的文件協作分享  </p>\n</blockquote>","more":"<h3 id=\"使用gitbook\"><a href=\"#使用gitbook\" class=\"headerlink\" title=\"使用gitbook\"></a>使用gitbook</h3><p>最近嘗試用gitbook來記錄學習的線上備忘錄，發現還蠻好用的！所以建了一個golang memo的gitbook專區！！！把自己所學都整理往裡面放．</p>\n<h4 id=\"如何開始\"><a href=\"#如何開始\" class=\"headerlink\" title=\"如何開始\"></a>如何開始</h4><ol>\n<li>上gitbook官網，註冊帳號</li>\n<li>開始新增文章，於線上編輯</li>\n<li>點擊發布！！就可以拿到網址了</li>\n<li>還可以與github sync 做備份<br>使用gitbook一切就是這麼簡單！！！ 因為太簡單就不附圖了ＸＤ</li>\n</ol>\n<blockquote>\n<p>note success %} 看看長怎樣 ：<a href=\"https://minilabmemo.gitbook.io/golang-memo/\">點我「golang 學習區」</a><br>label warning@也可以直接點本部落個側邊欄進入 %}</p>\n</blockquote>"},{"title":"[Blog] 使用 Hexo 撰寫部落格 01- 建立部落格","date":"2021-01-31T02:06:20.000Z","_content":"\n>cq %}\n\n# hexo 是什麼？\n\n>endcq %}\n\n <blockquote class=\"blockquote-center\">\n \nHexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown 標記語言解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。（來自 https://hexo.io/zh-tw/docs/ 說明）</blockquote>\n\n# 本文將會知道\n\n1. 如何使用 Hexo 產生部落格 （超快速，只要看到這邊就建好囉！）\n2. 如何使用 markdown 撰寫文章\n3. 如何部署到 github 個人網頁\n4. 如何更改主題與內文風格 (本站用到的所有修改介紹，移到下一篇)\n\n<!--more-->\n\n## 安裝 hexo 與初始化部落格\n\n### 產生基本部落格結構\n\n```\n安裝工具 （使用npm安裝 可先安裝Node：https://nodejs.org/en/）\n$ npm install -g hexo-cli\n初始資料夾\n$ hexo init <folder>\n進入資料夾及安裝相依\n$ cd <folder>\n$ npm install\n這邊就已經做好初始化了\n```\n\n### 啟動部落格 Run server\n\n```bash\n$ hexo server\n開啟瀏覽器 http://localhost:4000 就可以看到部落格了💕💕💕\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### （紀錄）顯示版本資訊\n\n（有需要的話，可以查詢對應安裝版本）知道自己安裝的版本，對於之後查詢問題是很有幫助的喔！\n\n```bash\n$ hexo version\n(node:5190) ExperimentalWarning: The fs.promises API is experimental\nINFO  Validating config\nhexo: 5.1.1\nhexo-cli: 4.2.0\nos: Darwin 19.0.0 darwin x64\nhttp_parser: 2.8.0\nnode: 10.16.3\nv8: 6.8.275.32-node.54\nuv: 1.28.0\nzlib: 1.2.11\nbrotli: 1.0.7\nares: 1.15.0\nmodules: 64\nnghttp2: 1.39.2\nnapi: 4\nopenssl: 1.1.1c\nicu: 64.2\nunicode: 12.1\ncldr: 35.1\ntz: 2019a\n```\n\n---\n\n## 開始撰寫文章\n\n### 新增文章\n\n```bash\n$ hexo new \"My New Post\"\n(預設)會在source/＿posts 底下新增一個 .md 檔案\n\n$ hexo new draft \"My New Post\" //指定生成草稿\n會在source/＿draft 底下新增一個 .md 檔案\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 撰寫文章\n\n在剛剛新增的檔案開始採用 markdown 語法開始撰寫文章．\n\n- 可以找線上編輯器工具幫助撰寫及預覽，「自己習慣用這一個https://markdown-editor.github.io/」 ，編輯完再貼過來內文．\n- 如對語法有一點熟悉，就直接用 vscode 打開檔案開始撰寫內文，並可以安裝 vscode markdown preview 插件，邊改邊預覽．\n\n- 編寫完再啟動部落格並在瀏覽器查看效果． （可帶--draft 顯示草稿）\n```\nhexo s --draft\n```\n---\n\n## 部署網站\n\n### 建立與設定 Git 空間\n\n- 先在 github 上新增一個專案叫與帳號一樣命名叫做“[yourname].github.io”\n>建立完成後會有教你如何建立commit & push的語法，建議要先建立連結，之後部署才會順利．\n>```\n>git push -u origin master\n>```\n>\n\n- 配置 \\_config.yml\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/yourname/yourname.github.io\n  branch: master\n```\n\n### 產生靜態文件 Generate static files\n\n```bash\n$ hexo generate 或是hexo g\n會在public資料夾產生網站靜態檔案\n這是用來部署到網站的檔案，記得每次部署前都要更新喔\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 一鍵部署\n\n```bash\n$ hexo deploy\n（略）\nBranch 'master' set up to track remote branch 'master' from 'https://github.com/minilabmemo/minilabmemo.github.io'.\nINFO  Deploy done: git\n要看到這句才是部署成功，如果卡住可能要先檢查git連結是否正常．\n```\n\n其他空間部署說明(ex:heroku) More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n> 註：部署會上傳至剛剛config的位置，測試發現只會上傳web檔案相關如果有上傳source/theme 檔案也會被移除．\n因為在開發環境時可以先開一個src branch 來控管原始檔案．\n<br>branch - src (have all files)\n<br>branch - master (only web files)\n\n### 個人網站網址\n\nhttps://yourname.github.io/\n\n這樣就大功告成啦！🎉🎉🎉（註：有時要稍等一下才會看到更新）\n\n### 清理靜態文件 Clean static files\n\n```bash\n$ hexo clean\n清除快取檔案 (db.json) 和已產生的靜態檔案 (public)\n```\n\n>label warning@下一篇會介紹如何更換主題及內文撰寫%}\n\n\n---\n\n## 參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- Quick Start\n  Welcome to [Hexo](https://hexo.io/)! Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues)\n\n- [HEXO 指令](https://hexo.io/zh-tw/docs/commands.html)\n","source":"_posts/blog-hexo-01-hello-world.md","raw":"---\ntitle: \"[Blog] 使用 Hexo 撰寫部落格 01- 建立部落格\"\ntags:\n  - hexo\n  - blog\ncategories:\n  - Tech.\n  - Web\n  - blog\ndate: 2021-01-31 10:06:20\n---\n\n>cq %}\n\n# hexo 是什麼？\n\n>endcq %}\n\n <blockquote class=\"blockquote-center\">\n \nHexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown 標記語言解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。（來自 https://hexo.io/zh-tw/docs/ 說明）</blockquote>\n\n# 本文將會知道\n\n1. 如何使用 Hexo 產生部落格 （超快速，只要看到這邊就建好囉！）\n2. 如何使用 markdown 撰寫文章\n3. 如何部署到 github 個人網頁\n4. 如何更改主題與內文風格 (本站用到的所有修改介紹，移到下一篇)\n\n<!--more-->\n\n## 安裝 hexo 與初始化部落格\n\n### 產生基本部落格結構\n\n```\n安裝工具 （使用npm安裝 可先安裝Node：https://nodejs.org/en/）\n$ npm install -g hexo-cli\n初始資料夾\n$ hexo init <folder>\n進入資料夾及安裝相依\n$ cd <folder>\n$ npm install\n這邊就已經做好初始化了\n```\n\n### 啟動部落格 Run server\n\n```bash\n$ hexo server\n開啟瀏覽器 http://localhost:4000 就可以看到部落格了💕💕💕\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### （紀錄）顯示版本資訊\n\n（有需要的話，可以查詢對應安裝版本）知道自己安裝的版本，對於之後查詢問題是很有幫助的喔！\n\n```bash\n$ hexo version\n(node:5190) ExperimentalWarning: The fs.promises API is experimental\nINFO  Validating config\nhexo: 5.1.1\nhexo-cli: 4.2.0\nos: Darwin 19.0.0 darwin x64\nhttp_parser: 2.8.0\nnode: 10.16.3\nv8: 6.8.275.32-node.54\nuv: 1.28.0\nzlib: 1.2.11\nbrotli: 1.0.7\nares: 1.15.0\nmodules: 64\nnghttp2: 1.39.2\nnapi: 4\nopenssl: 1.1.1c\nicu: 64.2\nunicode: 12.1\ncldr: 35.1\ntz: 2019a\n```\n\n---\n\n## 開始撰寫文章\n\n### 新增文章\n\n```bash\n$ hexo new \"My New Post\"\n(預設)會在source/＿posts 底下新增一個 .md 檔案\n\n$ hexo new draft \"My New Post\" //指定生成草稿\n會在source/＿draft 底下新增一個 .md 檔案\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 撰寫文章\n\n在剛剛新增的檔案開始採用 markdown 語法開始撰寫文章．\n\n- 可以找線上編輯器工具幫助撰寫及預覽，「自己習慣用這一個https://markdown-editor.github.io/」 ，編輯完再貼過來內文．\n- 如對語法有一點熟悉，就直接用 vscode 打開檔案開始撰寫內文，並可以安裝 vscode markdown preview 插件，邊改邊預覽．\n\n- 編寫完再啟動部落格並在瀏覽器查看效果． （可帶--draft 顯示草稿）\n```\nhexo s --draft\n```\n---\n\n## 部署網站\n\n### 建立與設定 Git 空間\n\n- 先在 github 上新增一個專案叫與帳號一樣命名叫做“[yourname].github.io”\n>建立完成後會有教你如何建立commit & push的語法，建議要先建立連結，之後部署才會順利．\n>```\n>git push -u origin master\n>```\n>\n\n- 配置 \\_config.yml\n\n```\ndeploy:\n  type: git\n  repo: https://github.com/yourname/yourname.github.io\n  branch: master\n```\n\n### 產生靜態文件 Generate static files\n\n```bash\n$ hexo generate 或是hexo g\n會在public資料夾產生網站靜態檔案\n這是用來部署到網站的檔案，記得每次部署前都要更新喔\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### 一鍵部署\n\n```bash\n$ hexo deploy\n（略）\nBranch 'master' set up to track remote branch 'master' from 'https://github.com/minilabmemo/minilabmemo.github.io'.\nINFO  Deploy done: git\n要看到這句才是部署成功，如果卡住可能要先檢查git連結是否正常．\n```\n\n其他空間部署說明(ex:heroku) More info: [Deployment](https://hexo.io/docs/one-command-deployment.html)\n\n> 註：部署會上傳至剛剛config的位置，測試發現只會上傳web檔案相關如果有上傳source/theme 檔案也會被移除．\n因為在開發環境時可以先開一個src branch 來控管原始檔案．\n<br>branch - src (have all files)\n<br>branch - master (only web files)\n\n### 個人網站網址\n\nhttps://yourname.github.io/\n\n這樣就大功告成啦！🎉🎉🎉（註：有時要稍等一下才會看到更新）\n\n### 清理靜態文件 Clean static files\n\n```bash\n$ hexo clean\n清除快取檔案 (db.json) 和已產生的靜態檔案 (public)\n```\n\n>label warning@下一篇會介紹如何更換主題及內文撰寫%}\n\n\n---\n\n## 參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- Quick Start\n  Welcome to [Hexo](https://hexo.io/)! Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues)\n\n- [HEXO 指令](https://hexo.io/zh-tw/docs/commands.html)\n","slug":"blog-hexo-01-hello-world","published":1,"updated":"2023-01-22T07:05:18.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhan0013kp2xc81obh40","content":"<blockquote>\n<p>cq %}</p>\n</blockquote>\n<h1 id=\"hexo-是什麼？\"><a href=\"#hexo-是什麼？\" class=\"headerlink\" title=\"hexo 是什麼？\"></a>hexo 是什麼？</h1><blockquote>\n<p>endcq %}</p>\n</blockquote>\n <blockquote class=\"blockquote-center\">\n\n<p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown 標記語言解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。（來自 <a href=\"https://hexo.io/zh-tw/docs/\">https://hexo.io/zh-tw/docs/</a> 說明）</p></blockquote><p></p>\n<h1 id=\"本文將會知道\"><a href=\"#本文將會知道\" class=\"headerlink\" title=\"本文將會知道\"></a>本文將會知道</h1><ol>\n<li>如何使用 Hexo 產生部落格 （超快速，只要看到這邊就建好囉！）</li>\n<li>如何使用 markdown 撰寫文章</li>\n<li>如何部署到 github 個人網頁</li>\n<li>如何更改主題與內文風格 (本站用到的所有修改介紹，移到下一篇)</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"安裝-hexo-與初始化部落格\"><a href=\"#安裝-hexo-與初始化部落格\" class=\"headerlink\" title=\"安裝 hexo 與初始化部落格\"></a>安裝 hexo 與初始化部落格</h2><h3 id=\"產生基本部落格結構\"><a href=\"#產生基本部落格結構\" class=\"headerlink\" title=\"產生基本部落格結構\"></a>產生基本部落格結構</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安裝工具 （使用npm安裝 可先安裝Node：https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;）</span><br><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">初始資料夾</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">進入資料夾及安裝相依</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">這邊就已經做好初始化了</span><br></pre></td></tr></table></figure>\n<h3 id=\"啟動部落格-Run-server\"><a href=\"#啟動部落格-Run-server\" class=\"headerlink\" title=\"啟動部落格 Run server\"></a>啟動部落格 Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">開啟瀏覽器 http://localhost:4000 就可以看到部落格了💕💕💕</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"（紀錄）顯示版本資訊\"><a href=\"#（紀錄）顯示版本資訊\" class=\"headerlink\" title=\"（紀錄）顯示版本資訊\"></a>（紀錄）顯示版本資訊</h3><p>（有需要的話，可以查詢對應安裝版本）知道自己安裝的版本，對於之後查詢問題是很有幫助的喔！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br><span class=\"line\">(node:5190) ExperimentalWarning: The fs.promises API is experimental</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 5.1.1</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br><span class=\"line\">os: Darwin 19.0.0 darwin x64</span><br><span class=\"line\">http_parser: 2.8.0</span><br><span class=\"line\">node: 10.16.3</span><br><span class=\"line\">v8: 6.8.275.32-node.54</span><br><span class=\"line\">uv: 1.28.0</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.7</span><br><span class=\"line\">ares: 1.15.0</span><br><span class=\"line\">modules: 64</span><br><span class=\"line\">nghttp2: 1.39.2</span><br><span class=\"line\">napi: 4</span><br><span class=\"line\">openssl: 1.1.1c</span><br><span class=\"line\">icu: 64.2</span><br><span class=\"line\">unicode: 12.1</span><br><span class=\"line\">cldr: 35.1</span><br><span class=\"line\">tz: 2019a</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"開始撰寫文章\"><a href=\"#開始撰寫文章\" class=\"headerlink\" title=\"開始撰寫文章\"></a>開始撰寫文章</h2><h3 id=\"新增文章\"><a href=\"#新增文章\" class=\"headerlink\" title=\"新增文章\"></a>新增文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br><span class=\"line\">(預設)會在<span class=\"built_in\">source</span>/＿posts 底下新增一個 .md 檔案</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new draft <span class=\"string\">&quot;My New Post&quot;</span> //指定生成草稿</span><br><span class=\"line\">會在<span class=\"built_in\">source</span>/＿draft 底下新增一個 .md 檔案</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"撰寫文章\"><a href=\"#撰寫文章\" class=\"headerlink\" title=\"撰寫文章\"></a>撰寫文章</h3><p>在剛剛新增的檔案開始採用 markdown 語法開始撰寫文章．</p>\n<ul>\n<li><p>可以找線上編輯器工具幫助撰寫及預覽，「自己習慣用這一個<a href=\"https://markdown-editor.github.io/%E3%80%8D\">https://markdown-editor.github.io/」</a> ，編輯完再貼過來內文．</p>\n</li>\n<li><p>如對語法有一點熟悉，就直接用 vscode 打開檔案開始撰寫內文，並可以安裝 vscode markdown preview 插件，邊改邊預覽．</p>\n</li>\n<li><p>編寫完再啟動部落格並在瀏覽器查看效果． （可帶–draft 顯示草稿）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --draft</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"部署網站\"><a href=\"#部署網站\" class=\"headerlink\" title=\"部署網站\"></a>部署網站</h2><h3 id=\"建立與設定-Git-空間\"><a href=\"#建立與設定-Git-空間\" class=\"headerlink\" title=\"建立與設定 Git 空間\"></a>建立與設定 Git 空間</h3><ul>\n<li><p>先在 github 上新增一個專案叫與帳號一樣命名叫做“[yourname].github.io”</p>\n<blockquote>\n<p>建立完成後會有教你如何建立commit &amp; push的語法，建議要先建立連結，之後部署才會順利．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git push -u origin master</span><br></pre></td></tr></table></figure>\n\n</blockquote>\n</li>\n<li><p>配置 _config.yml</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"產生靜態文件-Generate-static-files\"><a href=\"#產生靜態文件-Generate-static-files\" class=\"headerlink\" title=\"產生靜態文件 Generate static files\"></a>產生靜態文件 Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 或是hexo g</span><br><span class=\"line\">會在public資料夾產生網站靜態檔案</span><br><span class=\"line\">這是用來部署到網站的檔案，記得每次部署前都要更新喔</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"一鍵部署\"><a href=\"#一鍵部署\" class=\"headerlink\" title=\"一鍵部署\"></a>一鍵部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">（略）</span><br><span class=\"line\">Branch <span class=\"string\">&#x27;master&#x27;</span> <span class=\"built_in\">set</span> up to track remote branch <span class=\"string\">&#x27;master&#x27;</span> from <span class=\"string\">&#x27;https://github.com/minilabmemo/minilabmemo.github.io&#x27;</span>.</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br><span class=\"line\">要看到這句才是部署成功，如果卡住可能要先檢查git連結是否正常．</span><br></pre></td></tr></table></figure>\n<p>其他空間部署說明(ex:heroku) More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<blockquote>\n<p>註：部署會上傳至剛剛config的位置，測試發現只會上傳web檔案相關如果有上傳source/theme 檔案也會被移除．<br>因為在開發環境時可以先開一個src branch 來控管原始檔案．<br><br>branch - src (have all files)<br><br>branch - master (only web files)</p>\n</blockquote>\n<h3 id=\"個人網站網址\"><a href=\"#個人網站網址\" class=\"headerlink\" title=\"個人網站網址\"></a>個人網站網址</h3><p><a href=\"https://yourname.github.io/\">https://yourname.github.io/</a></p>\n<p>這樣就大功告成啦！🎉🎉🎉（註：有時要稍等一下才會看到更新）</p>\n<h3 id=\"清理靜態文件-Clean-static-files\"><a href=\"#清理靜態文件-Clean-static-files\" class=\"headerlink\" title=\"清理靜態文件 Clean static files\"></a>清理靜態文件 Clean static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">清除快取檔案 (db.json) 和已產生的靜態檔案 (public)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>label warning@下一篇會介紹如何更換主題及內文撰寫%}</p>\n</blockquote>\n<hr>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><p>Quick Start<br>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-tw/docs/commands.html\">HEXO 指令</a></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>cq %}</p>\n</blockquote>\n<h1 id=\"hexo-是什麼？\"><a href=\"#hexo-是什麼？\" class=\"headerlink\" title=\"hexo 是什麼？\"></a>hexo 是什麼？</h1><blockquote>\n<p>endcq %}</p>\n</blockquote>\n <blockquote class=\"blockquote-center\">\n\n<p>Hexo 是一個快速、簡單且強大的網誌框架。Hexo 使用 Markdown 標記語言解析您的文章，並在幾秒鐘內，透過漂亮的主題產生靜態檔案。（來自 <a href=\"https://hexo.io/zh-tw/docs/\">https://hexo.io/zh-tw/docs/</a> 說明）</p></blockquote><p></p>\n<h1 id=\"本文將會知道\"><a href=\"#本文將會知道\" class=\"headerlink\" title=\"本文將會知道\"></a>本文將會知道</h1><ol>\n<li>如何使用 Hexo 產生部落格 （超快速，只要看到這邊就建好囉！）</li>\n<li>如何使用 markdown 撰寫文章</li>\n<li>如何部署到 github 個人網頁</li>\n<li>如何更改主題與內文風格 (本站用到的所有修改介紹，移到下一篇)</li>\n</ol>","more":"<h2 id=\"安裝-hexo-與初始化部落格\"><a href=\"#安裝-hexo-與初始化部落格\" class=\"headerlink\" title=\"安裝 hexo 與初始化部落格\"></a>安裝 hexo 與初始化部落格</h2><h3 id=\"產生基本部落格結構\"><a href=\"#產生基本部落格結構\" class=\"headerlink\" title=\"產生基本部落格結構\"></a>產生基本部落格結構</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">安裝工具 （使用npm安裝 可先安裝Node：https:&#x2F;&#x2F;nodejs.org&#x2F;en&#x2F;）</span><br><span class=\"line\">$ npm install -g hexo-cli</span><br><span class=\"line\">初始資料夾</span><br><span class=\"line\">$ hexo init &lt;folder&gt;</span><br><span class=\"line\">進入資料夾及安裝相依</span><br><span class=\"line\">$ cd &lt;folder&gt;</span><br><span class=\"line\">$ npm install</span><br><span class=\"line\">這邊就已經做好初始化了</span><br></pre></td></tr></table></figure>\n<h3 id=\"啟動部落格-Run-server\"><a href=\"#啟動部落格-Run-server\" class=\"headerlink\" title=\"啟動部落格 Run server\"></a>啟動部落格 Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br><span class=\"line\">開啟瀏覽器 http://localhost:4000 就可以看到部落格了💕💕💕</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"（紀錄）顯示版本資訊\"><a href=\"#（紀錄）顯示版本資訊\" class=\"headerlink\" title=\"（紀錄）顯示版本資訊\"></a>（紀錄）顯示版本資訊</h3><p>（有需要的話，可以查詢對應安裝版本）知道自己安裝的版本，對於之後查詢問題是很有幫助的喔！</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo version</span><br><span class=\"line\">(node:5190) ExperimentalWarning: The fs.promises API is experimental</span><br><span class=\"line\">INFO  Validating config</span><br><span class=\"line\">hexo: 5.1.1</span><br><span class=\"line\">hexo-cli: 4.2.0</span><br><span class=\"line\">os: Darwin 19.0.0 darwin x64</span><br><span class=\"line\">http_parser: 2.8.0</span><br><span class=\"line\">node: 10.16.3</span><br><span class=\"line\">v8: 6.8.275.32-node.54</span><br><span class=\"line\">uv: 1.28.0</span><br><span class=\"line\">zlib: 1.2.11</span><br><span class=\"line\">brotli: 1.0.7</span><br><span class=\"line\">ares: 1.15.0</span><br><span class=\"line\">modules: 64</span><br><span class=\"line\">nghttp2: 1.39.2</span><br><span class=\"line\">napi: 4</span><br><span class=\"line\">openssl: 1.1.1c</span><br><span class=\"line\">icu: 64.2</span><br><span class=\"line\">unicode: 12.1</span><br><span class=\"line\">cldr: 35.1</span><br><span class=\"line\">tz: 2019a</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"開始撰寫文章\"><a href=\"#開始撰寫文章\" class=\"headerlink\" title=\"開始撰寫文章\"></a>開始撰寫文章</h2><h3 id=\"新增文章\"><a href=\"#新增文章\" class=\"headerlink\" title=\"新增文章\"></a>新增文章</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br><span class=\"line\">(預設)會在<span class=\"built_in\">source</span>/＿posts 底下新增一個 .md 檔案</span><br><span class=\"line\"></span><br><span class=\"line\">$ hexo new draft <span class=\"string\">&quot;My New Post&quot;</span> //指定生成草稿</span><br><span class=\"line\">會在<span class=\"built_in\">source</span>/＿draft 底下新增一個 .md 檔案</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"撰寫文章\"><a href=\"#撰寫文章\" class=\"headerlink\" title=\"撰寫文章\"></a>撰寫文章</h3><p>在剛剛新增的檔案開始採用 markdown 語法開始撰寫文章．</p>\n<ul>\n<li><p>可以找線上編輯器工具幫助撰寫及預覽，「自己習慣用這一個<a href=\"https://markdown-editor.github.io/%E3%80%8D\">https://markdown-editor.github.io/」</a> ，編輯完再貼過來內文．</p>\n</li>\n<li><p>如對語法有一點熟悉，就直接用 vscode 打開檔案開始撰寫內文，並可以安裝 vscode markdown preview 插件，邊改邊預覽．</p>\n</li>\n<li><p>編寫完再啟動部落格並在瀏覽器查看效果． （可帶–draft 顯示草稿）</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo s --draft</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h2 id=\"部署網站\"><a href=\"#部署網站\" class=\"headerlink\" title=\"部署網站\"></a>部署網站</h2><h3 id=\"建立與設定-Git-空間\"><a href=\"#建立與設定-Git-空間\" class=\"headerlink\" title=\"建立與設定 Git 空間\"></a>建立與設定 Git 空間</h3><ul>\n<li><p>先在 github 上新增一個專案叫與帳號一樣命名叫做“[yourname].github.io”</p>\n<blockquote>\n<p>建立完成後會有教你如何建立commit &amp; push的語法，建議要先建立連結，之後部署才會順利．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;git push -u origin master</span><br></pre></td></tr></table></figure>\n\n</blockquote>\n</li>\n<li><p>配置 _config.yml</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https:&#x2F;&#x2F;github.com&#x2F;yourname&#x2F;yourname.github.io</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"產生靜態文件-Generate-static-files\"><a href=\"#產生靜態文件-Generate-static-files\" class=\"headerlink\" title=\"產生靜態文件 Generate static files\"></a>產生靜態文件 Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate 或是hexo g</span><br><span class=\"line\">會在public資料夾產生網站靜態檔案</span><br><span class=\"line\">這是用來部署到網站的檔案，記得每次部署前都要更新喔</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"一鍵部署\"><a href=\"#一鍵部署\" class=\"headerlink\" title=\"一鍵部署\"></a>一鍵部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br><span class=\"line\">（略）</span><br><span class=\"line\">Branch <span class=\"string\">&#x27;master&#x27;</span> <span class=\"built_in\">set</span> up to track remote branch <span class=\"string\">&#x27;master&#x27;</span> from <span class=\"string\">&#x27;https://github.com/minilabmemo/minilabmemo.github.io&#x27;</span>.</span><br><span class=\"line\">INFO  Deploy <span class=\"keyword\">done</span>: git</span><br><span class=\"line\">要看到這句才是部署成功，如果卡住可能要先檢查git連結是否正常．</span><br></pre></td></tr></table></figure>\n<p>其他空間部署說明(ex:heroku) More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n<blockquote>\n<p>註：部署會上傳至剛剛config的位置，測試發現只會上傳web檔案相關如果有上傳source/theme 檔案也會被移除．<br>因為在開發環境時可以先開一個src branch 來控管原始檔案．<br><br>branch - src (have all files)<br><br>branch - master (only web files)</p>\n</blockquote>\n<h3 id=\"個人網站網址\"><a href=\"#個人網站網址\" class=\"headerlink\" title=\"個人網站網址\"></a>個人網站網址</h3><p><a href=\"https://yourname.github.io/\">https://yourname.github.io/</a></p>\n<p>這樣就大功告成啦！🎉🎉🎉（註：有時要稍等一下才會看到更新）</p>\n<h3 id=\"清理靜態文件-Clean-static-files\"><a href=\"#清理靜態文件-Clean-static-files\" class=\"headerlink\" title=\"清理靜態文件 Clean static files\"></a>清理靜態文件 Clean static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">清除快取檔案 (db.json) 和已產生的靜態檔案 (public)</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>label warning@下一篇會介紹如何更換主題及內文撰寫%}</p>\n</blockquote>\n<hr>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><p>Quick Start<br>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a></p>\n</li>\n<li><p><a href=\"https://hexo.io/zh-tw/docs/commands.html\">HEXO 指令</a></p>\n</li>\n</ul>"},{"title":"[Blog] 使用 Hexo 撰寫部落格 02- 更換主題編寫與個人化設定","date":"2022-05-01T02:06:30.000Z","_content":"\n> 上一篇已經建立好基本網站架構了，這篇收集本站所有更改主題及更換的個人化設定．\n<!--more-->\n\n### 更換主網站設定檔\n\n主網站設定檔位置：/your folder/\\_config.yml，可以在此編輯基本網站說明．\n\n```\ntitle: '程式筆記\nsubtitle: ' Ｍemo '\ndescription: ''\nkeywords:\nauthor: xxx\nlanguage: zh-TW\n語言可以改為繁體中文，但對應顯示語言可以在以下位置修改：\n/your folder/themes/next-reloaded/languages/zh-TW.yml\n```\n\n#### 更換主題\n\n- Hexo 預設主題是 landscape\n\n- 想要更換主題依下列步驟即可：\n\n1. 在 hexo 網站上挑選主題：https://hexo.io/themes/\n2. 然後依照教學 ~~clone 對方的主題到自己的 theme 資料夾(通常都有 git 指令，在自己資料夾照下即可)~~\n- 20220405更新 使用fork對方的主題庫到自己的庫，然後用submodule進theme資料夾\n3. 修改主網站設定\\_config.yml 來更換\n\n\n---\n##### 部署修改紀錄 （可跳至最後一步）\n\n\n- 本部落格採用 Next，它是一個相當熱門的主題,且有很多中文文檔說明，我也是看了範例網站，真的太喜歡才決定架 hexo 的，紀錄操作步驟如下．\n\n- (`嘗試1:啟動失敗`)>label danger@失敗 %} 更換主題\n\n  1. git clone https://github.com/iissnan/hexo-theme-next themes/next:\n\n  2. config.yml 換成 theme：next，但是啟動 hexo s 後，開啟的網站卻是亂碼參數頁面＠＠\n     啟動畫面也出現以下訊息：\n\n```\nWARN  ========================= ATTENTION! ==========================\n  ===============================================================\nWARN   NexT repository is moving here: https://github.com/theme-next\n  ===============================================================\nWARN   It's rebase to v6.0.0 and future maintenance will resume there\n ===============================================================\n```\n\n原因應該是找到的文章教學，clone 來源太舊了？改參考官方更新步驟[从 NexT v5.1.x 更新](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md \"从 NexT v5.1.x 更新\")\n\n- （`嘗試2:啟動成功 但曾經部署網站成功後來失敗`)>label danger@失敗 %} 試著更換主題\n\n1. Clone v7.8.0 最新的倉庫（如放在 next-reloaded）：\n   $ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded\n   （v.5.1.4）\n2. 在 Hexo 的主配置文件中设置主题：\n   theme: next-reloaded\n3. 重新開啟就正常了\n\n- `嘗試3:成功`) >label success@現況Ｖ %} 2022 04 發現部署後 網站一直沒有更新，部署上傳後會跑部署流程，正常會有綠色勾勾，但某次之後都是紅色勾勾，點擊發現一直沒有辦法找到submoudule themes/next-reloaded\n - 排查過程：蠻奇怪的，不太懂沒有用到submoudule，不知道是不是殘留，部署的源碼也有看到theme/next-reloaded的連接．\n  1. 決定用fork方式一份自己的主題[my-hexo-theme-next)](https://github.com/minilabmemo/my-hexo-theme-next)，並用submoudule加入\n ```\n git submodule add https://github.com/xxx/my-hexo-theme-next.git themes/my-hexo-theme-next\n ```\n  2. 然後砍掉其他不要的主題，另外發現.deploy_git裡面有殘留theme/next-reloaded...等東西，就直接把.deploy_git資料夾整個砍掉，重新跑就部署成功了． （這時會發現.deploy_git跟上傳的檔案裡面都沒有theme中奇怪的next-reloaded的連接）\n\n\n>之後想更換別的主題也是這樣喔\n\n\n### 主題設定\n\n主題設定位置：/hexo-web/themes/next-reloaded/\\_config.yml\n\n#### 更換 NexT 版面風格\n\n```\nNextT 提供不同風格可以更換\n#scheme: Muse 選單在上方\n#scheme: Mist 選單在上方\nscheme: Pisces 選單在側邊\n```\n\n#### 新增文章標籤與分類\n\n1. 新增標籤與分類頁面\n\n```\nhexo new page tags\nhexo new page categories\n=====\nindex.md\n---\ntitle: categories\ndate: 2021-01-11 17:25:08\ntype: \"categories\"\n\n```\n\n2. 為文章加上 Tag 與 categories\n   在\\_posts/xxx.md 文章上方新增，差別在於標籤是並行的標示，而分類會有階層式關係．\n\n```\n---\ntitle: 使用Ｈexo 撰寫部落格\ntags:\n  - Testing\n  - Another Tag\n\n比較特別以下這種寫法代表階層關係Web->blog\ncategories:\n  - Web\n  - blog\n\n或是多分類表示法：代表Diary->Food...\ncategories:\n- [Diary, Food]\n- [Diary, Games]\n- [Life]\n---\n```\n\n3. 開啟menu頁面(側邊欄)\n\n```yaml _config.yml\n# Usage: `Key: /link/ || icon`\n# icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/\nmenu:\n  home: / || fa fa-home\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  tags: /tags/ || fa fa-tags\n  about: /about/ || fa fa-user\n```\n\n#### 新增個人頁面\n\n1. 新增關於我頁面\n\n```\nhexo new page about\n```\n\n2. 編輯頁面內容\n   [your folder]/source/about/index.md\n\n```\n---\ntitle: About Me\ndate: 2020-09-06 13:53:06\n---\nbla bla bla bla...\n```\n\n3. 開啟頁面\n\n```\n_config.yml\n# Usage: `Key: /link/ || icon`\n# icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/\nmenu:\n  home: / || fa fa-home\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  tags: /tags/ || fa fa-tags\n  about: /about/ || fa fa-user\n```\n\n#### 文章中顯示引言 (標籤外掛（Tag Plugins）)\n\n```\n有分號的上下引言，兩種皆可\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n>centerquote %}blah blah blah>endcenterquote %}\n<!-- 标签别名 -->\nblah blah blah\n\n單純的置中引言\n<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<!-- 其中 class=\"blockquote-center\" 是必须的 -->\n<blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n\n顯示效果在本文開頭喔\n\n```\n\n#### 文章中程式碼區塊\n\n##### 更改主題 \n/themes/next-reloaded/_config.yml\n\n```\n  highlight_theme: night\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    # Show text copy result.\n    show_result: true\n    # Available values: default | flat | mac\n    style: default\n```\n\n##### 標籤外掛（Tag Plugins）\n```go\n依序為 語言 左上標題 右上網址 網址名稱\n>codeblock lang:go terminal https://minilabmemo.github.io/ 完整程式碼 %}\ngo xxx\n>endcodeblock %}\n\n\\\\ Backtick Code Block\n```go  terminal https://minilabmemo.github.io/ 完整程式碼\n```diff\n- \n+ \n```\n- codeblock效果\n>codeblock lang:go terminal https://minilabmemo.github.io/ 完整程式碼 %}\ngo xxx\n>endcodeblock %}\n\n- Backtick Code Block效果\n```golang terminal https://minilabmemo.github.io/ 完整程式碼\ngo xxx\n```\n- diff效果\n```diff\n- go xxx\n+ go xxx\n```\n\n#### 文章開頭標記\n\n```\n>note class_name %} Content (md partial supported) \n其中class_name可不設或是改成下方關鍵字\n```\n\n>note class_name %} Content (不設定) 淡灰色 \n\n>note default %} 灰色 default \n\n>note primary %} 紫色 primary \n\n>note success %} 綠色 success \n\n>藍色 info \n\n>note warning %} 黃色 warning \n\n>note danger %} 紅色 danger \n\n主題\\_config 文件配置关键字：note，可修改成想要的風格\n\n```\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: flat\n  icons: true\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n\n#### 標籤標注\n>label info@標示藍色底色 %}\n>label warning@標示黃色底色 %}\n>label danger@標示danger底色 %}\n```\n>label info@標示藍色底色 %}\n>label warning@標示黃色底色 %}\n>label danger@標示danger底色 %}\n```\n\n#### 文章中貼上圖片\n\n```\n\n放置圖片在/your folder/themes/next-reloaded/source/images\n貼上相對路徑\n![my](/images/avatar_memo.png)\n或是用html寫法，可以控制大小\n<img src=\"/images/avatar_memo.png\" width=\"150px\" />\n\n```\n\n#### 開啟文章與網站訪問數字\n\n```\n主題內建不蒜子計數器\n_config.yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: fa fa-user\n  total_views: true\n  total_views_icon: fa fa-eye\n  post_views: true\n  post_views_icon: fa fa-eye\n\n本地預覽時底部訪問人數與總訪問的數字會異常大，這是正常现象\n只需要部署至雲端即可恢復正常\n```\n\n#### 在標頭放上可愛的 git 連結\n\n```\n_config.yml\ngithub_banner:\n  enable: true\n（本部落格右上角範例）\n```\n\n#### 顯示部落格作者照片\n\n```\n_config.yml\navatar：圖片網址\n```\n\n#### 放上個人社群連結\n\n```\nsocial\n可自由新增\n```\n\n#### 顯示閱讀進度百分比\n\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: false 顯示在右下角 true代表顯示在側邊欄\n  # Scroll percent label in b2t button.\n  scrollpercent: true 顯示百分比\n```\n\n\n### 個人化設定\n\n#### 預設新增文章模板\n\n修改 /scaffolds/post.md 新增自己預設內容\n\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories:\n---\nblabla..... 前言\n<!--more-->\u0006\n```\n\n意外發現的方法，藉由這樣修改 hexo new post 時就可以把基本的設定加好了\n\n\n### 參考文章\n- [NextT 開始使用](https://theme-next.iissnan.com/getting-started.html)\n- [NextT 主题配置](https://theme-next.iissnan.com/theme-settings.html)\n- [NextT 內置標籤](https://theme-next.iissnan.com/tag-plugins.html)\n- [Hexo 个人博客 NexT 主题设置 Scheme 外观](https://blog.csdn.net/mqdxiaoxiao/article/details/92843057?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param)\n- [hexo 页脚添加访客人数和总访问量](https://chrischen0405.github.io/2018/09/11/post20180911/)\n- [【Hexo插件系列】 常用tag](https://blog.eson.org/pub/fc959554/)\n\n#### deploy\n- [在 hexo 中使用 git submodules 管理主題](https://www.gushiciku.cn/pl/2Vvn/zh-tw)\n- [用Github Pages+Hexo搭建博客之(七)如何删除一篇已经发布的文章 #成功解决：同时删除掉.deploy_git文件夹](https://blog.csdn.net/qq_34243930/article/details/109046120)","source":"_posts/blog-hexo-02-themes.md","raw":"---\ntitle: \"[Blog] 使用 Hexo 撰寫部落格 02- 更換主題編寫與個人化設定\"\ntags:\n  - hexo\n  - blog\ncategories:\n  - Tech.\n  - Web\n  - blog\ndate: 2022-05-01 10:06:30\n---\n\n> 上一篇已經建立好基本網站架構了，這篇收集本站所有更改主題及更換的個人化設定．\n<!--more-->\n\n### 更換主網站設定檔\n\n主網站設定檔位置：/your folder/\\_config.yml，可以在此編輯基本網站說明．\n\n```\ntitle: '程式筆記\nsubtitle: ' Ｍemo '\ndescription: ''\nkeywords:\nauthor: xxx\nlanguage: zh-TW\n語言可以改為繁體中文，但對應顯示語言可以在以下位置修改：\n/your folder/themes/next-reloaded/languages/zh-TW.yml\n```\n\n#### 更換主題\n\n- Hexo 預設主題是 landscape\n\n- 想要更換主題依下列步驟即可：\n\n1. 在 hexo 網站上挑選主題：https://hexo.io/themes/\n2. 然後依照教學 ~~clone 對方的主題到自己的 theme 資料夾(通常都有 git 指令，在自己資料夾照下即可)~~\n- 20220405更新 使用fork對方的主題庫到自己的庫，然後用submodule進theme資料夾\n3. 修改主網站設定\\_config.yml 來更換\n\n\n---\n##### 部署修改紀錄 （可跳至最後一步）\n\n\n- 本部落格採用 Next，它是一個相當熱門的主題,且有很多中文文檔說明，我也是看了範例網站，真的太喜歡才決定架 hexo 的，紀錄操作步驟如下．\n\n- (`嘗試1:啟動失敗`)>label danger@失敗 %} 更換主題\n\n  1. git clone https://github.com/iissnan/hexo-theme-next themes/next:\n\n  2. config.yml 換成 theme：next，但是啟動 hexo s 後，開啟的網站卻是亂碼參數頁面＠＠\n     啟動畫面也出現以下訊息：\n\n```\nWARN  ========================= ATTENTION! ==========================\n  ===============================================================\nWARN   NexT repository is moving here: https://github.com/theme-next\n  ===============================================================\nWARN   It's rebase to v6.0.0 and future maintenance will resume there\n ===============================================================\n```\n\n原因應該是找到的文章教學，clone 來源太舊了？改參考官方更新步驟[从 NexT v5.1.x 更新](https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md \"从 NexT v5.1.x 更新\")\n\n- （`嘗試2:啟動成功 但曾經部署網站成功後來失敗`)>label danger@失敗 %} 試著更換主題\n\n1. Clone v7.8.0 最新的倉庫（如放在 next-reloaded）：\n   $ git clone https://github.com/theme-next/hexo-theme-next themes/next-reloaded\n   （v.5.1.4）\n2. 在 Hexo 的主配置文件中设置主题：\n   theme: next-reloaded\n3. 重新開啟就正常了\n\n- `嘗試3:成功`) >label success@現況Ｖ %} 2022 04 發現部署後 網站一直沒有更新，部署上傳後會跑部署流程，正常會有綠色勾勾，但某次之後都是紅色勾勾，點擊發現一直沒有辦法找到submoudule themes/next-reloaded\n - 排查過程：蠻奇怪的，不太懂沒有用到submoudule，不知道是不是殘留，部署的源碼也有看到theme/next-reloaded的連接．\n  1. 決定用fork方式一份自己的主題[my-hexo-theme-next)](https://github.com/minilabmemo/my-hexo-theme-next)，並用submoudule加入\n ```\n git submodule add https://github.com/xxx/my-hexo-theme-next.git themes/my-hexo-theme-next\n ```\n  2. 然後砍掉其他不要的主題，另外發現.deploy_git裡面有殘留theme/next-reloaded...等東西，就直接把.deploy_git資料夾整個砍掉，重新跑就部署成功了． （這時會發現.deploy_git跟上傳的檔案裡面都沒有theme中奇怪的next-reloaded的連接）\n\n\n>之後想更換別的主題也是這樣喔\n\n\n### 主題設定\n\n主題設定位置：/hexo-web/themes/next-reloaded/\\_config.yml\n\n#### 更換 NexT 版面風格\n\n```\nNextT 提供不同風格可以更換\n#scheme: Muse 選單在上方\n#scheme: Mist 選單在上方\nscheme: Pisces 選單在側邊\n```\n\n#### 新增文章標籤與分類\n\n1. 新增標籤與分類頁面\n\n```\nhexo new page tags\nhexo new page categories\n=====\nindex.md\n---\ntitle: categories\ndate: 2021-01-11 17:25:08\ntype: \"categories\"\n\n```\n\n2. 為文章加上 Tag 與 categories\n   在\\_posts/xxx.md 文章上方新增，差別在於標籤是並行的標示，而分類會有階層式關係．\n\n```\n---\ntitle: 使用Ｈexo 撰寫部落格\ntags:\n  - Testing\n  - Another Tag\n\n比較特別以下這種寫法代表階層關係Web->blog\ncategories:\n  - Web\n  - blog\n\n或是多分類表示法：代表Diary->Food...\ncategories:\n- [Diary, Food]\n- [Diary, Games]\n- [Life]\n---\n```\n\n3. 開啟menu頁面(側邊欄)\n\n```yaml _config.yml\n# Usage: `Key: /link/ || icon`\n# icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/\nmenu:\n  home: / || fa fa-home\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  tags: /tags/ || fa fa-tags\n  about: /about/ || fa fa-user\n```\n\n#### 新增個人頁面\n\n1. 新增關於我頁面\n\n```\nhexo new page about\n```\n\n2. 編輯頁面內容\n   [your folder]/source/about/index.md\n\n```\n---\ntitle: About Me\ndate: 2020-09-06 13:53:06\n---\nbla bla bla bla...\n```\n\n3. 開啟頁面\n\n```\n_config.yml\n# Usage: `Key: /link/ || icon`\n# icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/\nmenu:\n  home: / || fa fa-home\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  tags: /tags/ || fa fa-tags\n  about: /about/ || fa fa-user\n```\n\n#### 文章中顯示引言 (標籤外掛（Tag Plugins）)\n\n```\n有分號的上下引言，兩種皆可\n<!-- 标签 方式，要求版本在0.4.5或以上 -->\n>centerquote %}blah blah blah>endcenterquote %}\n<!-- 标签别名 -->\nblah blah blah\n\n單純的置中引言\n<!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 -->\n<!-- 其中 class=\"blockquote-center\" 是必须的 -->\n<blockquote class=\"blockquote-center\">blah blah blah</blockquote>\n\n顯示效果在本文開頭喔\n\n```\n\n#### 文章中程式碼區塊\n\n##### 更改主題 \n/themes/next-reloaded/_config.yml\n\n```\n  highlight_theme: night\n  # Add copy button on codeblock\n  copy_button:\n    enable: true\n    # Show text copy result.\n    show_result: true\n    # Available values: default | flat | mac\n    style: default\n```\n\n##### 標籤外掛（Tag Plugins）\n```go\n依序為 語言 左上標題 右上網址 網址名稱\n>codeblock lang:go terminal https://minilabmemo.github.io/ 完整程式碼 %}\ngo xxx\n>endcodeblock %}\n\n\\\\ Backtick Code Block\n```go  terminal https://minilabmemo.github.io/ 完整程式碼\n```diff\n- \n+ \n```\n- codeblock效果\n>codeblock lang:go terminal https://minilabmemo.github.io/ 完整程式碼 %}\ngo xxx\n>endcodeblock %}\n\n- Backtick Code Block效果\n```golang terminal https://minilabmemo.github.io/ 完整程式碼\ngo xxx\n```\n- diff效果\n```diff\n- go xxx\n+ go xxx\n```\n\n#### 文章開頭標記\n\n```\n>note class_name %} Content (md partial supported) \n其中class_name可不設或是改成下方關鍵字\n```\n\n>note class_name %} Content (不設定) 淡灰色 \n\n>note default %} 灰色 default \n\n>note primary %} 紫色 primary \n\n>note success %} 綠色 success \n\n>藍色 info \n\n>note warning %} 黃色 warning \n\n>note danger %} 紅色 danger \n\n主題\\_config 文件配置关键字：note，可修改成想要的風格\n\n```\nnote:\n  # Note tag style values:\n  #  - simple    bs-callout old alert style. Default.\n  #  - modern    bs-callout new (v2-v3) alert style.\n  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.\n  #  - disabled  disable all CSS styles import of note tag.\n  style: flat\n  icons: true\n  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).\n  # Offset also applied to label tag variables. This option can work with disabled note tag.\n  light_bg_offset: 0\n```\n\n#### 標籤標注\n>label info@標示藍色底色 %}\n>label warning@標示黃色底色 %}\n>label danger@標示danger底色 %}\n```\n>label info@標示藍色底色 %}\n>label warning@標示黃色底色 %}\n>label danger@標示danger底色 %}\n```\n\n#### 文章中貼上圖片\n\n```\n\n放置圖片在/your folder/themes/next-reloaded/source/images\n貼上相對路徑\n![my](/images/avatar_memo.png)\n或是用html寫法，可以控制大小\n<img src=\"/images/avatar_memo.png\" width=\"150px\" />\n\n```\n\n#### 開啟文章與網站訪問數字\n\n```\n主題內建不蒜子計數器\n_config.yml\nbusuanzi_count:\n  enable: true\n  total_visitors: true\n  total_visitors_icon: fa fa-user\n  total_views: true\n  total_views_icon: fa fa-eye\n  post_views: true\n  post_views_icon: fa fa-eye\n\n本地預覽時底部訪問人數與總訪問的數字會異常大，這是正常现象\n只需要部署至雲端即可恢復正常\n```\n\n#### 在標頭放上可愛的 git 連結\n\n```\n_config.yml\ngithub_banner:\n  enable: true\n（本部落格右上角範例）\n```\n\n#### 顯示部落格作者照片\n\n```\n_config.yml\navatar：圖片網址\n```\n\n#### 放上個人社群連結\n\n```\nsocial\n可自由新增\n```\n\n#### 顯示閱讀進度百分比\n\n```\nback2top:\n  enable: true\n  # Back to top in sidebar.\n  sidebar: false 顯示在右下角 true代表顯示在側邊欄\n  # Scroll percent label in b2t button.\n  scrollpercent: true 顯示百分比\n```\n\n\n### 個人化設定\n\n#### 預設新增文章模板\n\n修改 /scaffolds/post.md 新增自己預設內容\n\n```\n---\ntitle: {{ title }}\ndate: {{ date }}\ntags:\ncategories:\n---\nblabla..... 前言\n<!--more-->\u0006\n```\n\n意外發現的方法，藉由這樣修改 hexo new post 時就可以把基本的設定加好了\n\n\n### 參考文章\n- [NextT 開始使用](https://theme-next.iissnan.com/getting-started.html)\n- [NextT 主题配置](https://theme-next.iissnan.com/theme-settings.html)\n- [NextT 內置標籤](https://theme-next.iissnan.com/tag-plugins.html)\n- [Hexo 个人博客 NexT 主题设置 Scheme 外观](https://blog.csdn.net/mqdxiaoxiao/article/details/92843057?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param)\n- [hexo 页脚添加访客人数和总访问量](https://chrischen0405.github.io/2018/09/11/post20180911/)\n- [【Hexo插件系列】 常用tag](https://blog.eson.org/pub/fc959554/)\n\n#### deploy\n- [在 hexo 中使用 git submodules 管理主題](https://www.gushiciku.cn/pl/2Vvn/zh-tw)\n- [用Github Pages+Hexo搭建博客之(七)如何删除一篇已经发布的文章 #成功解决：同时删除掉.deploy_git文件夹](https://blog.csdn.net/qq_34243930/article/details/109046120)","slug":"blog-hexo-02-themes","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhaq0015kp2x1ecd3x7t","content":"<blockquote>\n<p>上一篇已經建立好基本網站架構了，這篇收集本站所有更改主題及更換的個人化設定．</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"更換主網站設定檔\"><a href=\"#更換主網站設定檔\" class=\"headerlink\" title=\"更換主網站設定檔\"></a>更換主網站設定檔</h3><p>主網站設定檔位置：/your folder/_config.yml，可以在此編輯基本網站說明．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#39;程式筆記</span><br><span class=\"line\">subtitle: &#39; Ｍemo &#39;</span><br><span class=\"line\">description: &#39;&#39;</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xxx</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">語言可以改為繁體中文，但對應顯示語言可以在以下位置修改：</span><br><span class=\"line\">&#x2F;your folder&#x2F;themes&#x2F;next-reloaded&#x2F;languages&#x2F;zh-TW.yml</span><br></pre></td></tr></table></figure>\n<h4 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h4><ul>\n<li><p>Hexo 預設主題是 landscape</p>\n</li>\n<li><p>想要更換主題依下列步驟即可：</p>\n</li>\n</ul>\n<ol>\n<li>在 hexo 網站上挑選主題：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>然後依照教學 <del>clone 對方的主題到自己的 theme 資料夾(通常都有 git 指令，在自己資料夾照下即可)</del></li>\n</ol>\n<ul>\n<li>20220405更新 使用fork對方的主題庫到自己的庫，然後用submodule進theme資料夾</li>\n</ul>\n<ol start=\"3\">\n<li>修改主網站設定_config.yml 來更換</li>\n</ol>\n<hr>\n<h5 id=\"部署修改紀錄-（可跳至最後一步）\"><a href=\"#部署修改紀錄-（可跳至最後一步）\" class=\"headerlink\" title=\"部署修改紀錄 （可跳至最後一步）\"></a>部署修改紀錄 （可跳至最後一步）</h5><ul>\n<li><p>本部落格採用 Next，它是一個相當熱門的主題,且有很多中文文檔說明，我也是看了範例網站，真的太喜歡才決定架 hexo 的，紀錄操作步驟如下．</p>\n</li>\n<li><p>(<code>嘗試1:啟動失敗</code>)&gt;label danger@失敗 %} 更換主題</p>\n<ol>\n<li><p>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes/next:</p>\n</li>\n<li><p>config.yml 換成 theme：next，但是啟動 hexo s 後，開啟的網站卻是亂碼參數頁面＠＠<br>啟動畫面也出現以下訊息：</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">WARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next</span><br><span class=\"line\">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">WARN   It&#39;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class=\"line\"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n<p>原因應該是找到的文章教學，clone 來源太舊了？改參考官方更新步驟<a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" title=\"从 NexT v5.1.x 更新\">从 NexT v5.1.x 更新</a></p>\n<ul>\n<li>（<code>嘗試2:啟動成功 但曾經部署網站成功後來失敗</code>)&gt;label danger@失敗 %} 試著更換主題</li>\n</ul>\n<ol>\n<li>Clone v7.8.0 最新的倉庫（如放在 next-reloaded）：<br>$ git clone <a href=\"https://github.com/theme-next/hexo-theme-next\">https://github.com/theme-next/hexo-theme-next</a> themes/next-reloaded<br>（v.5.1.4）</li>\n<li>在 Hexo 的主配置文件中设置主题：<br>theme: next-reloaded</li>\n<li>重新開啟就正常了</li>\n</ol>\n<ul>\n<li><code>嘗試3:成功</code>) &gt;label success@現況Ｖ %} 2022 04 發現部署後 網站一直沒有更新，部署上傳後會跑部署流程，正常會有綠色勾勾，但某次之後都是紅色勾勾，點擊發現一直沒有辦法找到submoudule themes/next-reloaded</li>\n<li>排查過程：蠻奇怪的，不太懂沒有用到submoudule，不知道是不是殘留，部署的源碼也有看到theme/next-reloaded的連接．</li>\n</ul>\n<ol>\n<li>決定用fork方式一份自己的主題<a href=\"https://github.com/minilabmemo/my-hexo-theme-next\">my-hexo-theme-next)</a>，並用submoudule加入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;my-hexo-theme-next.git themes&#x2F;my-hexo-theme-next</span><br></pre></td></tr></table></figure></li>\n<li>然後砍掉其他不要的主題，另外發現.deploy_git裡面有殘留theme/next-reloaded…等東西，就直接把.deploy_git資料夾整個砍掉，重新跑就部署成功了． （這時會發現.deploy_git跟上傳的檔案裡面都沒有theme中奇怪的next-reloaded的連接）</li>\n</ol>\n<blockquote>\n<p>之後想更換別的主題也是這樣喔</p>\n</blockquote>\n<h3 id=\"主題設定\"><a href=\"#主題設定\" class=\"headerlink\" title=\"主題設定\"></a>主題設定</h3><p>主題設定位置：/hexo-web/themes/next-reloaded/_config.yml</p>\n<h4 id=\"更換-NexT-版面風格\"><a href=\"#更換-NexT-版面風格\" class=\"headerlink\" title=\"更換 NexT 版面風格\"></a>更換 NexT 版面風格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NextT 提供不同風格可以更換</span><br><span class=\"line\">#scheme: Muse 選單在上方</span><br><span class=\"line\">#scheme: Mist 選單在上方</span><br><span class=\"line\">scheme: Pisces 選單在側邊</span><br></pre></td></tr></table></figure>\n<h4 id=\"新增文章標籤與分類\"><a href=\"#新增文章標籤與分類\" class=\"headerlink\" title=\"新增文章標籤與分類\"></a>新增文章標籤與分類</h4><ol>\n<li>新增標籤與分類頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">index.md</span><br><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-01-11 17:25:08</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>為文章加上 Tag 與 categories<br>在_posts/xxx.md 文章上方新增，差別在於標籤是並行的標示，而分類會有階層式關係．</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 使用Ｈexo 撰寫部落格</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\"></span><br><span class=\"line\">比較特別以下這種寫法代表階層關係Web-&gt;blog</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Web</span><br><span class=\"line\">  - blog</span><br><span class=\"line\"></span><br><span class=\"line\">或是多分類表示法：代表Diary-&gt;Food...</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [Diary, Food]</span><br><span class=\"line\">- [Diary, Games]</span><br><span class=\"line\">- [Life]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>開啟menu頁面(側邊欄)</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"新增個人頁面\"><a href=\"#新增個人頁面\" class=\"headerlink\" title=\"新增個人頁面\"></a>新增個人頁面</h4><ol>\n<li>新增關於我頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>編輯頁面內容<br>[your folder]/source/about/index.md</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: About Me</span><br><span class=\"line\">date: 2020-09-06 13:53:06</span><br><span class=\"line\">---</span><br><span class=\"line\">bla bla bla bla...</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>開啟頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\"># Usage: &#96;Key: &#x2F;link&#x2F; || icon&#96;</span><br><span class=\"line\"># icon 也可以自由置換 https:&#x2F;&#x2F;fontawesome.com&#x2F;v4.7.0&#x2F;icons&#x2F;</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中顯示引言-標籤外掛（Tag-Plugins）\"><a href=\"#文章中顯示引言-標籤外掛（Tag-Plugins）\" class=\"headerlink\" title=\"文章中顯示引言 (標籤外掛（Tag Plugins）)\"></a>文章中顯示引言 (標籤外掛（Tag Plugins）)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有分號的上下引言，兩種皆可</span><br><span class=\"line\">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class=\"line\">&gt;centerquote %&#125;blah blah blah&gt;endcenterquote %&#125;</span><br><span class=\"line\">&lt;!-- 标签别名 --&gt;</span><br><span class=\"line\">blah blah blah</span><br><span class=\"line\"></span><br><span class=\"line\">單純的置中引言</span><br><span class=\"line\">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class=\"line\">&lt;!-- 其中 class&#x3D;&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class=\"line\">&lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;blah blah blah&lt;&#x2F;blockquote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">顯示效果在本文開頭喔</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中程式碼區塊\"><a href=\"#文章中程式碼區塊\" class=\"headerlink\" title=\"文章中程式碼區塊\"></a>文章中程式碼區塊</h4><h5 id=\"更改主題\"><a href=\"#更改主題\" class=\"headerlink\" title=\"更改主題\"></a>更改主題</h5><p>/themes/next-reloaded/_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_theme: night</span><br><span class=\"line\"># Add copy button on codeblock</span><br><span class=\"line\">copy_button:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Show text copy result.</span><br><span class=\"line\">  show_result: true</span><br><span class=\"line\">  # Available values: default | flat | mac</span><br><span class=\"line\">  style: default</span><br></pre></td></tr></table></figure>\n<h5 id=\"標籤外掛（Tag-Plugins）\"><a href=\"#標籤外掛（Tag-Plugins）\" class=\"headerlink\" title=\"標籤外掛（Tag Plugins）\"></a>標籤外掛（Tag Plugins）</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依序為 語言 左上標題 右上網址 網址名稱</span><br><span class=\"line\">&gt;codeblock lang:<span class=\"keyword\">go</span> terminal https:<span class=\"comment\">//minilabmemo.github.io/ 完整程式碼 %&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> xxx</span><br><span class=\"line\">&gt;endcodeblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\ Backtick Code Block</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`go  terminal https://minilabmemo.github.io/ 完整程式碼</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>diff</span><br><span class=\"line\">- </span><br><span class=\"line\">+ </span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>codeblock效果</p>\n<blockquote>\n<p>codeblock lang:go terminal <a href=\"https://minilabmemo.github.io/\">https://minilabmemo.github.io/</a> 完整程式碼 %}<br>go xxx<br>endcodeblock %}</p>\n</blockquote>\n</li>\n<li><p>Backtick Code Block效果</p>\n<figure class=\"highlight golang\"><figcaption><span>terminal</span><a href=\"https://minilabmemo.github.io/\">完整程式碼</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> xxx</span><br></pre></td></tr></table></figure></li>\n<li><p>diff效果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- go xxx</span></span><br><span class=\"line\"><span class=\"addition\">+ go xxx</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章開頭標記\"><a href=\"#文章開頭標記\" class=\"headerlink\" title=\"文章開頭標記\"></a>文章開頭標記</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;note class_name %&#125; Content (md partial supported) </span><br><span class=\"line\">其中class_name可不設或是改成下方關鍵字</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} Content (不設定) 淡灰色 </p>\n</blockquote>\n<blockquote>\n<p>note default %} 灰色 default </p>\n</blockquote>\n<blockquote>\n<p>note primary %} 紫色 primary </p>\n</blockquote>\n<blockquote>\n<p>note success %} 綠色 success </p>\n</blockquote>\n<blockquote>\n<p>藍色 info </p>\n</blockquote>\n<blockquote>\n<p>note warning %} 黃色 warning </p>\n</blockquote>\n<blockquote>\n<p>note danger %} 紅色 danger </p>\n</blockquote>\n<p>主題_config 文件配置关键字：note，可修改成想要的風格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">note:</span><br><span class=\"line\">  # Note tag style values:</span><br><span class=\"line\">  #  - simple    bs-callout old alert style. Default.</span><br><span class=\"line\">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class=\"line\">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class=\"line\">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class=\"line\">  style: flat</span><br><span class=\"line\">  icons: true</span><br><span class=\"line\">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class=\"line\">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class=\"line\">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"標籤標注\"><a href=\"#標籤標注\" class=\"headerlink\" title=\"標籤標注\"></a>標籤標注</h4><blockquote>\n<p>label info@標示藍色底色 %}<br>label warning@標示黃色底色 %}<br>label danger@標示danger底色 %}</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;label info@標示藍色底色 %&#125;</span><br><span class=\"line\">&gt;label warning@標示黃色底色 %&#125;</span><br><span class=\"line\">&gt;label danger@標示danger底色 %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中貼上圖片\"><a href=\"#文章中貼上圖片\" class=\"headerlink\" title=\"文章中貼上圖片\"></a>文章中貼上圖片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">放置圖片在&#x2F;your folder&#x2F;themes&#x2F;next-reloaded&#x2F;source&#x2F;images</span><br><span class=\"line\">貼上相對路徑</span><br><span class=\"line\">![my](&#x2F;images&#x2F;avatar_memo.png)</span><br><span class=\"line\">或是用html寫法，可以控制大小</span><br><span class=\"line\">&lt;img src&#x3D;&quot;&#x2F;images&#x2F;avatar_memo.png&quot; width&#x3D;&quot;150px&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"開啟文章與網站訪問數字\"><a href=\"#開啟文章與網站訪問數字\" class=\"headerlink\" title=\"開啟文章與網站訪問數字\"></a>開啟文章與網站訪問數字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主題內建不蒜子計數器</span><br><span class=\"line\">_config.yml</span><br><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  total_visitors: true</span><br><span class=\"line\">  total_visitors_icon: fa fa-user</span><br><span class=\"line\">  total_views: true</span><br><span class=\"line\">  total_views_icon: fa fa-eye</span><br><span class=\"line\">  post_views: true</span><br><span class=\"line\">  post_views_icon: fa fa-eye</span><br><span class=\"line\"></span><br><span class=\"line\">本地預覽時底部訪問人數與總訪問的數字會異常大，這是正常现象</span><br><span class=\"line\">只需要部署至雲端即可恢復正常</span><br></pre></td></tr></table></figure>\n<h4 id=\"在標頭放上可愛的-git-連結\"><a href=\"#在標頭放上可愛的-git-連結\" class=\"headerlink\" title=\"在標頭放上可愛的 git 連結\"></a>在標頭放上可愛的 git 連結</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">github_banner:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">（本部落格右上角範例）</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示部落格作者照片\"><a href=\"#顯示部落格作者照片\" class=\"headerlink\" title=\"顯示部落格作者照片\"></a>顯示部落格作者照片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">avatar：圖片網址</span><br></pre></td></tr></table></figure>\n<h4 id=\"放上個人社群連結\"><a href=\"#放上個人社群連結\" class=\"headerlink\" title=\"放上個人社群連結\"></a>放上個人社群連結</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social</span><br><span class=\"line\">可自由新增</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示閱讀進度百分比\"><a href=\"#顯示閱讀進度百分比\" class=\"headerlink\" title=\"顯示閱讀進度百分比\"></a>顯示閱讀進度百分比</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: false 顯示在右下角 true代表顯示在側邊欄</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true 顯示百分比</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"個人化設定\"><a href=\"#個人化設定\" class=\"headerlink\" title=\"個人化設定\"></a>個人化設定</h3><h4 id=\"預設新增文章模板\"><a href=\"#預設新增文章模板\" class=\"headerlink\" title=\"預設新增文章模板\"></a>預設新增文章模板</h4><p>修改 /scaffolds/post.md 新增自己預設內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">---</span><br><span class=\"line\">blabla..... 前言</span><br><span class=\"line\">&lt;!--more--&gt;\u0006</span><br></pre></td></tr></table></figure>\n<p>意外發現的方法，藉由這樣修改 hexo new post 時就可以把基本的設定加好了</p>\n<h3 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h3><ul>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">NextT 開始使用</a></li>\n<li><a href=\"https://theme-next.iissnan.com/theme-settings.html\">NextT 主题配置</a></li>\n<li><a href=\"https://theme-next.iissnan.com/tag-plugins.html\">NextT 內置標籤</a></li>\n<li><a href=\"https://blog.csdn.net/mqdxiaoxiao/article/details/92843057?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param\">Hexo 个人博客 NexT 主题设置 Scheme 外观</a></li>\n<li><a href=\"https://chrischen0405.github.io/2018/09/11/post20180911/\">hexo 页脚添加访客人数和总访问量</a></li>\n<li><a href=\"https://blog.eson.org/pub/fc959554/\">【Hexo插件系列】 常用tag</a></li>\n</ul>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><ul>\n<li><a href=\"https://www.gushiciku.cn/pl/2Vvn/zh-tw\">在 hexo 中使用 git submodules 管理主題</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34243930/article/details/109046120\">用Github Pages+Hexo搭建博客之(七)如何删除一篇已经发布的文章 #成功解决：同时删除掉.deploy_git文件夹</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上一篇已經建立好基本網站架構了，這篇收集本站所有更改主題及更換的個人化設定．</p>\n</blockquote>","more":"<h3 id=\"更換主網站設定檔\"><a href=\"#更換主網站設定檔\" class=\"headerlink\" title=\"更換主網站設定檔\"></a>更換主網站設定檔</h3><p>主網站設定檔位置：/your folder/_config.yml，可以在此編輯基本網站說明．</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">title: &#39;程式筆記</span><br><span class=\"line\">subtitle: &#39; Ｍemo &#39;</span><br><span class=\"line\">description: &#39;&#39;</span><br><span class=\"line\">keywords:</span><br><span class=\"line\">author: xxx</span><br><span class=\"line\">language: zh-TW</span><br><span class=\"line\">語言可以改為繁體中文，但對應顯示語言可以在以下位置修改：</span><br><span class=\"line\">&#x2F;your folder&#x2F;themes&#x2F;next-reloaded&#x2F;languages&#x2F;zh-TW.yml</span><br></pre></td></tr></table></figure>\n<h4 id=\"更換主題\"><a href=\"#更換主題\" class=\"headerlink\" title=\"更換主題\"></a>更換主題</h4><ul>\n<li><p>Hexo 預設主題是 landscape</p>\n</li>\n<li><p>想要更換主題依下列步驟即可：</p>\n</li>\n</ul>\n<ol>\n<li>在 hexo 網站上挑選主題：<a href=\"https://hexo.io/themes/\">https://hexo.io/themes/</a></li>\n<li>然後依照教學 <del>clone 對方的主題到自己的 theme 資料夾(通常都有 git 指令，在自己資料夾照下即可)</del></li>\n</ol>\n<ul>\n<li>20220405更新 使用fork對方的主題庫到自己的庫，然後用submodule進theme資料夾</li>\n</ul>\n<ol start=\"3\">\n<li>修改主網站設定_config.yml 來更換</li>\n</ol>\n<hr>\n<h5 id=\"部署修改紀錄-（可跳至最後一步）\"><a href=\"#部署修改紀錄-（可跳至最後一步）\" class=\"headerlink\" title=\"部署修改紀錄 （可跳至最後一步）\"></a>部署修改紀錄 （可跳至最後一步）</h5><ul>\n<li><p>本部落格採用 Next，它是一個相當熱門的主題,且有很多中文文檔說明，我也是看了範例網站，真的太喜歡才決定架 hexo 的，紀錄操作步驟如下．</p>\n</li>\n<li><p>(<code>嘗試1:啟動失敗</code>)&gt;label danger@失敗 %} 更換主題</p>\n<ol>\n<li><p>git clone <a href=\"https://github.com/iissnan/hexo-theme-next\">https://github.com/iissnan/hexo-theme-next</a> themes/next:</p>\n</li>\n<li><p>config.yml 換成 theme：next，但是啟動 hexo s 後，開啟的網站卻是亂碼參數頁面＠＠<br>啟動畫面也出現以下訊息：</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">WARN  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; ATTENTION! &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">WARN   NexT repository is moving here: https:&#x2F;&#x2F;github.com&#x2F;theme-next</span><br><span class=\"line\">  &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">WARN   It&#39;s rebase to v6.0.0 and future maintenance will resume there</span><br><span class=\"line\"> &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br></pre></td></tr></table></figure>\n<p>原因應該是找到的文章教學，clone 來源太舊了？改參考官方更新步驟<a href=\"https://github.com/theme-next/hexo-theme-next/blob/master/docs/zh-CN/UPDATE-FROM-5.1.X.md\" title=\"从 NexT v5.1.x 更新\">从 NexT v5.1.x 更新</a></p>\n<ul>\n<li>（<code>嘗試2:啟動成功 但曾經部署網站成功後來失敗</code>)&gt;label danger@失敗 %} 試著更換主題</li>\n</ul>\n<ol>\n<li>Clone v7.8.0 最新的倉庫（如放在 next-reloaded）：<br>$ git clone <a href=\"https://github.com/theme-next/hexo-theme-next\">https://github.com/theme-next/hexo-theme-next</a> themes/next-reloaded<br>（v.5.1.4）</li>\n<li>在 Hexo 的主配置文件中设置主题：<br>theme: next-reloaded</li>\n<li>重新開啟就正常了</li>\n</ol>\n<ul>\n<li><code>嘗試3:成功</code>) &gt;label success@現況Ｖ %} 2022 04 發現部署後 網站一直沒有更新，部署上傳後會跑部署流程，正常會有綠色勾勾，但某次之後都是紅色勾勾，點擊發現一直沒有辦法找到submoudule themes/next-reloaded</li>\n<li>排查過程：蠻奇怪的，不太懂沒有用到submoudule，不知道是不是殘留，部署的源碼也有看到theme/next-reloaded的連接．</li>\n</ul>\n<ol>\n<li>決定用fork方式一份自己的主題<a href=\"https://github.com/minilabmemo/my-hexo-theme-next\">my-hexo-theme-next)</a>，並用submoudule加入<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git submodule add https:&#x2F;&#x2F;github.com&#x2F;xxx&#x2F;my-hexo-theme-next.git themes&#x2F;my-hexo-theme-next</span><br></pre></td></tr></table></figure></li>\n<li>然後砍掉其他不要的主題，另外發現.deploy_git裡面有殘留theme/next-reloaded…等東西，就直接把.deploy_git資料夾整個砍掉，重新跑就部署成功了． （這時會發現.deploy_git跟上傳的檔案裡面都沒有theme中奇怪的next-reloaded的連接）</li>\n</ol>\n<blockquote>\n<p>之後想更換別的主題也是這樣喔</p>\n</blockquote>\n<h3 id=\"主題設定\"><a href=\"#主題設定\" class=\"headerlink\" title=\"主題設定\"></a>主題設定</h3><p>主題設定位置：/hexo-web/themes/next-reloaded/_config.yml</p>\n<h4 id=\"更換-NexT-版面風格\"><a href=\"#更換-NexT-版面風格\" class=\"headerlink\" title=\"更換 NexT 版面風格\"></a>更換 NexT 版面風格</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">NextT 提供不同風格可以更換</span><br><span class=\"line\">#scheme: Muse 選單在上方</span><br><span class=\"line\">#scheme: Mist 選單在上方</span><br><span class=\"line\">scheme: Pisces 選單在側邊</span><br></pre></td></tr></table></figure>\n<h4 id=\"新增文章標籤與分類\"><a href=\"#新增文章標籤與分類\" class=\"headerlink\" title=\"新增文章標籤與分類\"></a>新增文章標籤與分類</h4><ol>\n<li>新增標籤與分類頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br><span class=\"line\">hexo new page categories</span><br><span class=\"line\">&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;</span><br><span class=\"line\">index.md</span><br><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">date: 2021-01-11 17:25:08</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>為文章加上 Tag 與 categories<br>在_posts/xxx.md 文章上方新增，差別在於標籤是並行的標示，而分類會有階層式關係．</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 使用Ｈexo 撰寫部落格</span><br><span class=\"line\">tags:</span><br><span class=\"line\">  - Testing</span><br><span class=\"line\">  - Another Tag</span><br><span class=\"line\"></span><br><span class=\"line\">比較特別以下這種寫法代表階層關係Web-&gt;blog</span><br><span class=\"line\">categories:</span><br><span class=\"line\">  - Web</span><br><span class=\"line\">  - blog</span><br><span class=\"line\"></span><br><span class=\"line\">或是多分類表示法：代表Diary-&gt;Food...</span><br><span class=\"line\">categories:</span><br><span class=\"line\">- [Diary, Food]</span><br><span class=\"line\">- [Diary, Games]</span><br><span class=\"line\">- [Life]</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>開啟menu頁面(側邊欄)</li>\n</ol>\n<figure class=\"highlight yaml\"><figcaption><span>_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Usage: `Key: /link/ || icon`</span></span><br><span class=\"line\"><span class=\"comment\"># icon 也可以自由置換 https://fontawesome.com/v4.7.0/icons/</span></span><br><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"新增個人頁面\"><a href=\"#新增個人頁面\" class=\"headerlink\" title=\"新增個人頁面\"></a>新增個人頁面</h4><ol>\n<li>新增關於我頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>編輯頁面內容<br>[your folder]/source/about/index.md</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: About Me</span><br><span class=\"line\">date: 2020-09-06 13:53:06</span><br><span class=\"line\">---</span><br><span class=\"line\">bla bla bla bla...</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>開啟頁面</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\"># Usage: &#96;Key: &#x2F;link&#x2F; || icon&#96;</span><br><span class=\"line\"># icon 也可以自由置換 https:&#x2F;&#x2F;fontawesome.com&#x2F;v4.7.0&#x2F;icons&#x2F;</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中顯示引言-標籤外掛（Tag-Plugins）\"><a href=\"#文章中顯示引言-標籤外掛（Tag-Plugins）\" class=\"headerlink\" title=\"文章中顯示引言 (標籤外掛（Tag Plugins）)\"></a>文章中顯示引言 (標籤外掛（Tag Plugins）)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">有分號的上下引言，兩種皆可</span><br><span class=\"line\">&lt;!-- 标签 方式，要求版本在0.4.5或以上 --&gt;</span><br><span class=\"line\">&gt;centerquote %&#125;blah blah blah&gt;endcenterquote %&#125;</span><br><span class=\"line\">&lt;!-- 标签别名 --&gt;</span><br><span class=\"line\">blah blah blah</span><br><span class=\"line\"></span><br><span class=\"line\">單純的置中引言</span><br><span class=\"line\">&lt;!-- HTML方式: 直接在 Markdown 文件中编写 HTML 来调用 --&gt;</span><br><span class=\"line\">&lt;!-- 其中 class&#x3D;&quot;blockquote-center&quot; 是必须的 --&gt;</span><br><span class=\"line\">&lt;blockquote class&#x3D;&quot;blockquote-center&quot;&gt;blah blah blah&lt;&#x2F;blockquote&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">顯示效果在本文開頭喔</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中程式碼區塊\"><a href=\"#文章中程式碼區塊\" class=\"headerlink\" title=\"文章中程式碼區塊\"></a>文章中程式碼區塊</h4><h5 id=\"更改主題\"><a href=\"#更改主題\" class=\"headerlink\" title=\"更改主題\"></a>更改主題</h5><p>/themes/next-reloaded/_config.yml</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">highlight_theme: night</span><br><span class=\"line\"># Add copy button on codeblock</span><br><span class=\"line\">copy_button:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Show text copy result.</span><br><span class=\"line\">  show_result: true</span><br><span class=\"line\">  # Available values: default | flat | mac</span><br><span class=\"line\">  style: default</span><br></pre></td></tr></table></figure>\n<h5 id=\"標籤外掛（Tag-Plugins）\"><a href=\"#標籤外掛（Tag-Plugins）\" class=\"headerlink\" title=\"標籤外掛（Tag Plugins）\"></a>標籤外掛（Tag Plugins）</h5><figure class=\"highlight go\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依序為 語言 左上標題 右上網址 網址名稱</span><br><span class=\"line\">&gt;codeblock lang:<span class=\"keyword\">go</span> terminal https:<span class=\"comment\">//minilabmemo.github.io/ 完整程式碼 %&#125;</span></span><br><span class=\"line\"><span class=\"keyword\">go</span> xxx</span><br><span class=\"line\">&gt;endcodeblock %&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\\\\ Backtick Code Block</span><br><span class=\"line\"><span class=\"string\">``</span><span class=\"string\">`go  terminal https://minilabmemo.github.io/ 完整程式碼</span></span><br><span class=\"line\"><span class=\"string\">`</span><span class=\"string\">``</span>diff</span><br><span class=\"line\">- </span><br><span class=\"line\">+ </span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>codeblock效果</p>\n<blockquote>\n<p>codeblock lang:go terminal <a href=\"https://minilabmemo.github.io/\">https://minilabmemo.github.io/</a> 完整程式碼 %}<br>go xxx<br>endcodeblock %}</p>\n</blockquote>\n</li>\n<li><p>Backtick Code Block效果</p>\n<figure class=\"highlight golang\"><figcaption><span>terminal</span><a href=\"https://minilabmemo.github.io/\">完整程式碼</a></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">go</span> xxx</span><br></pre></td></tr></table></figure></li>\n<li><p>diff效果</p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"deletion\">- go xxx</span></span><br><span class=\"line\"><span class=\"addition\">+ go xxx</span></span><br></pre></td></tr></table></figure>\n<h4 id=\"文章開頭標記\"><a href=\"#文章開頭標記\" class=\"headerlink\" title=\"文章開頭標記\"></a>文章開頭標記</h4></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;note class_name %&#125; Content (md partial supported) </span><br><span class=\"line\">其中class_name可不設或是改成下方關鍵字</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} Content (不設定) 淡灰色 </p>\n</blockquote>\n<blockquote>\n<p>note default %} 灰色 default </p>\n</blockquote>\n<blockquote>\n<p>note primary %} 紫色 primary </p>\n</blockquote>\n<blockquote>\n<p>note success %} 綠色 success </p>\n</blockquote>\n<blockquote>\n<p>藍色 info </p>\n</blockquote>\n<blockquote>\n<p>note warning %} 黃色 warning </p>\n</blockquote>\n<blockquote>\n<p>note danger %} 紅色 danger </p>\n</blockquote>\n<p>主題_config 文件配置关键字：note，可修改成想要的風格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">note:</span><br><span class=\"line\">  # Note tag style values:</span><br><span class=\"line\">  #  - simple    bs-callout old alert style. Default.</span><br><span class=\"line\">  #  - modern    bs-callout new (v2-v3) alert style.</span><br><span class=\"line\">  #  - flat      flat callout style with background, like on Mozilla or StackOverflow.</span><br><span class=\"line\">  #  - disabled  disable all CSS styles import of note tag.</span><br><span class=\"line\">  style: flat</span><br><span class=\"line\">  icons: true</span><br><span class=\"line\">  # Offset lighter of background in % for modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span><br><span class=\"line\">  # Offset also applied to label tag variables. This option can work with disabled note tag.</span><br><span class=\"line\">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>\n<h4 id=\"標籤標注\"><a href=\"#標籤標注\" class=\"headerlink\" title=\"標籤標注\"></a>標籤標注</h4><blockquote>\n<p>label info@標示藍色底色 %}<br>label warning@標示黃色底色 %}<br>label danger@標示danger底色 %}</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;label info@標示藍色底色 %&#125;</span><br><span class=\"line\">&gt;label warning@標示黃色底色 %&#125;</span><br><span class=\"line\">&gt;label danger@標示danger底色 %&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"文章中貼上圖片\"><a href=\"#文章中貼上圖片\" class=\"headerlink\" title=\"文章中貼上圖片\"></a>文章中貼上圖片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">放置圖片在&#x2F;your folder&#x2F;themes&#x2F;next-reloaded&#x2F;source&#x2F;images</span><br><span class=\"line\">貼上相對路徑</span><br><span class=\"line\">![my](&#x2F;images&#x2F;avatar_memo.png)</span><br><span class=\"line\">或是用html寫法，可以控制大小</span><br><span class=\"line\">&lt;img src&#x3D;&quot;&#x2F;images&#x2F;avatar_memo.png&quot; width&#x3D;&quot;150px&quot; &#x2F;&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"開啟文章與網站訪問數字\"><a href=\"#開啟文章與網站訪問數字\" class=\"headerlink\" title=\"開啟文章與網站訪問數字\"></a>開啟文章與網站訪問數字</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">主題內建不蒜子計數器</span><br><span class=\"line\">_config.yml</span><br><span class=\"line\">busuanzi_count:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  total_visitors: true</span><br><span class=\"line\">  total_visitors_icon: fa fa-user</span><br><span class=\"line\">  total_views: true</span><br><span class=\"line\">  total_views_icon: fa fa-eye</span><br><span class=\"line\">  post_views: true</span><br><span class=\"line\">  post_views_icon: fa fa-eye</span><br><span class=\"line\"></span><br><span class=\"line\">本地預覽時底部訪問人數與總訪問的數字會異常大，這是正常现象</span><br><span class=\"line\">只需要部署至雲端即可恢復正常</span><br></pre></td></tr></table></figure>\n<h4 id=\"在標頭放上可愛的-git-連結\"><a href=\"#在標頭放上可愛的-git-連結\" class=\"headerlink\" title=\"在標頭放上可愛的 git 連結\"></a>在標頭放上可愛的 git 連結</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">github_banner:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">（本部落格右上角範例）</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示部落格作者照片\"><a href=\"#顯示部落格作者照片\" class=\"headerlink\" title=\"顯示部落格作者照片\"></a>顯示部落格作者照片</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">_config.yml</span><br><span class=\"line\">avatar：圖片網址</span><br></pre></td></tr></table></figure>\n<h4 id=\"放上個人社群連結\"><a href=\"#放上個人社群連結\" class=\"headerlink\" title=\"放上個人社群連結\"></a>放上個人社群連結</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">social</span><br><span class=\"line\">可自由新增</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示閱讀進度百分比\"><a href=\"#顯示閱讀進度百分比\" class=\"headerlink\" title=\"顯示閱讀進度百分比\"></a>顯示閱讀進度百分比</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: false 顯示在右下角 true代表顯示在側邊欄</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true 顯示百分比</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"個人化設定\"><a href=\"#個人化設定\" class=\"headerlink\" title=\"個人化設定\"></a>個人化設定</h3><h4 id=\"預設新增文章模板\"><a href=\"#預設新增文章模板\" class=\"headerlink\" title=\"預設新增文章模板\"></a>預設新增文章模板</h4><p>修改 /scaffolds/post.md 新增自己預設內容</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: &#123;&#123; title &#125;&#125;</span><br><span class=\"line\">date: &#123;&#123; date &#125;&#125;</span><br><span class=\"line\">tags:</span><br><span class=\"line\">categories:</span><br><span class=\"line\">---</span><br><span class=\"line\">blabla..... 前言</span><br><span class=\"line\">&lt;!--more--&gt;\u0006</span><br></pre></td></tr></table></figure>\n<p>意外發現的方法，藉由這樣修改 hexo new post 時就可以把基本的設定加好了</p>\n<h3 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h3><ul>\n<li><a href=\"https://theme-next.iissnan.com/getting-started.html\">NextT 開始使用</a></li>\n<li><a href=\"https://theme-next.iissnan.com/theme-settings.html\">NextT 主题配置</a></li>\n<li><a href=\"https://theme-next.iissnan.com/tag-plugins.html\">NextT 內置標籤</a></li>\n<li><a href=\"https://blog.csdn.net/mqdxiaoxiao/article/details/92843057?utm_medium=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param&depth_1-utm_source=distribute.pc_relevant.none-task-blog-BlogCommendFromMachineLearnPai2-3.channel_param\">Hexo 个人博客 NexT 主题设置 Scheme 外观</a></li>\n<li><a href=\"https://chrischen0405.github.io/2018/09/11/post20180911/\">hexo 页脚添加访客人数和总访问量</a></li>\n<li><a href=\"https://blog.eson.org/pub/fc959554/\">【Hexo插件系列】 常用tag</a></li>\n</ul>\n<h4 id=\"deploy\"><a href=\"#deploy\" class=\"headerlink\" title=\"deploy\"></a>deploy</h4><ul>\n<li><a href=\"https://www.gushiciku.cn/pl/2Vvn/zh-tw\">在 hexo 中使用 git submodules 管理主題</a></li>\n<li><a href=\"https://blog.csdn.net/qq_34243930/article/details/109046120\">用Github Pages+Hexo搭建博客之(七)如何删除一篇已经发布的文章 #成功解决：同时删除掉.deploy_git文件夹</a></li>\n</ul>"},{"title":"[Blog] 使用 Hexo 撰寫部落格 03 - 外部資源/插件設定","date":"2022-02-03T02:06:30.000Z","_content":"\n> 外部也有一些插件與資源可以幫助部落格更加豐富，本篇記錄用到的外部插件使用方式．\n<!--more-->\n\n## 外部資源/插件設定\n\n### 標籤雲\n\n1.安裝插件\n\n```\nnpm i hexo-tag-cloud --save\n```\n\n2.配置主網站\\_config.yml\n要注意不要改錯檔案，不然可以看到標籤雲卻改不了樣式\n\n```\n# hexo-tag-cloud 標籤雲：see https://github.com/MikeCoder/hexo-tag-cloud\ntag_cloud:\n  textFont: Trebuchet MS, Helvetica # 字体\n  textColor: '#869ABF' # 字體颜色\n  textHeight: 12 # 字體高度\n  outlineColor: '#FFCFAB' # 字體背景色\n  maxSpeed: 0.1 # 標籤雲最大移動速度\n  pauseOnSelected: true # true 選中時停止移動\n```\n\n3. 修改主題側邊欄的語言內容\n   以 NexT 主题為例修改 layout/\\_macro/sidevar.swig 文件中在 sidebar-inner 新增\n\n```\n>if site.tags.length > 1 %}\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcloud.js') }}\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcanvas.js') }}\"></script>\n<div class=\"widget-wrap\">\n    <div id=\"myCanvasContainer\" class=\"widget tagcloud\">\n    <canvas width=\"220\" height=\"250\" id=\"resCanvas\" style=\"width=100%\">\n        {{ list_tags() }}\n    </canvas>\n    </div>\n</div>\n>endif %}\n\n```\n\n4. 作者 git 上的 Readme 說明 [by version 2.1.2]\n   建議可以關注 https://github.com/MikeCoder/ 說明動作操作\n\n```\n完成安装和显示，可以通过 hexo clean && hexo g && hexo s 来进行本地预览, hexo clean 为必须选项。\n**PS:不要使用 hexo g -d 或者 hexo d -g 这类组合命令。**详情见: Issue 7\n```\n\n\n### 新增Google Analytics 流量分析\nGoogle分析是一個由Google所提供的網站流量統計服務。Google 分析現在是網際網路上使用最廣泛的網路分析服務。\n\n（雖然這部落格只是用來來自己筆記的，流量應該很少，但想要用來玩玩看google的分析網站而試試）\n\n#### 1.註冊 google analysis\n這邊我註冊了一個帳戶名（yume），資源名稱為hexo_blog，名稱之後都可以更改，接著填寫一些想要分析的內容與目的等等，完成後就會得到一個資源，也會有資源ID（但這不是我們要的），點入該新建的資源後，再新增一個資源串流，就可以得到評估ＩＤ了．\n\n##### 代碼設定操作說明\n這邊提供了兩種方式說明：\n- 1.新增網頁內代碼，全域網站內有說明如果在網站上head區塊加入代碼範例或是使用google代碼管理工具．\n- 2.使用現有的網頁內代碼：內有提到gtag.js與你的評估ID資訊．\n\n#### 2.修改hexo的主題設定檔\n由於目前我用的主題已經有現有的相關代碼設定，因此只要在上面拿到的評估ID，貼到主題設定檔中的app_id裡就可以了．\n\n```yml themes/next-reloaded/_config.yml\n# Google Analytics\ngoogle_analytics:\n  tracking_id: # <app_id>\n  # By default, NexT will load an external gtag.js script on your site.\n  # If you only need the pageview feature, set the following option to true to get a better performance.\n  only_pageview: false\n```\n\n- 當然有的時候會遇到不失效的問題，網路有說有的代碼會去判斷主設定檔的hostname與github 是否\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://minilabmemo.github.io/\n```\n\n#### 最終效果\n網路上可說可以在剛剛的分頁按下測試，但發現並沒有，且一直出現過去48小時並未收到資料，\n不過實際瀏覽可以看到分析結果喔!!\n![GA.png)](/images/GA.png)\n\n\n## 參考文章\n- [Hexo 添加标签云](https://www.jianshu.com/p/2bb36378045d)\n- [Hexo 加上 Google analysis](https://op30132.github.io/2019/12/27/hexo-google-analysis/)\n- [Hexo的Next主题中配置Google Analytics之后不生效的问题](https://iamlay.com/2020/06/27/HexoGoogleAnalytics/)\n- [Hexo fluid 中关联 Google Anlytics 的具体方法](https://zhuanlan.zhihu.com/p/338903685)\n","source":"_posts/blog-hexo-03-plug.md","raw":"---\ntitle: \"[Blog] 使用 Hexo 撰寫部落格 03 - 外部資源/插件設定\"\ntags:\n  - hexo\n  - blog\n  - google_analytics\ncategories:\n  - Tech.\n  - Web\n  - blog\ndate: 2022-02-03 10:06:30\n---\n\n> 外部也有一些插件與資源可以幫助部落格更加豐富，本篇記錄用到的外部插件使用方式．\n<!--more-->\n\n## 外部資源/插件設定\n\n### 標籤雲\n\n1.安裝插件\n\n```\nnpm i hexo-tag-cloud --save\n```\n\n2.配置主網站\\_config.yml\n要注意不要改錯檔案，不然可以看到標籤雲卻改不了樣式\n\n```\n# hexo-tag-cloud 標籤雲：see https://github.com/MikeCoder/hexo-tag-cloud\ntag_cloud:\n  textFont: Trebuchet MS, Helvetica # 字体\n  textColor: '#869ABF' # 字體颜色\n  textHeight: 12 # 字體高度\n  outlineColor: '#FFCFAB' # 字體背景色\n  maxSpeed: 0.1 # 標籤雲最大移動速度\n  pauseOnSelected: true # true 選中時停止移動\n```\n\n3. 修改主題側邊欄的語言內容\n   以 NexT 主题為例修改 layout/\\_macro/sidevar.swig 文件中在 sidebar-inner 新增\n\n```\n>if site.tags.length > 1 %}\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcloud.js') }}\"></script>\n<script type=\"text/javascript\" charset=\"utf-8\" src=\"{{ url_for('/js/tagcanvas.js') }}\"></script>\n<div class=\"widget-wrap\">\n    <div id=\"myCanvasContainer\" class=\"widget tagcloud\">\n    <canvas width=\"220\" height=\"250\" id=\"resCanvas\" style=\"width=100%\">\n        {{ list_tags() }}\n    </canvas>\n    </div>\n</div>\n>endif %}\n\n```\n\n4. 作者 git 上的 Readme 說明 [by version 2.1.2]\n   建議可以關注 https://github.com/MikeCoder/ 說明動作操作\n\n```\n完成安装和显示，可以通过 hexo clean && hexo g && hexo s 来进行本地预览, hexo clean 为必须选项。\n**PS:不要使用 hexo g -d 或者 hexo d -g 这类组合命令。**详情见: Issue 7\n```\n\n\n### 新增Google Analytics 流量分析\nGoogle分析是一個由Google所提供的網站流量統計服務。Google 分析現在是網際網路上使用最廣泛的網路分析服務。\n\n（雖然這部落格只是用來來自己筆記的，流量應該很少，但想要用來玩玩看google的分析網站而試試）\n\n#### 1.註冊 google analysis\n這邊我註冊了一個帳戶名（yume），資源名稱為hexo_blog，名稱之後都可以更改，接著填寫一些想要分析的內容與目的等等，完成後就會得到一個資源，也會有資源ID（但這不是我們要的），點入該新建的資源後，再新增一個資源串流，就可以得到評估ＩＤ了．\n\n##### 代碼設定操作說明\n這邊提供了兩種方式說明：\n- 1.新增網頁內代碼，全域網站內有說明如果在網站上head區塊加入代碼範例或是使用google代碼管理工具．\n- 2.使用現有的網頁內代碼：內有提到gtag.js與你的評估ID資訊．\n\n#### 2.修改hexo的主題設定檔\n由於目前我用的主題已經有現有的相關代碼設定，因此只要在上面拿到的評估ID，貼到主題設定檔中的app_id裡就可以了．\n\n```yml themes/next-reloaded/_config.yml\n# Google Analytics\ngoogle_analytics:\n  tracking_id: # <app_id>\n  # By default, NexT will load an external gtag.js script on your site.\n  # If you only need the pageview feature, set the following option to true to get a better performance.\n  only_pageview: false\n```\n\n- 當然有的時候會遇到不失效的問題，網路有說有的代碼會去判斷主設定檔的hostname與github 是否\n```\n# URL\n## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'\nurl: https://minilabmemo.github.io/\n```\n\n#### 最終效果\n網路上可說可以在剛剛的分頁按下測試，但發現並沒有，且一直出現過去48小時並未收到資料，\n不過實際瀏覽可以看到分析結果喔!!\n![GA.png)](/images/GA.png)\n\n\n## 參考文章\n- [Hexo 添加标签云](https://www.jianshu.com/p/2bb36378045d)\n- [Hexo 加上 Google analysis](https://op30132.github.io/2019/12/27/hexo-google-analysis/)\n- [Hexo的Next主题中配置Google Analytics之后不生效的问题](https://iamlay.com/2020/06/27/HexoGoogleAnalytics/)\n- [Hexo fluid 中关联 Google Anlytics 的具体方法](https://zhuanlan.zhihu.com/p/338903685)\n","slug":"blog-hexo-03-plug","published":1,"updated":"2023-01-22T07:05:18.837Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhat0018kp2xcdgtbsj2","content":"<blockquote>\n<p>外部也有一些插件與資源可以幫助部落格更加豐富，本篇記錄用到的外部插件使用方式．</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"外部資源-插件設定\"><a href=\"#外部資源-插件設定\" class=\"headerlink\" title=\"外部資源/插件設定\"></a>外部資源/插件設定</h2><h3 id=\"標籤雲\"><a href=\"#標籤雲\" class=\"headerlink\" title=\"標籤雲\"></a>標籤雲</h3><p>1.安裝插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>\n<p>2.配置主網站_config.yml<br>要注意不要改錯檔案，不然可以看到標籤雲卻改不了樣式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-tag-cloud 標籤雲：see https:&#x2F;&#x2F;github.com&#x2F;MikeCoder&#x2F;hexo-tag-cloud</span><br><span class=\"line\">tag_cloud:</span><br><span class=\"line\">  textFont: Trebuchet MS, Helvetica # 字体</span><br><span class=\"line\">  textColor: &#39;#869ABF&#39; # 字體颜色</span><br><span class=\"line\">  textHeight: 12 # 字體高度</span><br><span class=\"line\">  outlineColor: &#39;#FFCFAB&#39; # 字體背景色</span><br><span class=\"line\">  maxSpeed: 0.1 # 標籤雲最大移動速度</span><br><span class=\"line\">  pauseOnSelected: true # true 選中時停止移動</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改主題側邊欄的語言內容<br>以 NexT 主题為例修改 layout/_macro/sidevar.swig 文件中在 sidebar-inner 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;if site.tags.length &gt; 1 %&#125;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcloud.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcanvas.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&quot;220&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width&#x3D;100%&quot;&gt;</span><br><span class=\"line\">        &#123;&#123; list_tags() &#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;canvas&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&gt;endif %&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>作者 git 上的 Readme 說明 [by version 2.1.2]<br>建議可以關注 <a href=\"https://github.com/MikeCoder/\">https://github.com/MikeCoder/</a> 說明動作操作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完成安装和显示，可以通过 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 来进行本地预览, hexo clean 为必须选项。</span><br><span class=\"line\">**PS:不要使用 hexo g -d 或者 hexo d -g 这类组合命令。**详情见: Issue 7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增Google-Analytics-流量分析\"><a href=\"#新增Google-Analytics-流量分析\" class=\"headerlink\" title=\"新增Google Analytics 流量分析\"></a>新增Google Analytics 流量分析</h3><p>Google分析是一個由Google所提供的網站流量統計服務。Google 分析現在是網際網路上使用最廣泛的網路分析服務。</p>\n<p>（雖然這部落格只是用來來自己筆記的，流量應該很少，但想要用來玩玩看google的分析網站而試試）</p>\n<h4 id=\"1-註冊-google-analysis\"><a href=\"#1-註冊-google-analysis\" class=\"headerlink\" title=\"1.註冊 google analysis\"></a>1.註冊 google analysis</h4><p>這邊我註冊了一個帳戶名（yume），資源名稱為hexo_blog，名稱之後都可以更改，接著填寫一些想要分析的內容與目的等等，完成後就會得到一個資源，也會有資源ID（但這不是我們要的），點入該新建的資源後，再新增一個資源串流，就可以得到評估ＩＤ了．</p>\n<h5 id=\"代碼設定操作說明\"><a href=\"#代碼設定操作說明\" class=\"headerlink\" title=\"代碼設定操作說明\"></a>代碼設定操作說明</h5><p>這邊提供了兩種方式說明：</p>\n<ul>\n<li>1.新增網頁內代碼，全域網站內有說明如果在網站上head區塊加入代碼範例或是使用google代碼管理工具．</li>\n<li>2.使用現有的網頁內代碼：內有提到gtag.js與你的評估ID資訊．</li>\n</ul>\n<h4 id=\"2-修改hexo的主題設定檔\"><a href=\"#2-修改hexo的主題設定檔\" class=\"headerlink\" title=\"2.修改hexo的主題設定檔\"></a>2.修改hexo的主題設定檔</h4><p>由於目前我用的主題已經有現有的相關代碼設定，因此只要在上面拿到的評估ID，貼到主題設定檔中的app_id裡就可以了．</p>\n<figure class=\"highlight yml\"><figcaption><span>themes/next-reloaded/_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">google_analytics:</span></span><br><span class=\"line\">  <span class=\"attr\">tracking_id:</span> <span class=\"comment\"># &lt;app_id&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># By default, NexT will load an external gtag.js script on your site.</span></span><br><span class=\"line\">  <span class=\"comment\"># If you only need the pageview feature, set the following option to true to get a better performance.</span></span><br><span class=\"line\">  <span class=\"attr\">only_pageview:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>當然有的時候會遇到不失效的問題，網路有說有的代碼會去判斷主設定檔的hostname與github 是否<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class=\"line\">url: https:&#x2F;&#x2F;minilabmemo.github.io&#x2F;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最終效果\"><a href=\"#最終效果\" class=\"headerlink\" title=\"最終效果\"></a>最終效果</h4>網路上可說可以在剛剛的分頁按下測試，但發現並沒有，且一直出現過去48小時並未收到資料，<br>不過實際瀏覽可以看到分析結果喔!!<br><img src=\"/images/GA.png\" alt=\"GA.png)\"></li>\n</ul>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/2bb36378045d\">Hexo 添加标签云</a></li>\n<li><a href=\"https://op30132.github.io/2019/12/27/hexo-google-analysis/\">Hexo 加上 Google analysis</a></li>\n<li><a href=\"https://iamlay.com/2020/06/27/HexoGoogleAnalytics/\">Hexo的Next主题中配置Google Analytics之后不生效的问题</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/338903685\">Hexo fluid 中关联 Google Anlytics 的具体方法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>外部也有一些插件與資源可以幫助部落格更加豐富，本篇記錄用到的外部插件使用方式．</p>\n</blockquote>","more":"<h2 id=\"外部資源-插件設定\"><a href=\"#外部資源-插件設定\" class=\"headerlink\" title=\"外部資源/插件設定\"></a>外部資源/插件設定</h2><h3 id=\"標籤雲\"><a href=\"#標籤雲\" class=\"headerlink\" title=\"標籤雲\"></a>標籤雲</h3><p>1.安裝插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i hexo-tag-cloud --save</span><br></pre></td></tr></table></figure>\n<p>2.配置主網站_config.yml<br>要注意不要改錯檔案，不然可以看到標籤雲卻改不了樣式</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># hexo-tag-cloud 標籤雲：see https:&#x2F;&#x2F;github.com&#x2F;MikeCoder&#x2F;hexo-tag-cloud</span><br><span class=\"line\">tag_cloud:</span><br><span class=\"line\">  textFont: Trebuchet MS, Helvetica # 字体</span><br><span class=\"line\">  textColor: &#39;#869ABF&#39; # 字體颜色</span><br><span class=\"line\">  textHeight: 12 # 字體高度</span><br><span class=\"line\">  outlineColor: &#39;#FFCFAB&#39; # 字體背景色</span><br><span class=\"line\">  maxSpeed: 0.1 # 標籤雲最大移動速度</span><br><span class=\"line\">  pauseOnSelected: true # true 選中時停止移動</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>修改主題側邊欄的語言內容<br>以 NexT 主题為例修改 layout/_macro/sidevar.swig 文件中在 sidebar-inner 新增</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;if site.tags.length &gt; 1 %&#125;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcloud.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; charset&#x3D;&quot;utf-8&quot; src&#x3D;&quot;&#123;&#123; url_for(&#39;&#x2F;js&#x2F;tagcanvas.js&#39;) &#125;&#125;&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;div class&#x3D;&quot;widget-wrap&quot;&gt;</span><br><span class=\"line\">    &lt;div id&#x3D;&quot;myCanvasContainer&quot; class&#x3D;&quot;widget tagcloud&quot;&gt;</span><br><span class=\"line\">    &lt;canvas width&#x3D;&quot;220&quot; height&#x3D;&quot;250&quot; id&#x3D;&quot;resCanvas&quot; style&#x3D;&quot;width&#x3D;100%&quot;&gt;</span><br><span class=\"line\">        &#123;&#123; list_tags() &#125;&#125;</span><br><span class=\"line\">    &lt;&#x2F;canvas&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&gt;endif %&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>作者 git 上的 Readme 說明 [by version 2.1.2]<br>建議可以關注 <a href=\"https://github.com/MikeCoder/\">https://github.com/MikeCoder/</a> 說明動作操作</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">完成安装和显示，可以通过 hexo clean &amp;&amp; hexo g &amp;&amp; hexo s 来进行本地预览, hexo clean 为必须选项。</span><br><span class=\"line\">**PS:不要使用 hexo g -d 或者 hexo d -g 这类组合命令。**详情见: Issue 7</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"新增Google-Analytics-流量分析\"><a href=\"#新增Google-Analytics-流量分析\" class=\"headerlink\" title=\"新增Google Analytics 流量分析\"></a>新增Google Analytics 流量分析</h3><p>Google分析是一個由Google所提供的網站流量統計服務。Google 分析現在是網際網路上使用最廣泛的網路分析服務。</p>\n<p>（雖然這部落格只是用來來自己筆記的，流量應該很少，但想要用來玩玩看google的分析網站而試試）</p>\n<h4 id=\"1-註冊-google-analysis\"><a href=\"#1-註冊-google-analysis\" class=\"headerlink\" title=\"1.註冊 google analysis\"></a>1.註冊 google analysis</h4><p>這邊我註冊了一個帳戶名（yume），資源名稱為hexo_blog，名稱之後都可以更改，接著填寫一些想要分析的內容與目的等等，完成後就會得到一個資源，也會有資源ID（但這不是我們要的），點入該新建的資源後，再新增一個資源串流，就可以得到評估ＩＤ了．</p>\n<h5 id=\"代碼設定操作說明\"><a href=\"#代碼設定操作說明\" class=\"headerlink\" title=\"代碼設定操作說明\"></a>代碼設定操作說明</h5><p>這邊提供了兩種方式說明：</p>\n<ul>\n<li>1.新增網頁內代碼，全域網站內有說明如果在網站上head區塊加入代碼範例或是使用google代碼管理工具．</li>\n<li>2.使用現有的網頁內代碼：內有提到gtag.js與你的評估ID資訊．</li>\n</ul>\n<h4 id=\"2-修改hexo的主題設定檔\"><a href=\"#2-修改hexo的主題設定檔\" class=\"headerlink\" title=\"2.修改hexo的主題設定檔\"></a>2.修改hexo的主題設定檔</h4><p>由於目前我用的主題已經有現有的相關代碼設定，因此只要在上面拿到的評估ID，貼到主題設定檔中的app_id裡就可以了．</p>\n<figure class=\"highlight yml\"><figcaption><span>themes/next-reloaded/_config.yml</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Google Analytics</span></span><br><span class=\"line\"><span class=\"attr\">google_analytics:</span></span><br><span class=\"line\">  <span class=\"attr\">tracking_id:</span> <span class=\"comment\"># &lt;app_id&gt;</span></span><br><span class=\"line\">  <span class=\"comment\"># By default, NexT will load an external gtag.js script on your site.</span></span><br><span class=\"line\">  <span class=\"comment\"># If you only need the pageview feature, set the following option to true to get a better performance.</span></span><br><span class=\"line\">  <span class=\"attr\">only_pageview:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>當然有的時候會遇到不失效的問題，網路有說有的代碼會去判斷主設定檔的hostname與github 是否<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># URL</span><br><span class=\"line\">## If your site is put in a subdirectory, set url as &#39;http:&#x2F;&#x2F;yoursite.com&#x2F;child&#39; and root as &#39;&#x2F;child&#x2F;&#39;</span><br><span class=\"line\">url: https:&#x2F;&#x2F;minilabmemo.github.io&#x2F;</span><br></pre></td></tr></table></figure>\n<h4 id=\"最終效果\"><a href=\"#最終效果\" class=\"headerlink\" title=\"最終效果\"></a>最終效果</h4>網路上可說可以在剛剛的分頁按下測試，但發現並沒有，且一直出現過去48小時並未收到資料，<br>不過實際瀏覽可以看到分析結果喔!!<br><img src=\"/images/GA.png\" alt=\"GA.png)\"></li>\n</ul>\n<h2 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/2bb36378045d\">Hexo 添加标签云</a></li>\n<li><a href=\"https://op30132.github.io/2019/12/27/hexo-google-analysis/\">Hexo 加上 Google analysis</a></li>\n<li><a href=\"https://iamlay.com/2020/06/27/HexoGoogleAnalytics/\">Hexo的Next主题中配置Google Analytics之后不生效的问题</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/338903685\">Hexo fluid 中关联 Google Anlytics 的具体方法</a></li>\n</ul>"},{"title":"[Blog] 使用 Hugo 撰寫部落格","date":"2020-09-01T09:23:46.000Z","_content":"\n> 本章介紹如何在套用 hugo 做好一個自己的部落格網站．並上傳 github\n\n---\n\n2020.09 更新： 因為找不到主題可以將文章標題透過階層式瀏覽，所以後來改用 hexo（就是現在這邊網站用的樣式），使用上部署也較 hugo 方便，本篇紀錄當時的 hugo 建立留存．\n\n- 建立部落格前可以先分別上 hexo/hugo 官網查看主題效果，看自己喜歡哪一種再建立．\n- hexo 教學文請看： [使用Ｈ exo 撰寫部落格](https://minilabmemo.github.io/2020/08/31/hexo-hello-world/)\n- gohugo作者Steve Francia\n\n\n<!--more-->\n\n#### Step 1: 安裝 Hugo\n\n開啟終端機，依序執行下列指令：\n\n```\n* brew install hugo\n//macOs 須先安裝Homebrew\n* hugo version\n//確認安裝成功版本\nHugo Static Site Generator v0.69.0/extended darwin/amd64 BuildDate: unknow\n* hugo new site **website-hugo**\n* cd **website-hugo**\n// 新增網站，粗體可以自命名，安裝完會新增該資料夾\n```\n\n#### Step 2: 新增主題\n\nhttps://themes.gohugo.io/\nhugo 網站有很多可以選擇與查看效果\n進入該主題的 github/README 可以看安裝步驟執行\n基本執行：git submodule add https://github.com/alex-shpak/hugo-book themes/book\n//這樣就會在**website-hugo**/themes/新增主題\n\n#### Step 3: 編輯 config.toml\n\n這檔案與整體網站設定有關\n\n> baseURL = \"https://xxx.github.io/\"  \n> languageCode = \"zh-tw\"\n> title = \"xxx Blog\"\n\n- #domain 設定 xxx 改成你的 GitHub 帳號名稱\n- 根據主題不同 這檔案也可能會有更多不同設定\n  ex: 設定主題 theme = \"ananke\"\n\n#### Step 4: 新增文章\n\n- hugo new posts/my-first-post.md\n  新增預設檔案在以下位置 採用 markdown 編寫\n  content/<CATEGORY>/<FILE>.<FORMAT>\n  > title: \"My First Post\"\n  > date: 2019-03-26T08:47:11+01:00\n  > draft: true //是草稿是否 改成 false 可被發布\n\n可以根據主題新增：\ntags: [\"hugo\", \"web\"]\nsummary: \"The summary image should be a custom one\"\nsummaryImage: \"summary_2.jpg\"\nresources:\n\n- src: summary_2.jpg\n\n- 圖片新增\n  將圖片放置在 website-hugo/static/images\n  文章內可用相對路徑新增![](/images/xxx)\n\n#### Step 5: 啟動本地 server\n\n- hugo server -D\n  Web Server is available at http://localhost:1313/\n  Press Ctrl+C to stop\n  記得結束務必按 不然下次啟動會佔用\n\n#### Step 6: 產生靜態檔案\n\nＤ 參數代表要不要輸出草稿文章\nBuild static pages\n\n- hugo -D\n\n將會生成./public/ 資料夾，\n每次編輯完要記得更新，之後發布的時候也要上傳\n\n---\n\n#### Step 7:githug 網站上傳\n\n新增兩個 repo\nxxx.github.io (xxx 改成自己的帳號名稱)\nwebsite-hugo 上述的 site 名稱\n\n上傳 public 資料夾\n\n> cd public\n> git init\n> git remote add origin https://github.com/xxx/xxx.github.io.git\n> git add .\n> git commit -m \"Initial commit\"\n> git push -u origin master\n\n上傳整個 website-hugo 資料夾\n\n> cd ../\n> git init\n> git remote add origin https://github.com/xxx/website-hugo.git\n> git add .\n> git commit -m \"Initial commit\"\n> git push -u origin master\n\n開啟https://xxx.github.io/ 等個幾分鐘會看到結果\n\n>note class_name %} #### 參考文章 \n\n- [ＨＵＧＯ官網](https://gohugo.io/getting-started/quick-start/)\n- [在-github-部署-hugo-靜態網站](https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40)\n","source":"_posts/blog-hugo.md","raw":"---\ntitle: \"[Blog] 使用 Hugo 撰寫部落格\"\ndate: 2020.09.01 17:23:46\ntags:\n  - hugo\n  - blog\ncategories:\n  - Tech.\n  - Web\n  - blog\n---\n\n> 本章介紹如何在套用 hugo 做好一個自己的部落格網站．並上傳 github\n\n---\n\n2020.09 更新： 因為找不到主題可以將文章標題透過階層式瀏覽，所以後來改用 hexo（就是現在這邊網站用的樣式），使用上部署也較 hugo 方便，本篇紀錄當時的 hugo 建立留存．\n\n- 建立部落格前可以先分別上 hexo/hugo 官網查看主題效果，看自己喜歡哪一種再建立．\n- hexo 教學文請看： [使用Ｈ exo 撰寫部落格](https://minilabmemo.github.io/2020/08/31/hexo-hello-world/)\n- gohugo作者Steve Francia\n\n\n<!--more-->\n\n#### Step 1: 安裝 Hugo\n\n開啟終端機，依序執行下列指令：\n\n```\n* brew install hugo\n//macOs 須先安裝Homebrew\n* hugo version\n//確認安裝成功版本\nHugo Static Site Generator v0.69.0/extended darwin/amd64 BuildDate: unknow\n* hugo new site **website-hugo**\n* cd **website-hugo**\n// 新增網站，粗體可以自命名，安裝完會新增該資料夾\n```\n\n#### Step 2: 新增主題\n\nhttps://themes.gohugo.io/\nhugo 網站有很多可以選擇與查看效果\n進入該主題的 github/README 可以看安裝步驟執行\n基本執行：git submodule add https://github.com/alex-shpak/hugo-book themes/book\n//這樣就會在**website-hugo**/themes/新增主題\n\n#### Step 3: 編輯 config.toml\n\n這檔案與整體網站設定有關\n\n> baseURL = \"https://xxx.github.io/\"  \n> languageCode = \"zh-tw\"\n> title = \"xxx Blog\"\n\n- #domain 設定 xxx 改成你的 GitHub 帳號名稱\n- 根據主題不同 這檔案也可能會有更多不同設定\n  ex: 設定主題 theme = \"ananke\"\n\n#### Step 4: 新增文章\n\n- hugo new posts/my-first-post.md\n  新增預設檔案在以下位置 採用 markdown 編寫\n  content/<CATEGORY>/<FILE>.<FORMAT>\n  > title: \"My First Post\"\n  > date: 2019-03-26T08:47:11+01:00\n  > draft: true //是草稿是否 改成 false 可被發布\n\n可以根據主題新增：\ntags: [\"hugo\", \"web\"]\nsummary: \"The summary image should be a custom one\"\nsummaryImage: \"summary_2.jpg\"\nresources:\n\n- src: summary_2.jpg\n\n- 圖片新增\n  將圖片放置在 website-hugo/static/images\n  文章內可用相對路徑新增![](/images/xxx)\n\n#### Step 5: 啟動本地 server\n\n- hugo server -D\n  Web Server is available at http://localhost:1313/\n  Press Ctrl+C to stop\n  記得結束務必按 不然下次啟動會佔用\n\n#### Step 6: 產生靜態檔案\n\nＤ 參數代表要不要輸出草稿文章\nBuild static pages\n\n- hugo -D\n\n將會生成./public/ 資料夾，\n每次編輯完要記得更新，之後發布的時候也要上傳\n\n---\n\n#### Step 7:githug 網站上傳\n\n新增兩個 repo\nxxx.github.io (xxx 改成自己的帳號名稱)\nwebsite-hugo 上述的 site 名稱\n\n上傳 public 資料夾\n\n> cd public\n> git init\n> git remote add origin https://github.com/xxx/xxx.github.io.git\n> git add .\n> git commit -m \"Initial commit\"\n> git push -u origin master\n\n上傳整個 website-hugo 資料夾\n\n> cd ../\n> git init\n> git remote add origin https://github.com/xxx/website-hugo.git\n> git add .\n> git commit -m \"Initial commit\"\n> git push -u origin master\n\n開啟https://xxx.github.io/ 等個幾分鐘會看到結果\n\n>note class_name %} #### 參考文章 \n\n- [ＨＵＧＯ官網](https://gohugo.io/getting-started/quick-start/)\n- [在-github-部署-hugo-靜態網站](https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40)\n","slug":"blog-hugo","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhau001bkp2xazbi1zwv","content":"<blockquote>\n<p>本章介紹如何在套用 hugo 做好一個自己的部落格網站．並上傳 github</p>\n</blockquote>\n<hr>\n<p>2020.09 更新： 因為找不到主題可以將文章標題透過階層式瀏覽，所以後來改用 hexo（就是現在這邊網站用的樣式），使用上部署也較 hugo 方便，本篇紀錄當時的 hugo 建立留存．</p>\n<ul>\n<li>建立部落格前可以先分別上 hexo/hugo 官網查看主題效果，看自己喜歡哪一種再建立．</li>\n<li>hexo 教學文請看： <a href=\"https://minilabmemo.github.io/2020/08/31/hexo-hello-world/\">使用Ｈ exo 撰寫部落格</a></li>\n<li>gohugo作者Steve Francia</li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"Step-1-安裝-Hugo\"><a href=\"#Step-1-安裝-Hugo\" class=\"headerlink\" title=\"Step 1: 安裝 Hugo\"></a>Step 1: 安裝 Hugo</h4><p>開啟終端機，依序執行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* brew install hugo</span><br><span class=\"line\">&#x2F;&#x2F;macOs 須先安裝Homebrew</span><br><span class=\"line\">* hugo version</span><br><span class=\"line\">&#x2F;&#x2F;確認安裝成功版本</span><br><span class=\"line\">Hugo Static Site Generator v0.69.0&#x2F;extended darwin&#x2F;amd64 BuildDate: unknow</span><br><span class=\"line\">* hugo new site **website-hugo**</span><br><span class=\"line\">* cd **website-hugo**</span><br><span class=\"line\">&#x2F;&#x2F; 新增網站，粗體可以自命名，安裝完會新增該資料夾</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2-新增主題\"><a href=\"#Step-2-新增主題\" class=\"headerlink\" title=\"Step 2: 新增主題\"></a>Step 2: 新增主題</h4><p><a href=\"https://themes.gohugo.io/\">https://themes.gohugo.io/</a><br>hugo 網站有很多可以選擇與查看效果<br>進入該主題的 github/README 可以看安裝步驟執行<br>基本執行：git submodule add <a href=\"https://github.com/alex-shpak/hugo-book\">https://github.com/alex-shpak/hugo-book</a> themes/book<br>//這樣就會在<strong>website-hugo</strong>/themes/新增主題</p>\n<h4 id=\"Step-3-編輯-config-toml\"><a href=\"#Step-3-編輯-config-toml\" class=\"headerlink\" title=\"Step 3: 編輯 config.toml\"></a>Step 3: 編輯 config.toml</h4><p>這檔案與整體網站設定有關</p>\n<blockquote>\n<p>baseURL = “<a href=\"https://xxx.github.io/&quot;\">https://xxx.github.io/&quot;</a><br>languageCode = “zh-tw”<br>title = “xxx Blog”</p>\n</blockquote>\n<ul>\n<li>#domain 設定 xxx 改成你的 GitHub 帳號名稱</li>\n<li>根據主題不同 這檔案也可能會有更多不同設定<br>ex: 設定主題 theme = “ananke”</li>\n</ul>\n<h4 id=\"Step-4-新增文章\"><a href=\"#Step-4-新增文章\" class=\"headerlink\" title=\"Step 4: 新增文章\"></a>Step 4: 新增文章</h4><ul>\n<li>hugo new posts/my-first-post.md<br>新增預設檔案在以下位置 採用 markdown 編寫<br>content/<CATEGORY>/<FILE>.<FORMAT><blockquote>\n<p>title: “My First Post”<br>date: 2019-03-26T08:47:11+01:00<br>draft: true //是草稿是否 改成 false 可被發布</p>\n</blockquote>\n</FORMAT></FILE></CATEGORY></li>\n</ul>\n<p>可以根據主題新增：<br>tags: [“hugo”, “web”]<br>summary: “The summary image should be a custom one”<br>summaryImage: “summary_2.jpg”<br>resources:</p>\n<ul>\n<li><p>src: summary_2.jpg</p>\n</li>\n<li><p>圖片新增<br>將圖片放置在 website-hugo/static/images<br>文章內可用相對路徑新增<img src=\"/images/xxx\"></p>\n</li>\n</ul>\n<h4 id=\"Step-5-啟動本地-server\"><a href=\"#Step-5-啟動本地-server\" class=\"headerlink\" title=\"Step 5: 啟動本地 server\"></a>Step 5: 啟動本地 server</h4><ul>\n<li>hugo server -D<br>Web Server is available at <a href=\"http://localhost:1313/\">http://localhost:1313/</a><br>Press Ctrl+C to stop<br>記得結束務必按 不然下次啟動會佔用</li>\n</ul>\n<h4 id=\"Step-6-產生靜態檔案\"><a href=\"#Step-6-產生靜態檔案\" class=\"headerlink\" title=\"Step 6: 產生靜態檔案\"></a>Step 6: 產生靜態檔案</h4><p>Ｄ 參數代表要不要輸出草稿文章<br>Build static pages</p>\n<ul>\n<li>hugo -D</li>\n</ul>\n<p>將會生成./public/ 資料夾，<br>每次編輯完要記得更新，之後發布的時候也要上傳</p>\n<hr>\n<h4 id=\"Step-7-githug-網站上傳\"><a href=\"#Step-7-githug-網站上傳\" class=\"headerlink\" title=\"Step 7:githug 網站上傳\"></a>Step 7:githug 網站上傳</h4><p>新增兩個 repo<br>xxx.github.io (xxx 改成自己的帳號名稱)<br>website-hugo 上述的 site 名稱</p>\n<p>上傳 public 資料夾</p>\n<blockquote>\n<p>cd public<br>git init<br>git remote add origin <a href=\"https://github.com/xxx/xxx.github.io.git\">https://github.com/xxx/xxx.github.io.git</a><br>git add .<br>git commit -m “Initial commit”<br>git push -u origin master</p>\n</blockquote>\n<p>上傳整個 website-hugo 資料夾</p>\n<blockquote>\n<p>cd ../<br>git init<br>git remote add origin <a href=\"https://github.com/xxx/website-hugo.git\">https://github.com/xxx/website-hugo.git</a><br>git add .<br>git commit -m “Initial commit”<br>git push -u origin master</p>\n</blockquote>\n<p>開啟<a href=\"https://xxx.github.io/\">https://xxx.github.io/</a> 等個幾分鐘會看到結果</p>\n<blockquote>\n<p>note class_name %} #### 參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://gohugo.io/getting-started/quick-start/\">ＨＵＧＯ官網</a></li>\n<li><a href=\"https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40\">在-github-部署-hugo-靜態網站</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本章介紹如何在套用 hugo 做好一個自己的部落格網站．並上傳 github</p>\n</blockquote>\n<hr>\n<p>2020.09 更新： 因為找不到主題可以將文章標題透過階層式瀏覽，所以後來改用 hexo（就是現在這邊網站用的樣式），使用上部署也較 hugo 方便，本篇紀錄當時的 hugo 建立留存．</p>\n<ul>\n<li>建立部落格前可以先分別上 hexo/hugo 官網查看主題效果，看自己喜歡哪一種再建立．</li>\n<li>hexo 教學文請看： <a href=\"https://minilabmemo.github.io/2020/08/31/hexo-hello-world/\">使用Ｈ exo 撰寫部落格</a></li>\n<li>gohugo作者Steve Francia</li>\n</ul>","more":"<h4 id=\"Step-1-安裝-Hugo\"><a href=\"#Step-1-安裝-Hugo\" class=\"headerlink\" title=\"Step 1: 安裝 Hugo\"></a>Step 1: 安裝 Hugo</h4><p>開啟終端機，依序執行下列指令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* brew install hugo</span><br><span class=\"line\">&#x2F;&#x2F;macOs 須先安裝Homebrew</span><br><span class=\"line\">* hugo version</span><br><span class=\"line\">&#x2F;&#x2F;確認安裝成功版本</span><br><span class=\"line\">Hugo Static Site Generator v0.69.0&#x2F;extended darwin&#x2F;amd64 BuildDate: unknow</span><br><span class=\"line\">* hugo new site **website-hugo**</span><br><span class=\"line\">* cd **website-hugo**</span><br><span class=\"line\">&#x2F;&#x2F; 新增網站，粗體可以自命名，安裝完會新增該資料夾</span><br></pre></td></tr></table></figure>\n<h4 id=\"Step-2-新增主題\"><a href=\"#Step-2-新增主題\" class=\"headerlink\" title=\"Step 2: 新增主題\"></a>Step 2: 新增主題</h4><p><a href=\"https://themes.gohugo.io/\">https://themes.gohugo.io/</a><br>hugo 網站有很多可以選擇與查看效果<br>進入該主題的 github/README 可以看安裝步驟執行<br>基本執行：git submodule add <a href=\"https://github.com/alex-shpak/hugo-book\">https://github.com/alex-shpak/hugo-book</a> themes/book<br>//這樣就會在<strong>website-hugo</strong>/themes/新增主題</p>\n<h4 id=\"Step-3-編輯-config-toml\"><a href=\"#Step-3-編輯-config-toml\" class=\"headerlink\" title=\"Step 3: 編輯 config.toml\"></a>Step 3: 編輯 config.toml</h4><p>這檔案與整體網站設定有關</p>\n<blockquote>\n<p>baseURL = “<a href=\"https://xxx.github.io/&quot;\">https://xxx.github.io/&quot;</a><br>languageCode = “zh-tw”<br>title = “xxx Blog”</p>\n</blockquote>\n<ul>\n<li>#domain 設定 xxx 改成你的 GitHub 帳號名稱</li>\n<li>根據主題不同 這檔案也可能會有更多不同設定<br>ex: 設定主題 theme = “ananke”</li>\n</ul>\n<h4 id=\"Step-4-新增文章\"><a href=\"#Step-4-新增文章\" class=\"headerlink\" title=\"Step 4: 新增文章\"></a>Step 4: 新增文章</h4><ul>\n<li>hugo new posts/my-first-post.md<br>新增預設檔案在以下位置 採用 markdown 編寫<br>content/<CATEGORY>/<FILE>.<FORMAT><blockquote>\n<p>title: “My First Post”<br>date: 2019-03-26T08:47:11+01:00<br>draft: true //是草稿是否 改成 false 可被發布</p>\n</blockquote>\n</FORMAT></FILE></CATEGORY></li>\n</ul>\n<p>可以根據主題新增：<br>tags: [“hugo”, “web”]<br>summary: “The summary image should be a custom one”<br>summaryImage: “summary_2.jpg”<br>resources:</p>\n<ul>\n<li><p>src: summary_2.jpg</p>\n</li>\n<li><p>圖片新增<br>將圖片放置在 website-hugo/static/images<br>文章內可用相對路徑新增<img src=\"/images/xxx\"></p>\n</li>\n</ul>\n<h4 id=\"Step-5-啟動本地-server\"><a href=\"#Step-5-啟動本地-server\" class=\"headerlink\" title=\"Step 5: 啟動本地 server\"></a>Step 5: 啟動本地 server</h4><ul>\n<li>hugo server -D<br>Web Server is available at <a href=\"http://localhost:1313/\">http://localhost:1313/</a><br>Press Ctrl+C to stop<br>記得結束務必按 不然下次啟動會佔用</li>\n</ul>\n<h4 id=\"Step-6-產生靜態檔案\"><a href=\"#Step-6-產生靜態檔案\" class=\"headerlink\" title=\"Step 6: 產生靜態檔案\"></a>Step 6: 產生靜態檔案</h4><p>Ｄ 參數代表要不要輸出草稿文章<br>Build static pages</p>\n<ul>\n<li>hugo -D</li>\n</ul>\n<p>將會生成./public/ 資料夾，<br>每次編輯完要記得更新，之後發布的時候也要上傳</p>\n<hr>\n<h4 id=\"Step-7-githug-網站上傳\"><a href=\"#Step-7-githug-網站上傳\" class=\"headerlink\" title=\"Step 7:githug 網站上傳\"></a>Step 7:githug 網站上傳</h4><p>新增兩個 repo<br>xxx.github.io (xxx 改成自己的帳號名稱)<br>website-hugo 上述的 site 名稱</p>\n<p>上傳 public 資料夾</p>\n<blockquote>\n<p>cd public<br>git init<br>git remote add origin <a href=\"https://github.com/xxx/xxx.github.io.git\">https://github.com/xxx/xxx.github.io.git</a><br>git add .<br>git commit -m “Initial commit”<br>git push -u origin master</p>\n</blockquote>\n<p>上傳整個 website-hugo 資料夾</p>\n<blockquote>\n<p>cd ../<br>git init<br>git remote add origin <a href=\"https://github.com/xxx/website-hugo.git\">https://github.com/xxx/website-hugo.git</a><br>git add .<br>git commit -m “Initial commit”<br>git push -u origin master</p>\n</blockquote>\n<p>開啟<a href=\"https://xxx.github.io/\">https://xxx.github.io/</a> 等個幾分鐘會看到結果</p>\n<blockquote>\n<p>note class_name %} #### 參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://gohugo.io/getting-started/quick-start/\">ＨＵＧＯ官網</a></li>\n<li><a href=\"https://medium.com/@chswei/%E5%9C%A8-github-%E9%83%A8%E7%BD%B2-hugo-%E9%9D%9C%E6%85%8B%E7%B6%B2%E7%AB%99-9c40682dfe40\">在-github-部署-hugo-靜態網站</a></li>\n</ul>"},{"title":"[前端][✍練習][🚧進行中]紀錄有關在前端console 中debug的指令","date":"2020-10-01T07:53:50.000Z","_content":"\n> 紀錄有關在 console 中 debug 的指令\n\n[✍ 持續更新]\n\n<!--more-->\n\n#### 複製內容\n\n一般來說可以在 console 中印出陣列，但 console 會顯示階層式的物件，如果想要複製單純內物件內容，就要透過下列動作達成：\n\nRight-click an object in Chrome's console and select Store as Global Variable from the context menu. It will return something like temp1 as the variable name.\n\nChrome also has a copy() method, so copy(temp1) in the console should copy that object to your clipboard.\n\n```\n(9) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\ntemp1\n(9) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\ncopy(temp1)\nJSON.stringify(temp1)\n\"[{\"name\":\"Cupcake\",\"pri\":1,\"status\":\"OPEN\",\"type\":\"blog\",\"protein\":4.3},{\"name\":\"Donut\",\"pri\":2,\"status\":\"OPEN\",\"type\":\"go\",\"protein\":4.9}]\"\n```\n\n[Javascript / Chrome - How to copy an object from the webkit inspector as code\n](https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code)\n\n>note class_name %} # 網路參考文章 \n","source":"_posts/console-debug.md","raw":"---\ntitle: '[前端][✍練習][🚧進行中]紀錄有關在前端console 中debug的指令'\ntags:\n  - debug\n  - ing\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - tool\ndate: 2020-10-01 15:53:50\n---\n\n> 紀錄有關在 console 中 debug 的指令\n\n[✍ 持續更新]\n\n<!--more-->\n\n#### 複製內容\n\n一般來說可以在 console 中印出陣列，但 console 會顯示階層式的物件，如果想要複製單純內物件內容，就要透過下列動作達成：\n\nRight-click an object in Chrome's console and select Store as Global Variable from the context menu. It will return something like temp1 as the variable name.\n\nChrome also has a copy() method, so copy(temp1) in the console should copy that object to your clipboard.\n\n```\n(9) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\ntemp1\n(9) [{…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}, {…}]\ncopy(temp1)\nJSON.stringify(temp1)\n\"[{\"name\":\"Cupcake\",\"pri\":1,\"status\":\"OPEN\",\"type\":\"blog\",\"protein\":4.3},{\"name\":\"Donut\",\"pri\":2,\"status\":\"OPEN\",\"type\":\"go\",\"protein\":4.9}]\"\n```\n\n[Javascript / Chrome - How to copy an object from the webkit inspector as code\n](https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code)\n\n>note class_name %} # 網路參考文章 \n","slug":"console-debug","published":1,"updated":"2023-01-22T07:05:18.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhaw001fkp2xdceyan09","content":"<blockquote>\n<p>紀錄有關在 console 中 debug 的指令</p>\n</blockquote>\n<p>[✍ 持續更新]</p>\n<a id=\"more\"></a>\n\n<h4 id=\"複製內容\"><a href=\"#複製內容\" class=\"headerlink\" title=\"複製內容\"></a>複製內容</h4><p>一般來說可以在 console 中印出陣列，但 console 會顯示階層式的物件，如果想要複製單純內物件內容，就要透過下列動作達成：</p>\n<p>Right-click an object in Chrome’s console and select Store as Global Variable from the context menu. It will return something like temp1 as the variable name.</p>\n<p>Chrome also has a copy() method, so copy(temp1) in the console should copy that object to your clipboard.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(9) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span><br><span class=\"line\">temp1</span><br><span class=\"line\">(9) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span><br><span class=\"line\">copy(temp1)</span><br><span class=\"line\">JSON.stringify(temp1)</span><br><span class=\"line\">&quot;[&#123;&quot;name&quot;:&quot;Cupcake&quot;,&quot;pri&quot;:1,&quot;status&quot;:&quot;OPEN&quot;,&quot;type&quot;:&quot;blog&quot;,&quot;protein&quot;:4.3&#125;,&#123;&quot;name&quot;:&quot;Donut&quot;,&quot;pri&quot;:2,&quot;status&quot;:&quot;OPEN&quot;,&quot;type&quot;:&quot;go&quot;,&quot;protein&quot;:4.9&#125;]&quot;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code\">Javascript / Chrome - How to copy an object from the webkit inspector as code\n</a></p>\n<blockquote>\n<p>note class_name %} # 網路參考文章 </p>\n</blockquote>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>紀錄有關在 console 中 debug 的指令</p>\n</blockquote>\n<p>[✍ 持續更新]</p>","more":"<h4 id=\"複製內容\"><a href=\"#複製內容\" class=\"headerlink\" title=\"複製內容\"></a>複製內容</h4><p>一般來說可以在 console 中印出陣列，但 console 會顯示階層式的物件，如果想要複製單純內物件內容，就要透過下列動作達成：</p>\n<p>Right-click an object in Chrome’s console and select Store as Global Variable from the context menu. It will return something like temp1 as the variable name.</p>\n<p>Chrome also has a copy() method, so copy(temp1) in the console should copy that object to your clipboard.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(9) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span><br><span class=\"line\">temp1</span><br><span class=\"line\">(9) [&#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;, &#123;…&#125;]</span><br><span class=\"line\">copy(temp1)</span><br><span class=\"line\">JSON.stringify(temp1)</span><br><span class=\"line\">&quot;[&#123;&quot;name&quot;:&quot;Cupcake&quot;,&quot;pri&quot;:1,&quot;status&quot;:&quot;OPEN&quot;,&quot;type&quot;:&quot;blog&quot;,&quot;protein&quot;:4.3&#125;,&#123;&quot;name&quot;:&quot;Donut&quot;,&quot;pri&quot;:2,&quot;status&quot;:&quot;OPEN&quot;,&quot;type&quot;:&quot;go&quot;,&quot;protein&quot;:4.9&#125;]&quot;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://stackoverflow.com/questions/10305365/javascript-chrome-how-to-copy-an-object-from-the-webkit-inspector-as-code\">Javascript / Chrome - How to copy an object from the webkit inspector as code\n</a></p>\n<blockquote>\n<p>note class_name %} # 網路參考文章 </p>\n</blockquote>"},{"title":"[docker]常用docker指令筆記整理","date":"2020-10-31T02:41:31.000Z","_content":"\n\n>note info %}常用docker指令筆記整理\n\n<!--more-->\n\n## 啟動image\n\n### docker run\n使用docker有兩種方式，docker hub 有些會寫好內容 ex:[mongo-docker hub](https://hub.docker.com/_/mongo \"mongo-docker hub\")\n\n- 一種是直接下docker run，再下對應參數，下一次起一個程式。\n\tex:docker run -v D:\\home/work:/home/work --name myub -it ubuntu bash\n\t\n|   |   |\n| ------------ | ------------ |\n|  --name | 替container取名  |\n|  -p（小寫） |  hostPort對應containerPort |\n| -v  |  分享空間 |\n| -it  |  代表在執行Docker 虛擬容器環境時，開啟虛擬終端機，以互動的模式執行 |\n| --cpus=1.5  |  限制 CPU 使用量 |\n| --memory=300m --memory-swap=1g  |  限制記憶體與 swap 交換空間的用量 |\n\n\n### docker-compose\n- 另一種是把它寫成docker-compose.yml方式，可以一次啟動多個程式。\n有些image會提供已編寫好的內容。\n\n|   |   |\n| ------------ | ------------ |\n|  docker-compose up -d |  啟動，-d detached 在背景執行 |\n| docker-compose stop | 停止容器  |\n| docker-compose down | 刪除容器  |\n\n\n\n## 其他常用指令\n\n### 基本操作\n|   |   |\n| ------------ | ------------ |\n| $docker --version<br>Docker version 18.09.2, build 6247962  | 查看簡易docker版本  |\n|  docker ps |  查看正在啟動的CONTAINER與ID  |\n|  docker stop 'CONTAINER_ID' | 停止 Docker 容器   |\n|  docker kill 'CONTAINER_ID' |  強制停止 Docker 容器  |\n|  docker restart 'CONTAINER_ID'|  重新啟動 Docker 容器  |\n|  docker ps -a |   -a :顯示所有的容器，包括未運行的 |\n|  docker search 'ubuntu' |  docker search 'xxx' 查詢可下載 image  |\n| docker pull 'ubuntu'   |  docker pull 'xxx' 下載 image  |\n| docker images  | 查看下載image與ID   |\n| docker system df  | 查看使用的磁盘空间 -v more detail 查看個別container |\n| docker stats  | 查看容器使用的系统资源 每隔 1 秒刷新 |\n| docker stats --no-stream  | 查看容器當前的系統資源 |\n| docker stats 'CONTAINER ID or name'... | 指定查看特定容器 |\n\n### 備份系列\n|   |   |\n| ------------ | ------------ |\n| docker cp 'CONTAINER ID':/xx local <br> Ex: docker cp 9e701a5209fe:/data/db C:/test_temp| 複製CONTAINER內資料出來本地 |\n| docker save  | 備份 Docker Image |\n\n### 清理指令系列\n清理指令系列另外寫:\n因為image都有一定的大小，使用完不用要記得清除。\n\n|   |   |\n| ------------ | ------------ |\n| docker rm 'CONTAINER_ID'  | 刪除 container  |\n| docker rmi  'image_ID'| 刪除 image  |\n| docker rm $(docker ps -a -q) | 刪除所有容器(container)//在powershell下才有用 |\n|  docker stop $(docker ps -a -q) | 停止所有容器 //在powershell下才有用   |\n\n\n  \n\n------------\n\n\n#### 參考文章\n\n1.[Docker 常用指令與容器操作教學](https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/ \"Docker 常用指令與容器操作教學\") \n2.[谁用光了磁盘？Docker System命令详解](https://blog.fundebug.com/2017/04/19/docker-system-explain/ \"谁用光了磁盘？Docker System命令详解\")\n3.[清理Docker，删除没用的文件]( https://www.fengzifz.com/2017/03/27/clean-docker/ \"清理Docker，删除没用的文件\")\n4.[查看 docker 容器使用的资源](https://www.cnblogs.com/sparkdev/p/7821376.html \"查看 docker 容器使用的资源\")\n\n------------\n\n","source":"_posts/docker-cli.md","raw":"---\ntitle: \"[docker]常用docker指令筆記整理\"\ntags:\n  - docker\n  - CLI\ncategories:\n  - Tech.\n  - docker\ndate: 2020-10-31 10:41:31\n---\n\n\n>note info %}常用docker指令筆記整理\n\n<!--more-->\n\n## 啟動image\n\n### docker run\n使用docker有兩種方式，docker hub 有些會寫好內容 ex:[mongo-docker hub](https://hub.docker.com/_/mongo \"mongo-docker hub\")\n\n- 一種是直接下docker run，再下對應參數，下一次起一個程式。\n\tex:docker run -v D:\\home/work:/home/work --name myub -it ubuntu bash\n\t\n|   |   |\n| ------------ | ------------ |\n|  --name | 替container取名  |\n|  -p（小寫） |  hostPort對應containerPort |\n| -v  |  分享空間 |\n| -it  |  代表在執行Docker 虛擬容器環境時，開啟虛擬終端機，以互動的模式執行 |\n| --cpus=1.5  |  限制 CPU 使用量 |\n| --memory=300m --memory-swap=1g  |  限制記憶體與 swap 交換空間的用量 |\n\n\n### docker-compose\n- 另一種是把它寫成docker-compose.yml方式，可以一次啟動多個程式。\n有些image會提供已編寫好的內容。\n\n|   |   |\n| ------------ | ------------ |\n|  docker-compose up -d |  啟動，-d detached 在背景執行 |\n| docker-compose stop | 停止容器  |\n| docker-compose down | 刪除容器  |\n\n\n\n## 其他常用指令\n\n### 基本操作\n|   |   |\n| ------------ | ------------ |\n| $docker --version<br>Docker version 18.09.2, build 6247962  | 查看簡易docker版本  |\n|  docker ps |  查看正在啟動的CONTAINER與ID  |\n|  docker stop 'CONTAINER_ID' | 停止 Docker 容器   |\n|  docker kill 'CONTAINER_ID' |  強制停止 Docker 容器  |\n|  docker restart 'CONTAINER_ID'|  重新啟動 Docker 容器  |\n|  docker ps -a |   -a :顯示所有的容器，包括未運行的 |\n|  docker search 'ubuntu' |  docker search 'xxx' 查詢可下載 image  |\n| docker pull 'ubuntu'   |  docker pull 'xxx' 下載 image  |\n| docker images  | 查看下載image與ID   |\n| docker system df  | 查看使用的磁盘空间 -v more detail 查看個別container |\n| docker stats  | 查看容器使用的系统资源 每隔 1 秒刷新 |\n| docker stats --no-stream  | 查看容器當前的系統資源 |\n| docker stats 'CONTAINER ID or name'... | 指定查看特定容器 |\n\n### 備份系列\n|   |   |\n| ------------ | ------------ |\n| docker cp 'CONTAINER ID':/xx local <br> Ex: docker cp 9e701a5209fe:/data/db C:/test_temp| 複製CONTAINER內資料出來本地 |\n| docker save  | 備份 Docker Image |\n\n### 清理指令系列\n清理指令系列另外寫:\n因為image都有一定的大小，使用完不用要記得清除。\n\n|   |   |\n| ------------ | ------------ |\n| docker rm 'CONTAINER_ID'  | 刪除 container  |\n| docker rmi  'image_ID'| 刪除 image  |\n| docker rm $(docker ps -a -q) | 刪除所有容器(container)//在powershell下才有用 |\n|  docker stop $(docker ps -a -q) | 停止所有容器 //在powershell下才有用   |\n\n\n  \n\n------------\n\n\n#### 參考文章\n\n1.[Docker 常用指令與容器操作教學](https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/ \"Docker 常用指令與容器操作教學\") \n2.[谁用光了磁盘？Docker System命令详解](https://blog.fundebug.com/2017/04/19/docker-system-explain/ \"谁用光了磁盘？Docker System命令详解\")\n3.[清理Docker，删除没用的文件]( https://www.fengzifz.com/2017/03/27/clean-docker/ \"清理Docker，删除没用的文件\")\n4.[查看 docker 容器使用的资源](https://www.cnblogs.com/sparkdev/p/7821376.html \"查看 docker 容器使用的资源\")\n\n------------\n\n","slug":"docker-cli","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhax001hkp2x7frh3apl","content":"<blockquote>\n<p>note info %}常用docker指令筆記整理</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"啟動image\"><a href=\"#啟動image\" class=\"headerlink\" title=\"啟動image\"></a>啟動image</h2><h3 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a>docker run</h3><p>使用docker有兩種方式，docker hub 有些會寫好內容 ex:<a href=\"https://hub.docker.com/_/mongo\" title=\"mongo-docker hub\">mongo-docker hub</a></p>\n<ul>\n<li>一種是直接下docker run，再下對應參數，下一次起一個程式。<br>  ex:docker run -v D:\\home/work:/home/work –name myub -it ubuntu bash</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–name</td>\n<td>替container取名</td>\n</tr>\n<tr>\n<td>-p（小寫）</td>\n<td>hostPort對應containerPort</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>分享空間</td>\n</tr>\n<tr>\n<td>-it</td>\n<td>代表在執行Docker 虛擬容器環境時，開啟虛擬終端機，以互動的模式執行</td>\n</tr>\n<tr>\n<td>–cpus=1.5</td>\n<td>限制 CPU 使用量</td>\n</tr>\n<tr>\n<td>–memory=300m –memory-swap=1g</td>\n<td>限制記憶體與 swap 交換空間的用量</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><ul>\n<li>另一種是把它寫成docker-compose.yml方式，可以一次啟動多個程式。<br>有些image會提供已編寫好的內容。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker-compose up -d</td>\n<td>啟動，-d detached 在背景執行</td>\n</tr>\n<tr>\n<td>docker-compose stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker-compose down</td>\n<td>刪除容器</td>\n</tr>\n</tbody></table>\n<h2 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h2><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$docker –version<br>Docker version 18.09.2, build 6247962</td>\n<td>查看簡易docker版本</td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>查看正在啟動的CONTAINER與ID</td>\n</tr>\n<tr>\n<td>docker stop ‘CONTAINER_ID’</td>\n<td>停止 Docker 容器</td>\n</tr>\n<tr>\n<td>docker kill ‘CONTAINER_ID’</td>\n<td>強制停止 Docker 容器</td>\n</tr>\n<tr>\n<td>docker restart ‘CONTAINER_ID’</td>\n<td>重新啟動 Docker 容器</td>\n</tr>\n<tr>\n<td>docker ps -a</td>\n<td>-a :顯示所有的容器，包括未運行的</td>\n</tr>\n<tr>\n<td>docker search ‘ubuntu’</td>\n<td>docker search ‘xxx’ 查詢可下載 image</td>\n</tr>\n<tr>\n<td>docker pull ‘ubuntu’</td>\n<td>docker pull ‘xxx’ 下載 image</td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>查看下載image與ID</td>\n</tr>\n<tr>\n<td>docker system df</td>\n<td>查看使用的磁盘空间 -v more detail 查看個別container</td>\n</tr>\n<tr>\n<td>docker stats</td>\n<td>查看容器使用的系统资源 每隔 1 秒刷新</td>\n</tr>\n<tr>\n<td>docker stats –no-stream</td>\n<td>查看容器當前的系統資源</td>\n</tr>\n<tr>\n<td>docker stats ‘CONTAINER ID or name’…</td>\n<td>指定查看特定容器</td>\n</tr>\n</tbody></table>\n<h3 id=\"備份系列\"><a href=\"#備份系列\" class=\"headerlink\" title=\"備份系列\"></a>備份系列</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker cp ‘CONTAINER ID’:/xx local <br> Ex: docker cp 9e701a5209fe:/data/db C:/test_temp</td>\n<td>複製CONTAINER內資料出來本地</td>\n</tr>\n<tr>\n<td>docker save</td>\n<td>備份 Docker Image</td>\n</tr>\n</tbody></table>\n<h3 id=\"清理指令系列\"><a href=\"#清理指令系列\" class=\"headerlink\" title=\"清理指令系列\"></a>清理指令系列</h3><p>清理指令系列另外寫:<br>因為image都有一定的大小，使用完不用要記得清除。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker rm ‘CONTAINER_ID’</td>\n<td>刪除 container</td>\n</tr>\n<tr>\n<td>docker rmi  ‘image_ID’</td>\n<td>刪除 image</td>\n</tr>\n<tr>\n<td>docker rm $(docker ps -a -q)</td>\n<td>刪除所有容器(container)//在powershell下才有用</td>\n</tr>\n<tr>\n<td>docker stop $(docker ps -a -q)</td>\n<td>停止所有容器 //在powershell下才有用</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h4><p>1.<a href=\"https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\" title=\"Docker 常用指令與容器操作教學\">Docker 常用指令與容器操作教學</a><br>2.<a href=\"https://blog.fundebug.com/2017/04/19/docker-system-explain/\" title=\"谁用光了磁盘？Docker System命令详解\">谁用光了磁盘？Docker System命令详解</a><br>3.<a href=\"https://www.fengzifz.com/2017/03/27/clean-docker/\" title=\"清理Docker，删除没用的文件\">清理Docker，删除没用的文件</a><br>4.<a href=\"https://www.cnblogs.com/sparkdev/p/7821376.html\" title=\"查看 docker 容器使用的资源\">查看 docker 容器使用的资源</a></p>\n<hr>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>note info %}常用docker指令筆記整理</p>\n</blockquote>","more":"<h2 id=\"啟動image\"><a href=\"#啟動image\" class=\"headerlink\" title=\"啟動image\"></a>啟動image</h2><h3 id=\"docker-run\"><a href=\"#docker-run\" class=\"headerlink\" title=\"docker run\"></a>docker run</h3><p>使用docker有兩種方式，docker hub 有些會寫好內容 ex:<a href=\"https://hub.docker.com/_/mongo\" title=\"mongo-docker hub\">mongo-docker hub</a></p>\n<ul>\n<li>一種是直接下docker run，再下對應參數，下一次起一個程式。<br>  ex:docker run -v D:\\home/work:/home/work –name myub -it ubuntu bash</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>–name</td>\n<td>替container取名</td>\n</tr>\n<tr>\n<td>-p（小寫）</td>\n<td>hostPort對應containerPort</td>\n</tr>\n<tr>\n<td>-v</td>\n<td>分享空間</td>\n</tr>\n<tr>\n<td>-it</td>\n<td>代表在執行Docker 虛擬容器環境時，開啟虛擬終端機，以互動的模式執行</td>\n</tr>\n<tr>\n<td>–cpus=1.5</td>\n<td>限制 CPU 使用量</td>\n</tr>\n<tr>\n<td>–memory=300m –memory-swap=1g</td>\n<td>限制記憶體與 swap 交換空間的用量</td>\n</tr>\n</tbody></table>\n<h3 id=\"docker-compose\"><a href=\"#docker-compose\" class=\"headerlink\" title=\"docker-compose\"></a>docker-compose</h3><ul>\n<li>另一種是把它寫成docker-compose.yml方式，可以一次啟動多個程式。<br>有些image會提供已編寫好的內容。</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker-compose up -d</td>\n<td>啟動，-d detached 在背景執行</td>\n</tr>\n<tr>\n<td>docker-compose stop</td>\n<td>停止容器</td>\n</tr>\n<tr>\n<td>docker-compose down</td>\n<td>刪除容器</td>\n</tr>\n</tbody></table>\n<h2 id=\"其他常用指令\"><a href=\"#其他常用指令\" class=\"headerlink\" title=\"其他常用指令\"></a>其他常用指令</h2><h3 id=\"基本操作\"><a href=\"#基本操作\" class=\"headerlink\" title=\"基本操作\"></a>基本操作</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$docker –version<br>Docker version 18.09.2, build 6247962</td>\n<td>查看簡易docker版本</td>\n</tr>\n<tr>\n<td>docker ps</td>\n<td>查看正在啟動的CONTAINER與ID</td>\n</tr>\n<tr>\n<td>docker stop ‘CONTAINER_ID’</td>\n<td>停止 Docker 容器</td>\n</tr>\n<tr>\n<td>docker kill ‘CONTAINER_ID’</td>\n<td>強制停止 Docker 容器</td>\n</tr>\n<tr>\n<td>docker restart ‘CONTAINER_ID’</td>\n<td>重新啟動 Docker 容器</td>\n</tr>\n<tr>\n<td>docker ps -a</td>\n<td>-a :顯示所有的容器，包括未運行的</td>\n</tr>\n<tr>\n<td>docker search ‘ubuntu’</td>\n<td>docker search ‘xxx’ 查詢可下載 image</td>\n</tr>\n<tr>\n<td>docker pull ‘ubuntu’</td>\n<td>docker pull ‘xxx’ 下載 image</td>\n</tr>\n<tr>\n<td>docker images</td>\n<td>查看下載image與ID</td>\n</tr>\n<tr>\n<td>docker system df</td>\n<td>查看使用的磁盘空间 -v more detail 查看個別container</td>\n</tr>\n<tr>\n<td>docker stats</td>\n<td>查看容器使用的系统资源 每隔 1 秒刷新</td>\n</tr>\n<tr>\n<td>docker stats –no-stream</td>\n<td>查看容器當前的系統資源</td>\n</tr>\n<tr>\n<td>docker stats ‘CONTAINER ID or name’…</td>\n<td>指定查看特定容器</td>\n</tr>\n</tbody></table>\n<h3 id=\"備份系列\"><a href=\"#備份系列\" class=\"headerlink\" title=\"備份系列\"></a>備份系列</h3><table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker cp ‘CONTAINER ID’:/xx local <br> Ex: docker cp 9e701a5209fe:/data/db C:/test_temp</td>\n<td>複製CONTAINER內資料出來本地</td>\n</tr>\n<tr>\n<td>docker save</td>\n<td>備份 Docker Image</td>\n</tr>\n</tbody></table>\n<h3 id=\"清理指令系列\"><a href=\"#清理指令系列\" class=\"headerlink\" title=\"清理指令系列\"></a>清理指令系列</h3><p>清理指令系列另外寫:<br>因為image都有一定的大小，使用完不用要記得清除。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>docker rm ‘CONTAINER_ID’</td>\n<td>刪除 container</td>\n</tr>\n<tr>\n<td>docker rmi  ‘image_ID’</td>\n<td>刪除 image</td>\n</tr>\n<tr>\n<td>docker rm $(docker ps -a -q)</td>\n<td>刪除所有容器(container)//在powershell下才有用</td>\n</tr>\n<tr>\n<td>docker stop $(docker ps -a -q)</td>\n<td>停止所有容器 //在powershell下才有用</td>\n</tr>\n</tbody></table>\n<hr>\n<h4 id=\"參考文章\"><a href=\"#參考文章\" class=\"headerlink\" title=\"參考文章\"></a>參考文章</h4><p>1.<a href=\"https://blog.gtwang.org/linux/docker-commands-and-container-management-tutorial/\" title=\"Docker 常用指令與容器操作教學\">Docker 常用指令與容器操作教學</a><br>2.<a href=\"https://blog.fundebug.com/2017/04/19/docker-system-explain/\" title=\"谁用光了磁盘？Docker System命令详解\">谁用光了磁盘？Docker System命令详解</a><br>3.<a href=\"https://www.fengzifz.com/2017/03/27/clean-docker/\" title=\"清理Docker，删除没用的文件\">清理Docker，删除没用的文件</a><br>4.<a href=\"https://www.cnblogs.com/sparkdev/p/7821376.html\" title=\"查看 docker 容器使用的资源\">查看 docker 容器使用的资源</a></p>\n<hr>"},{"title":"[docker]建立elasticSearch儲存資料與kibana呈現使用","date":"2021-04-24T02:06:20.000Z","_content":"\n>本章介紹使用elasticSearch儲存資料與kibana呈現使用 \n\n\n### 本文內容：\n- 自行建立elasticSearch/kibana [docker]\n- 建立elasticSearch index與傳送資料\n- 使用kibana查詢資料\n\n\n<!--more-->\n\n### 1.啟動docker-elasticSearch/kibana\n- 先備知識:docker & docker-compose\n- 先將網路上找到的[docker-compose.yml](https://github.com/minilabmemo/docker-compose-record/tree/master/elastic_kibana)內容編輯好，然後在一樣的目錄下開啟指令docker-compose up -d\n\n```bash\n$docker-compose up -d\nWARNING: Some services (elasticsearch, kibana) use the 'deploy' key, which will be ignored. Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.\nStarting elasticsearch-624 ... done\nStarting kibana-624        ... done\n```\n\n需要一點時間，可以用Kitematic之類的工具查看有沒有成功<br>\n\n\n- GET localhost:9200 確認elasticSearch是否啟動\n成功會回版號等資訊 \"number\": \"6.2.4\"\n\n- 開啟瀏覽器，確認kibana有無成功\nhttp://127.0.0.1:5601/app/kibana#/home?_g=()\n\n\n### 2.準備資料與index\n\n- 先設計資料內容，假設今天要收集一個使用者每天的運動紀錄\n這是一個有array的紀錄內容，內容可長可短。\n```json\n{\n    \"user\": \"user01\",\n    \"timestamp\": 1583734521000,\n    \"records\": [\n        {\n            \"record_name\": \"heart_rate\",\n            \"data_number\": 80,\n            \"data_txt\": \"avg\"\n        },\n        {\n            \"record_name\": \"Calories\",\n            \"data_number\": 200\n        },\n        {\n            \"record_name\": \"time_duration\",\n            \"data_number\": 30,\n            \"record_unit\": \"min\"\n        }\n    ]\n}\n```\n\n\n#### 接著新增必須欄位的屬性index\n- user是一般text,timestamp是date\n- records先建立nested巢狀，在建立裡面的record_name等欄位。\n- 建立index: PUT localhost:9200/{index}\n```\nPUT localhost:9200/event\n{\n    \"mappings\": {\n        \"_doc\": {\n            \"properties\": {\n                \"user\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                        \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                        }\n                    }\n                },\n                \"id\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                        \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                        }\n                    }\n                },\n                \"timestamp\": {\n                    \"type\": \"date\",\n                    \"format\": \"epoch_millis\"\n                },\n                \"records\": {\n                    \"type\": \"nested\",\n                    \"properties\": {\n                        \"record_name\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"data_number\": {\n                            \"type\": \"long\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"data_txt\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"record_unit\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### 送資料進去\n- 接著把上述資料先送一筆進去\n-  http://localhost:9200/{index}/{type}\nPOST http://localhost:9200/event/_doc\n\n### kibana建立index\n\n- #### 建立index\nManagement頁面->create index->填入event->選擇可以做時間分割的欄位名稱{上述是用timestamp}->按下create index pattern<br>\n\n- #### Discover頁面搜尋資料\n再送一次資料，這次把 \"timestamp\": {改成現在時間戳}->線上有很多工具可以做轉換\n回到Discover頁面，query最近15分鐘的資料->就可以看到時間軸了<br>\n\n- #### Visualize 建立感興趣的圖表展示\nex: table顯示/長條圖顯示等/或是特定filter資料。然後替圖表存檔。<br>\n- #### Dashboard 頁面\n這邊把剛剛建立的圖表拉好顯示在這邊。\n\n-  #### dev tools 頁面\n透過條件指令搜尋特定資料，如有程式需要可以用搜尋API試著找出自己想搜尋的內容\n- size/page/sort 分頁與排序依據\n- bool query 條件-filter時間/range/match/wildcard等搜尋\n\t- 所有 must 必须匹配，所有 must_not 都必须不匹配\n\t- minimum_should_match 參數控制需要匹配的 should 語句的數量\n\t\n範例:\n```\nGET /event/_search\n{\n  \"size\": 1000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"range\": {\n          \"timestamp\": {\n            \"from\": 159132465000,\n            \"include_lower\": true,\n            \"include_upper\": true,\n            \"to\": 1591324650099\n          }\n        }\n      },\n      \"must\": [\n        {\n          \"exists\": {\n            \"field\": \"user\"\n          }\n        },\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user01\"\n            }\n          }\n        },\n        {\n          \"nested\": {\n            \"path\": \"records\",\n            \"query\": {\n              \"bool\": {\n                \"must\": [\n                  {\n                    \"match\": {\n                      \"records.record_name\": {\n                        \"operator\": \"AND\",\n                        \"query\": \"heart_rate\"\n                      }\n                    }\n                  },\n                  {\n                    \"wildcard\": {\n                      \"records.data_txt\": \"*a*\"\n                    }\n                  },\n                  {\n                    \"range\": {\n                      \"records.data_number\": {\n                        \"from\": 2,\n                        \"include_lower\": false,\n                        \"include_upper\": true,\n                        \"to\": null\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      ],\n      \"minimum_should_match\": \"1\",\n      \"should\": [\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user01\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user02\"\n            }\n          }\n        }\n      ]\n    }\n  },\n  \"sort\": [\n    {\n      \"timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\n```\n\n\n###  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- [elastic-組合查詢 中文](https://www.elastic.co/guide/cn/elasticsearch/guide/current/bool-query.html \"elastic-組合查詢 中文\")\n\n","source":"_posts/docker-elastic-kibana.md","raw":"---\ntitle: \"[docker]建立elasticSearch儲存資料與kibana呈現使用\"\ntags:\n  - docker\n  - elasticSearch\n  - kibana\ncategories:\n  - [Tech., deploy, docker]\n  - [Tech., back-end,elasticSearch]\ndate: 2021-04-24 10:06:20\n---\n\n>本章介紹使用elasticSearch儲存資料與kibana呈現使用 \n\n\n### 本文內容：\n- 自行建立elasticSearch/kibana [docker]\n- 建立elasticSearch index與傳送資料\n- 使用kibana查詢資料\n\n\n<!--more-->\n\n### 1.啟動docker-elasticSearch/kibana\n- 先備知識:docker & docker-compose\n- 先將網路上找到的[docker-compose.yml](https://github.com/minilabmemo/docker-compose-record/tree/master/elastic_kibana)內容編輯好，然後在一樣的目錄下開啟指令docker-compose up -d\n\n```bash\n$docker-compose up -d\nWARNING: Some services (elasticsearch, kibana) use the 'deploy' key, which will be ignored. Compose does not support 'deploy' configuration - use `docker stack deploy` to deploy to a swarm.\nStarting elasticsearch-624 ... done\nStarting kibana-624        ... done\n```\n\n需要一點時間，可以用Kitematic之類的工具查看有沒有成功<br>\n\n\n- GET localhost:9200 確認elasticSearch是否啟動\n成功會回版號等資訊 \"number\": \"6.2.4\"\n\n- 開啟瀏覽器，確認kibana有無成功\nhttp://127.0.0.1:5601/app/kibana#/home?_g=()\n\n\n### 2.準備資料與index\n\n- 先設計資料內容，假設今天要收集一個使用者每天的運動紀錄\n這是一個有array的紀錄內容，內容可長可短。\n```json\n{\n    \"user\": \"user01\",\n    \"timestamp\": 1583734521000,\n    \"records\": [\n        {\n            \"record_name\": \"heart_rate\",\n            \"data_number\": 80,\n            \"data_txt\": \"avg\"\n        },\n        {\n            \"record_name\": \"Calories\",\n            \"data_number\": 200\n        },\n        {\n            \"record_name\": \"time_duration\",\n            \"data_number\": 30,\n            \"record_unit\": \"min\"\n        }\n    ]\n}\n```\n\n\n#### 接著新增必須欄位的屬性index\n- user是一般text,timestamp是date\n- records先建立nested巢狀，在建立裡面的record_name等欄位。\n- 建立index: PUT localhost:9200/{index}\n```\nPUT localhost:9200/event\n{\n    \"mappings\": {\n        \"_doc\": {\n            \"properties\": {\n                \"user\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                        \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                        }\n                    }\n                },\n                \"id\": {\n                    \"type\": \"text\",\n                    \"fields\": {\n                        \"keyword\": {\n                            \"type\": \"keyword\",\n                            \"ignore_above\": 256\n                        }\n                    }\n                },\n                \"timestamp\": {\n                    \"type\": \"date\",\n                    \"format\": \"epoch_millis\"\n                },\n                \"records\": {\n                    \"type\": \"nested\",\n                    \"properties\": {\n                        \"record_name\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"data_number\": {\n                            \"type\": \"long\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"data_txt\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        },\n                        \"record_unit\": {\n                            \"type\": \"text\",\n                            \"fields\": {\n                                \"keyword\": {\n                                    \"type\": \"keyword\",\n                                    \"ignore_above\": 256\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\n```\n\n#### 送資料進去\n- 接著把上述資料先送一筆進去\n-  http://localhost:9200/{index}/{type}\nPOST http://localhost:9200/event/_doc\n\n### kibana建立index\n\n- #### 建立index\nManagement頁面->create index->填入event->選擇可以做時間分割的欄位名稱{上述是用timestamp}->按下create index pattern<br>\n\n- #### Discover頁面搜尋資料\n再送一次資料，這次把 \"timestamp\": {改成現在時間戳}->線上有很多工具可以做轉換\n回到Discover頁面，query最近15分鐘的資料->就可以看到時間軸了<br>\n\n- #### Visualize 建立感興趣的圖表展示\nex: table顯示/長條圖顯示等/或是特定filter資料。然後替圖表存檔。<br>\n- #### Dashboard 頁面\n這邊把剛剛建立的圖表拉好顯示在這邊。\n\n-  #### dev tools 頁面\n透過條件指令搜尋特定資料，如有程式需要可以用搜尋API試著找出自己想搜尋的內容\n- size/page/sort 分頁與排序依據\n- bool query 條件-filter時間/range/match/wildcard等搜尋\n\t- 所有 must 必须匹配，所有 must_not 都必须不匹配\n\t- minimum_should_match 參數控制需要匹配的 should 語句的數量\n\t\n範例:\n```\nGET /event/_search\n{\n  \"size\": 1000,\n  \"query\": {\n    \"bool\": {\n      \"filter\": {\n        \"range\": {\n          \"timestamp\": {\n            \"from\": 159132465000,\n            \"include_lower\": true,\n            \"include_upper\": true,\n            \"to\": 1591324650099\n          }\n        }\n      },\n      \"must\": [\n        {\n          \"exists\": {\n            \"field\": \"user\"\n          }\n        },\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user01\"\n            }\n          }\n        },\n        {\n          \"nested\": {\n            \"path\": \"records\",\n            \"query\": {\n              \"bool\": {\n                \"must\": [\n                  {\n                    \"match\": {\n                      \"records.record_name\": {\n                        \"operator\": \"AND\",\n                        \"query\": \"heart_rate\"\n                      }\n                    }\n                  },\n                  {\n                    \"wildcard\": {\n                      \"records.data_txt\": \"*a*\"\n                    }\n                  },\n                  {\n                    \"range\": {\n                      \"records.data_number\": {\n                        \"from\": 2,\n                        \"include_lower\": false,\n                        \"include_upper\": true,\n                        \"to\": null\n                      }\n                    }\n                  }\n                ]\n              }\n            }\n          }\n        }\n      ],\n      \"minimum_should_match\": \"1\",\n      \"should\": [\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user01\"\n            }\n          }\n        },\n        {\n          \"match\": {\n            \"user\": {\n              \"operator\": \"AND\",\n              \"query\": \"user02\"\n            }\n          }\n        }\n      ]\n    }\n  },\n  \"sort\": [\n    {\n      \"timestamp\": {\n        \"order\": \"desc\"\n      }\n    }\n  ]\n}\n\n```\n\n\n###  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- [elastic-組合查詢 中文](https://www.elastic.co/guide/cn/elasticsearch/guide/current/bool-query.html \"elastic-組合查詢 中文\")\n\n","slug":"docker-elastic-kibana","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhay001kkp2x3fvr94n2","content":"<blockquote>\n<p>本章介紹使用elasticSearch儲存資料與kibana呈現使用 </p>\n</blockquote>\n<h3 id=\"本文內容：\"><a href=\"#本文內容：\" class=\"headerlink\" title=\"本文內容：\"></a>本文內容：</h3><ul>\n<li>自行建立elasticSearch/kibana [docker]</li>\n<li>建立elasticSearch index與傳送資料</li>\n<li>使用kibana查詢資料</li>\n</ul>\n<a id=\"more\"></a>\n\n<h3 id=\"1-啟動docker-elasticSearch-kibana\"><a href=\"#1-啟動docker-elasticSearch-kibana\" class=\"headerlink\" title=\"1.啟動docker-elasticSearch/kibana\"></a>1.啟動docker-elasticSearch/kibana</h3><ul>\n<li>先備知識:docker &amp; docker-compose</li>\n<li>先將網路上找到的<a href=\"https://github.com/minilabmemo/docker-compose-record/tree/master/elastic_kibana\">docker-compose.yml</a>內容編輯好，然後在一樣的目錄下開啟指令docker-compose up -d</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span>-compose up -d</span><br><span class=\"line\">WARNING: Some services (elasticsearch, kibana) use the <span class=\"string\">&#x27;deploy&#x27;</span> key, <span class=\"built_in\">which</span> will be ignored. Compose does not support <span class=\"string\">&#x27;deploy&#x27;</span> configuration - use `docker stack deploy` to deploy to a swarm.</span><br><span class=\"line\">Starting elasticsearch-624 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting kibana-624        ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>需要一點時間，可以用Kitematic之類的工具查看有沒有成功<br></p>\n<ul>\n<li><p>GET localhost:9200 確認elasticSearch是否啟動<br>成功會回版號等資訊 “number”: “6.2.4”</p>\n</li>\n<li><p>開啟瀏覽器，確認kibana有無成功<br><a href=\"http://127.0.0.1:5601/app/kibana#/home?_g=()\">http://127.0.0.1:5601/app/kibana#/home?_g=()</a></p>\n</li>\n</ul>\n<h3 id=\"2-準備資料與index\"><a href=\"#2-準備資料與index\" class=\"headerlink\" title=\"2.準備資料與index\"></a>2.準備資料與index</h3><ul>\n<li>先設計資料內容，假設今天要收集一個使用者每天的運動紀錄<br>這是一個有array的紀錄內容，內容可長可短。<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user&quot;</span>: <span class=\"string\">&quot;user01&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;timestamp&quot;</span>: <span class=\"number\">1583734521000</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;records&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;heart_rate&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_txt&quot;</span>: <span class=\"string\">&quot;avg&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;Calories&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">200</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;time_duration&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_unit&quot;</span>: <span class=\"string\">&quot;min&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"接著新增必須欄位的屬性index\"><a href=\"#接著新增必須欄位的屬性index\" class=\"headerlink\" title=\"接著新增必須欄位的屬性index\"></a>接著新增必須欄位的屬性index</h4><ul>\n<li>user是一般text,timestamp是date</li>\n<li>records先建立nested巢狀，在建立裡面的record_name等欄位。</li>\n<li>建立index: PUT localhost:9200/{index}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT localhost:9200&#x2F;event</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;_doc&quot;: &#123;</span><br><span class=\"line\">            &quot;properties&quot;: &#123;</span><br><span class=\"line\">                &quot;user&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                    &quot;fields&quot;: &#123;</span><br><span class=\"line\">                        &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                            &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;id&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                    &quot;fields&quot;: &#123;</span><br><span class=\"line\">                        &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                            &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;date&quot;,</span><br><span class=\"line\">                    &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;records&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;nested&quot;,</span><br><span class=\"line\">                    &quot;properties&quot;: &#123;</span><br><span class=\"line\">                        &quot;record_name&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;data_number&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;long&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;data_txt&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;record_unit&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"送資料進去\"><a href=\"#送資料進去\" class=\"headerlink\" title=\"送資料進去\"></a>送資料進去</h4></li>\n<li>接著把上述資料先送一筆進去</li>\n<li> <a href=\"http://localhost:9200/%7Bindex%7D/%7Btype%7D\">http://localhost:9200/{index}/{type}</a><br>POST <a href=\"http://localhost:9200/event/_doc\">http://localhost:9200/event/_doc</a></li>\n</ul>\n<h3 id=\"kibana建立index\"><a href=\"#kibana建立index\" class=\"headerlink\" title=\"kibana建立index\"></a>kibana建立index</h3><ul>\n<li><h4 id=\"建立index\"><a href=\"#建立index\" class=\"headerlink\" title=\"建立index\"></a>建立index</h4><p>Management頁面-&gt;create index-&gt;填入event-&gt;選擇可以做時間分割的欄位名稱{上述是用timestamp}-&gt;按下create index pattern<br></p>\n</li>\n<li><h4 id=\"Discover頁面搜尋資料\"><a href=\"#Discover頁面搜尋資料\" class=\"headerlink\" title=\"Discover頁面搜尋資料\"></a>Discover頁面搜尋資料</h4><p>再送一次資料，這次把 “timestamp”: {改成現在時間戳}-&gt;線上有很多工具可以做轉換<br>回到Discover頁面，query最近15分鐘的資料-&gt;就可以看到時間軸了<br></p>\n</li>\n<li><h4 id=\"Visualize-建立感興趣的圖表展示\"><a href=\"#Visualize-建立感興趣的圖表展示\" class=\"headerlink\" title=\"Visualize 建立感興趣的圖表展示\"></a>Visualize 建立感興趣的圖表展示</h4><p>ex: table顯示/長條圖顯示等/或是特定filter資料。然後替圖表存檔。<br></p>\n</li>\n<li><h4 id=\"Dashboard-頁面\"><a href=\"#Dashboard-頁面\" class=\"headerlink\" title=\"Dashboard 頁面\"></a>Dashboard 頁面</h4><p>這邊把剛剛建立的圖表拉好顯示在這邊。</p>\n</li>\n<li><h4 id=\"dev-tools-頁面\"><a href=\"#dev-tools-頁面\" class=\"headerlink\" title=\"dev tools 頁面\"></a>dev tools 頁面</h4><p>透過條件指令搜尋特定資料，如有程式需要可以用搜尋API試著找出自己想搜尋的內容</p>\n</li>\n<li><p>size/page/sort 分頁與排序依據</p>\n</li>\n<li><p>bool query 條件-filter時間/range/match/wildcard等搜尋</p>\n<ul>\n<li>所有 must 必须匹配，所有 must_not 都必须不匹配</li>\n<li>minimum_should_match 參數控制需要匹配的 should 語句的數量</li>\n</ul>\n</li>\n</ul>\n<p>範例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;event&#x2F;_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 1000,</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;filter&quot;: &#123;</span><br><span class=\"line\">        &quot;range&quot;: &#123;</span><br><span class=\"line\">          &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">            &quot;from&quot;: 159132465000,</span><br><span class=\"line\">            &quot;include_lower&quot;: true,</span><br><span class=\"line\">            &quot;include_upper&quot;: true,</span><br><span class=\"line\">            &quot;to&quot;: 1591324650099</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;exists&quot;: &#123;</span><br><span class=\"line\">            &quot;field&quot;: &quot;user&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;nested&quot;: &#123;</span><br><span class=\"line\">            &quot;path&quot;: &quot;records&quot;,</span><br><span class=\"line\">            &quot;query&quot;: &#123;</span><br><span class=\"line\">              &quot;bool&quot;: &#123;</span><br><span class=\"line\">                &quot;must&quot;: [</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;match&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.record_name&quot;: &#123;</span><br><span class=\"line\">                        &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">                        &quot;query&quot;: &quot;heart_rate&quot;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;wildcard&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.data_txt&quot;: &quot;*a*&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;range&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.data_number&quot;: &#123;</span><br><span class=\"line\">                        &quot;from&quot;: 2,</span><br><span class=\"line\">                        &quot;include_lower&quot;: false,</span><br><span class=\"line\">                        &quot;include_upper&quot;: true,</span><br><span class=\"line\">                        &quot;to&quot;: null</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;minimum_should_match&quot;: &quot;1&quot;,</span><br><span class=\"line\">      &quot;should&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user02&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;sort&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">        &quot;order&quot;: &quot;desc&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/bool-query.html\" title=\"elastic-組合查詢 中文\">elastic-組合查詢 中文</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本章介紹使用elasticSearch儲存資料與kibana呈現使用 </p>\n</blockquote>\n<h3 id=\"本文內容：\"><a href=\"#本文內容：\" class=\"headerlink\" title=\"本文內容：\"></a>本文內容：</h3><ul>\n<li>自行建立elasticSearch/kibana [docker]</li>\n<li>建立elasticSearch index與傳送資料</li>\n<li>使用kibana查詢資料</li>\n</ul>","more":"<h3 id=\"1-啟動docker-elasticSearch-kibana\"><a href=\"#1-啟動docker-elasticSearch-kibana\" class=\"headerlink\" title=\"1.啟動docker-elasticSearch/kibana\"></a>1.啟動docker-elasticSearch/kibana</h3><ul>\n<li>先備知識:docker &amp; docker-compose</li>\n<li>先將網路上找到的<a href=\"https://github.com/minilabmemo/docker-compose-record/tree/master/elastic_kibana\">docker-compose.yml</a>內容編輯好，然後在一樣的目錄下開啟指令docker-compose up -d</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable\">$docker</span>-compose up -d</span><br><span class=\"line\">WARNING: Some services (elasticsearch, kibana) use the <span class=\"string\">&#x27;deploy&#x27;</span> key, <span class=\"built_in\">which</span> will be ignored. Compose does not support <span class=\"string\">&#x27;deploy&#x27;</span> configuration - use `docker stack deploy` to deploy to a swarm.</span><br><span class=\"line\">Starting elasticsearch-624 ... <span class=\"keyword\">done</span></span><br><span class=\"line\">Starting kibana-624        ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>需要一點時間，可以用Kitematic之類的工具查看有沒有成功<br></p>\n<ul>\n<li><p>GET localhost:9200 確認elasticSearch是否啟動<br>成功會回版號等資訊 “number”: “6.2.4”</p>\n</li>\n<li><p>開啟瀏覽器，確認kibana有無成功<br><a href=\"http://127.0.0.1:5601/app/kibana#/home?_g=()\">http://127.0.0.1:5601/app/kibana#/home?_g=()</a></p>\n</li>\n</ul>\n<h3 id=\"2-準備資料與index\"><a href=\"#2-準備資料與index\" class=\"headerlink\" title=\"2.準備資料與index\"></a>2.準備資料與index</h3><ul>\n<li>先設計資料內容，假設今天要收集一個使用者每天的運動紀錄<br>這是一個有array的紀錄內容，內容可長可短。<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;user&quot;</span>: <span class=\"string\">&quot;user01&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;timestamp&quot;</span>: <span class=\"number\">1583734521000</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;records&quot;</span>: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;heart_rate&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">80</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_txt&quot;</span>: <span class=\"string\">&quot;avg&quot;</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;Calories&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">200</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_name&quot;</span>: <span class=\"string\">&quot;time_duration&quot;</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;data_number&quot;</span>: <span class=\"number\">30</span>,</span><br><span class=\"line\">            <span class=\"attr\">&quot;record_unit&quot;</span>: <span class=\"string\">&quot;min&quot;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"接著新增必須欄位的屬性index\"><a href=\"#接著新增必須欄位的屬性index\" class=\"headerlink\" title=\"接著新增必須欄位的屬性index\"></a>接著新增必須欄位的屬性index</h4><ul>\n<li>user是一般text,timestamp是date</li>\n<li>records先建立nested巢狀，在建立裡面的record_name等欄位。</li>\n<li>建立index: PUT localhost:9200/{index}<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PUT localhost:9200&#x2F;event</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;mappings&quot;: &#123;</span><br><span class=\"line\">        &quot;_doc&quot;: &#123;</span><br><span class=\"line\">            &quot;properties&quot;: &#123;</span><br><span class=\"line\">                &quot;user&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                    &quot;fields&quot;: &#123;</span><br><span class=\"line\">                        &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                            &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;id&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                    &quot;fields&quot;: &#123;</span><br><span class=\"line\">                        &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                            &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;date&quot;,</span><br><span class=\"line\">                    &quot;format&quot;: &quot;epoch_millis&quot;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &quot;records&quot;: &#123;</span><br><span class=\"line\">                    &quot;type&quot;: &quot;nested&quot;,</span><br><span class=\"line\">                    &quot;properties&quot;: &#123;</span><br><span class=\"line\">                        &quot;record_name&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;data_number&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;long&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;data_txt&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;,</span><br><span class=\"line\">                        &quot;record_unit&quot;: &#123;</span><br><span class=\"line\">                            &quot;type&quot;: &quot;text&quot;,</span><br><span class=\"line\">                            &quot;fields&quot;: &#123;</span><br><span class=\"line\">                                &quot;keyword&quot;: &#123;</span><br><span class=\"line\">                                    &quot;type&quot;: &quot;keyword&quot;,</span><br><span class=\"line\">                                    &quot;ignore_above&quot;: 256</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"送資料進去\"><a href=\"#送資料進去\" class=\"headerlink\" title=\"送資料進去\"></a>送資料進去</h4></li>\n<li>接著把上述資料先送一筆進去</li>\n<li> <a href=\"http://localhost:9200/%7Bindex%7D/%7Btype%7D\">http://localhost:9200/{index}/{type}</a><br>POST <a href=\"http://localhost:9200/event/_doc\">http://localhost:9200/event/_doc</a></li>\n</ul>\n<h3 id=\"kibana建立index\"><a href=\"#kibana建立index\" class=\"headerlink\" title=\"kibana建立index\"></a>kibana建立index</h3><ul>\n<li><h4 id=\"建立index\"><a href=\"#建立index\" class=\"headerlink\" title=\"建立index\"></a>建立index</h4><p>Management頁面-&gt;create index-&gt;填入event-&gt;選擇可以做時間分割的欄位名稱{上述是用timestamp}-&gt;按下create index pattern<br></p>\n</li>\n<li><h4 id=\"Discover頁面搜尋資料\"><a href=\"#Discover頁面搜尋資料\" class=\"headerlink\" title=\"Discover頁面搜尋資料\"></a>Discover頁面搜尋資料</h4><p>再送一次資料，這次把 “timestamp”: {改成現在時間戳}-&gt;線上有很多工具可以做轉換<br>回到Discover頁面，query最近15分鐘的資料-&gt;就可以看到時間軸了<br></p>\n</li>\n<li><h4 id=\"Visualize-建立感興趣的圖表展示\"><a href=\"#Visualize-建立感興趣的圖表展示\" class=\"headerlink\" title=\"Visualize 建立感興趣的圖表展示\"></a>Visualize 建立感興趣的圖表展示</h4><p>ex: table顯示/長條圖顯示等/或是特定filter資料。然後替圖表存檔。<br></p>\n</li>\n<li><h4 id=\"Dashboard-頁面\"><a href=\"#Dashboard-頁面\" class=\"headerlink\" title=\"Dashboard 頁面\"></a>Dashboard 頁面</h4><p>這邊把剛剛建立的圖表拉好顯示在這邊。</p>\n</li>\n<li><h4 id=\"dev-tools-頁面\"><a href=\"#dev-tools-頁面\" class=\"headerlink\" title=\"dev tools 頁面\"></a>dev tools 頁面</h4><p>透過條件指令搜尋特定資料，如有程式需要可以用搜尋API試著找出自己想搜尋的內容</p>\n</li>\n<li><p>size/page/sort 分頁與排序依據</p>\n</li>\n<li><p>bool query 條件-filter時間/range/match/wildcard等搜尋</p>\n<ul>\n<li>所有 must 必须匹配，所有 must_not 都必须不匹配</li>\n<li>minimum_should_match 參數控制需要匹配的 should 語句的數量</li>\n</ul>\n</li>\n</ul>\n<p>範例:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GET &#x2F;event&#x2F;_search</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;size&quot;: 1000,</span><br><span class=\"line\">  &quot;query&quot;: &#123;</span><br><span class=\"line\">    &quot;bool&quot;: &#123;</span><br><span class=\"line\">      &quot;filter&quot;: &#123;</span><br><span class=\"line\">        &quot;range&quot;: &#123;</span><br><span class=\"line\">          &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">            &quot;from&quot;: 159132465000,</span><br><span class=\"line\">            &quot;include_lower&quot;: true,</span><br><span class=\"line\">            &quot;include_upper&quot;: true,</span><br><span class=\"line\">            &quot;to&quot;: 1591324650099</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &quot;must&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;exists&quot;: &#123;</span><br><span class=\"line\">            &quot;field&quot;: &quot;user&quot;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;nested&quot;: &#123;</span><br><span class=\"line\">            &quot;path&quot;: &quot;records&quot;,</span><br><span class=\"line\">            &quot;query&quot;: &#123;</span><br><span class=\"line\">              &quot;bool&quot;: &#123;</span><br><span class=\"line\">                &quot;must&quot;: [</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;match&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.record_name&quot;: &#123;</span><br><span class=\"line\">                        &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">                        &quot;query&quot;: &quot;heart_rate&quot;</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;wildcard&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.data_txt&quot;: &quot;*a*&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;,</span><br><span class=\"line\">                  &#123;</span><br><span class=\"line\">                    &quot;range&quot;: &#123;</span><br><span class=\"line\">                      &quot;records.data_number&quot;: &#123;</span><br><span class=\"line\">                        &quot;from&quot;: 2,</span><br><span class=\"line\">                        &quot;include_lower&quot;: false,</span><br><span class=\"line\">                        &quot;include_upper&quot;: true,</span><br><span class=\"line\">                        &quot;to&quot;: null</span><br><span class=\"line\">                      &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                  &#125;</span><br><span class=\"line\">                ]</span><br><span class=\"line\">              &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ],</span><br><span class=\"line\">      &quot;minimum_should_match&quot;: &quot;1&quot;,</span><br><span class=\"line\">      &quot;should&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user01&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          &quot;match&quot;: &#123;</span><br><span class=\"line\">            &quot;user&quot;: &#123;</span><br><span class=\"line\">              &quot;operator&quot;: &quot;AND&quot;,</span><br><span class=\"line\">              &quot;query&quot;: &quot;user02&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &quot;sort&quot;: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      &quot;timestamp&quot;: &#123;</span><br><span class=\"line\">        &quot;order&quot;: &quot;desc&quot;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.elastic.co/guide/cn/elasticsearch/guide/current/bool-query.html\" title=\"elastic-組合查詢 中文\">elastic-組合查詢 中文</a></li>\n</ul>"},{"title":"[docker/mongo]使用docker啟動mongo與操作","date":"2020-09-12T02:46:53.000Z","_content":"\n\n# 什麼是mongo\n\n <blockquote class=\"blockquote-center\">\n MongoDB是NoSQL的資料庫，以文件儲存資料，一般資料庫開Table須定義欄位(大小、型別、名稱等)，但是Collection完全不事先定義欄位，每筆document可以有不等數量的欄位</blockquote>\n\n# 本文將會知道：\n - 使用docker-compose 快速啟動mongodb\n    - 須先下載docker並具docker-compose知識\n - 簡單的工具操作與MongoDB Shell 更新批量資料\n\n\n\n<!--more-->\n\n\n\n與關聯式資料庫名詞對應：\n\n|  MongoDB | RDBMS  |  意思 |\n| ------------ | ------------ | ------------ |\n|  db |   DB|   資料庫|\n|  collection | Table  |表格   |\n| document  |  record | 一筆紀錄  |\n\n## 1.啟動mongo docker\n\n這邊直接用編輯docker-compose.yml  貼上網路找到的內容\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  mongo:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n    restart: always\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n```\n\n啟動\n```bash\n➜  mongo git:(master) ✗ docker-compose up -d   \nCreating network \"mongo_default\" with the default driver\nCreating mongo_mongo_1         ... done\n```\n\n\n## 2.操作資料內容\n\n以下可用透過一些網上mongo工具 ex Robo3T操作\n\n先進行連線進入介面host: localhost, port: 27017\n\nCreateDB\"test\"，新增一筆Collection\"user\"，與新增Documanet如下(Json格式)\n```json\n{\n    \"profile\" : {\n        \"name\" : \"user1\",\n        \"gender\" : \"F\",\n        \"age\" : 18\n    }\n}\n```\n\n\n新增完會自動產生唯一的objectID，透過工具也可以對資料做簡單的修改動作。\n\n## 3.mongo shell\n- 可以再有提供shell指令視窗的工具上下指令去做更新進階的搜尋，\n- 例如mongo 3T上方就有視窗可以使用．\n\n------------\n\n\n### 搜尋指令\n#### 搜尋全部\n```\ndb.getCollection('user').find({}) \n```\n\n#### 搜尋by_id\n```\ndb.getCollection('user').find({_id:ObjectId(\"5eaa780f3dfac43981e4412c\")})\n```\n\n#### 限制顯示的欄位: 1可見,0不可見\n```\ndb.getCollection('user').find({},{profile.name:1})\n\n有一點像是\nSELECT profile.name FROM user\n_id預設顯示，可以關掉_id:0 \n```\n\n#### 搜尋內容值\n```\ndb.getCollection('user').find({\"profile.name\":\"user1\"})\n```\n\n#### 搜尋範圍 數字型態  \n```\n[gt大於，gte大於等於，lt小於，lte小於等於]\ndb.getCollection('user').find({\"profile.gender\":\"F\",\"profile.age\":{$gt:2,$lte:18}})\n```\n\n#### 搜尋範圍 字串型態 \n```\n按UTF-8進行字典排序 表搜尋字母A~Z間\ndb.getCollection('user').find({\"profile.name\":{$gt:\"a\",$lte:\"z\"}})\n```\n\n#### 排序\n```\n依命名排序，其中 1 为升序排列，而 -1 是用于降序排列\ndb.getCollection('user').find({}).sort({name:1})\n```\n\n#### 顯示筆數(limit)與開始(skip)\n```\n可以用他來做分頁讀取\ndb.getCollection('user').find({}).sort({name:1}).skip(0).limit(2)\n```\n\n\n------------\n\n\n### 計算總數\n```\ndb.getCollection('user').find().count()\n```\n\n------------\n\n\n### 批次更新 \n一般來說工具就可以做內容更新，但如果需要透過指令，\n#### 更新欄位\n將性別欄位“F”全改成“woman”\n```bash\ndb.getCollection('user').find().forEach( function(d) {\n     \nif(d.profile.gender==\"F\"){\n    d.profile.gender=\"woman\"\n    db.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n};\n});\n```\n\n\n#### 新增欄位合併內容\n\n```bash\ndb.getCollection('user').find().forEach( function(d) {\nd.description= d.profile.name+\",\"+d.profile.gender;\ndb.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n});\n```\n\n####  刪除欄位\n```bash\ndb.getCollection('user').find().forEach( function(d) {\ndelete d.description\ndb.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n});\n```\n\n------------\n\n\n\n\n- 如果是要在mongo的docker環境上面下指令\n需要把指令包成js，檔案丟進去docker裡面，\n然後下指令\n```bash\nload(\"script/Change.js\") //檔案位置\nmongo 127.0.0.1:27017/test Change.js\n```\n執行結果與上述內容一樣\n\n\n------------\n本章對mongo的簡單操作到此結束，\n之後再介紹如何用golang程式去對mongo CRUD操作．\n\n","source":"_posts/docker-mongo.md","raw":"---\ntitle: \"[docker/mongo]使用docker啟動mongo與操作\"\ntags:\n  - docker\n  - mongo\ncategories:\n  - [Tech.,deploy, docker]\n  - [Tech., back-end,db]\ndate: 2020-09-12 10:46:53\n---\n\n\n# 什麼是mongo\n\n <blockquote class=\"blockquote-center\">\n MongoDB是NoSQL的資料庫，以文件儲存資料，一般資料庫開Table須定義欄位(大小、型別、名稱等)，但是Collection完全不事先定義欄位，每筆document可以有不等數量的欄位</blockquote>\n\n# 本文將會知道：\n - 使用docker-compose 快速啟動mongodb\n    - 須先下載docker並具docker-compose知識\n - 簡單的工具操作與MongoDB Shell 更新批量資料\n\n\n\n<!--more-->\n\n\n\n與關聯式資料庫名詞對應：\n\n|  MongoDB | RDBMS  |  意思 |\n| ------------ | ------------ | ------------ |\n|  db |   DB|   資料庫|\n|  collection | Table  |表格   |\n| document  |  record | 一筆紀錄  |\n\n## 1.啟動mongo docker\n\n這邊直接用編輯docker-compose.yml  貼上網路找到的內容\n\n```yaml\nversion: '3.1'\n\nservices:\n\n  mongo:\n    image: mongo\n    ports:\n      - \"27017:27017\"\n    restart: always\n    environment:\n      MONGO_INITDB_ROOT_USERNAME: root\n      MONGO_INITDB_ROOT_PASSWORD: example\n```\n\n啟動\n```bash\n➜  mongo git:(master) ✗ docker-compose up -d   \nCreating network \"mongo_default\" with the default driver\nCreating mongo_mongo_1         ... done\n```\n\n\n## 2.操作資料內容\n\n以下可用透過一些網上mongo工具 ex Robo3T操作\n\n先進行連線進入介面host: localhost, port: 27017\n\nCreateDB\"test\"，新增一筆Collection\"user\"，與新增Documanet如下(Json格式)\n```json\n{\n    \"profile\" : {\n        \"name\" : \"user1\",\n        \"gender\" : \"F\",\n        \"age\" : 18\n    }\n}\n```\n\n\n新增完會自動產生唯一的objectID，透過工具也可以對資料做簡單的修改動作。\n\n## 3.mongo shell\n- 可以再有提供shell指令視窗的工具上下指令去做更新進階的搜尋，\n- 例如mongo 3T上方就有視窗可以使用．\n\n------------\n\n\n### 搜尋指令\n#### 搜尋全部\n```\ndb.getCollection('user').find({}) \n```\n\n#### 搜尋by_id\n```\ndb.getCollection('user').find({_id:ObjectId(\"5eaa780f3dfac43981e4412c\")})\n```\n\n#### 限制顯示的欄位: 1可見,0不可見\n```\ndb.getCollection('user').find({},{profile.name:1})\n\n有一點像是\nSELECT profile.name FROM user\n_id預設顯示，可以關掉_id:0 \n```\n\n#### 搜尋內容值\n```\ndb.getCollection('user').find({\"profile.name\":\"user1\"})\n```\n\n#### 搜尋範圍 數字型態  \n```\n[gt大於，gte大於等於，lt小於，lte小於等於]\ndb.getCollection('user').find({\"profile.gender\":\"F\",\"profile.age\":{$gt:2,$lte:18}})\n```\n\n#### 搜尋範圍 字串型態 \n```\n按UTF-8進行字典排序 表搜尋字母A~Z間\ndb.getCollection('user').find({\"profile.name\":{$gt:\"a\",$lte:\"z\"}})\n```\n\n#### 排序\n```\n依命名排序，其中 1 为升序排列，而 -1 是用于降序排列\ndb.getCollection('user').find({}).sort({name:1})\n```\n\n#### 顯示筆數(limit)與開始(skip)\n```\n可以用他來做分頁讀取\ndb.getCollection('user').find({}).sort({name:1}).skip(0).limit(2)\n```\n\n\n------------\n\n\n### 計算總數\n```\ndb.getCollection('user').find().count()\n```\n\n------------\n\n\n### 批次更新 \n一般來說工具就可以做內容更新，但如果需要透過指令，\n#### 更新欄位\n將性別欄位“F”全改成“woman”\n```bash\ndb.getCollection('user').find().forEach( function(d) {\n     \nif(d.profile.gender==\"F\"){\n    d.profile.gender=\"woman\"\n    db.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n};\n});\n```\n\n\n#### 新增欄位合併內容\n\n```bash\ndb.getCollection('user').find().forEach( function(d) {\nd.description= d.profile.name+\",\"+d.profile.gender;\ndb.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n});\n```\n\n####  刪除欄位\n```bash\ndb.getCollection('user').find().forEach( function(d) {\ndelete d.description\ndb.getCollection('user').update({\"profile.name\":d.profile.name},d);\n    print(d.profile.name+\" process change done\" );  \n});\n```\n\n------------\n\n\n\n\n- 如果是要在mongo的docker環境上面下指令\n需要把指令包成js，檔案丟進去docker裡面，\n然後下指令\n```bash\nload(\"script/Change.js\") //檔案位置\nmongo 127.0.0.1:27017/test Change.js\n```\n執行結果與上述內容一樣\n\n\n------------\n本章對mongo的簡單操作到此結束，\n之後再介紹如何用golang程式去對mongo CRUD操作．\n\n","slug":"docker-mongo","published":1,"updated":"2023-01-22T07:04:09.867Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb0001mkp2x1zwv6has","content":"<h1 id=\"什麼是mongo\"><a href=\"#什麼是mongo\" class=\"headerlink\" title=\"什麼是mongo\"></a>什麼是mongo</h1> <blockquote class=\"blockquote-center\">\n MongoDB是NoSQL的資料庫，以文件儲存資料，一般資料庫開Table須定義欄位(大小、型別、名稱等)，但是Collection完全不事先定義欄位，每筆document可以有不等數量的欄位</blockquote>\n\n<h1 id=\"本文將會知道：\"><a href=\"#本文將會知道：\" class=\"headerlink\" title=\"本文將會知道：\"></a>本文將會知道：</h1><ul>\n<li>使用docker-compose 快速啟動mongodb<ul>\n<li>須先下載docker並具docker-compose知識</li>\n</ul>\n</li>\n<li>簡單的工具操作與MongoDB Shell 更新批量資料</li>\n</ul>\n<a id=\"more\"></a>\n\n\n\n<p>與關聯式資料庫名詞對應：</p>\n<table>\n<thead>\n<tr>\n<th>MongoDB</th>\n<th>RDBMS</th>\n<th>意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>db</td>\n<td>DB</td>\n<td>資料庫</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>Table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>document</td>\n<td>record</td>\n<td>一筆紀錄</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-啟動mongo-docker\"><a href=\"#1-啟動mongo-docker\" class=\"headerlink\" title=\"1.啟動mongo docker\"></a>1.啟動mongo docker</h2><p>這邊直接用編輯docker-compose.yml  貼上網路找到的內容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;27017:27017&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br></pre></td></tr></table></figure>\n<p>啟動</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mongo git:(master) ✗ docker-compose up -d   </span><br><span class=\"line\">Creating network <span class=\"string\">&quot;mongo_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating mongo_mongo_1         ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-操作資料內容\"><a href=\"#2-操作資料內容\" class=\"headerlink\" title=\"2.操作資料內容\"></a>2.操作資料內容</h2><p>以下可用透過一些網上mongo工具 ex Robo3T操作</p>\n<p>先進行連線進入介面host: localhost, port: 27017</p>\n<p>CreateDB”test”，新增一筆Collection”user”，與新增Documanet如下(Json格式)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;profile&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span> : <span class=\"string\">&quot;user1&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;gender&quot;</span> : <span class=\"string\">&quot;F&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;age&quot;</span> : <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新增完會自動產生唯一的objectID，透過工具也可以對資料做簡單的修改動作。</p>\n<h2 id=\"3-mongo-shell\"><a href=\"#3-mongo-shell\" class=\"headerlink\" title=\"3.mongo shell\"></a>3.mongo shell</h2><ul>\n<li>可以再有提供shell指令視窗的工具上下指令去做更新進階的搜尋，</li>\n<li>例如mongo 3T上方就有視窗可以使用．</li>\n</ul>\n<hr>\n<h3 id=\"搜尋指令\"><a href=\"#搜尋指令\" class=\"headerlink\" title=\"搜尋指令\"></a>搜尋指令</h3><h4 id=\"搜尋全部\"><a href=\"#搜尋全部\" class=\"headerlink\" title=\"搜尋全部\"></a>搜尋全部</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;) </span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋by-id\"><a href=\"#搜尋by-id\" class=\"headerlink\" title=\"搜尋by_id\"></a>搜尋by_id</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;_id:ObjectId(&quot;5eaa780f3dfac43981e4412c&quot;)&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"限制顯示的欄位-1可見-0不可見\"><a href=\"#限制顯示的欄位-1可見-0不可見\" class=\"headerlink\" title=\"限制顯示的欄位: 1可見,0不可見\"></a>限制顯示的欄位: 1可見,0不可見</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;,&#123;profile.name:1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">有一點像是</span><br><span class=\"line\">SELECT profile.name FROM user</span><br><span class=\"line\">_id預設顯示，可以關掉_id:0 </span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋內容值\"><a href=\"#搜尋內容值\" class=\"headerlink\" title=\"搜尋內容值\"></a>搜尋內容值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.name&quot;:&quot;user1&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋範圍-數字型態\"><a href=\"#搜尋範圍-數字型態\" class=\"headerlink\" title=\"搜尋範圍 數字型態\"></a>搜尋範圍 數字型態</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gt大於，gte大於等於，lt小於，lte小於等於]</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.gender&quot;:&quot;F&quot;,&quot;profile.age&quot;:&#123;$gt:2,$lte:18&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋範圍-字串型態\"><a href=\"#搜尋範圍-字串型態\" class=\"headerlink\" title=\"搜尋範圍 字串型態\"></a>搜尋範圍 字串型態</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按UTF-8進行字典排序 表搜尋字母A~Z間</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.name&quot;:&#123;$gt:&quot;a&quot;,$lte:&quot;z&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依命名排序，其中 1 为升序排列，而 -1 是用于降序排列</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;).sort(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示筆數-limit-與開始-skip\"><a href=\"#顯示筆數-limit-與開始-skip\" class=\"headerlink\" title=\"顯示筆數(limit)與開始(skip)\"></a>顯示筆數(limit)與開始(skip)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用他來做分頁讀取</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;).sort(&#123;name:1&#125;).skip(0).limit(2)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"計算總數\"><a href=\"#計算總數\" class=\"headerlink\" title=\"計算總數\"></a>計算總數</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find().count()</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"批次更新\"><a href=\"#批次更新\" class=\"headerlink\" title=\"批次更新\"></a>批次更新</h3><p>一般來說工具就可以做內容更新，但如果需要透過指令，</p>\n<h4 id=\"更新欄位\"><a href=\"#更新欄位\" class=\"headerlink\" title=\"更新欄位\"></a>更新欄位</h4><p>將性別欄位“F”全改成“woman”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">if</span>(d.profile.gender==<span class=\"string\">&quot;F&quot;</span>)&#123;</span><br><span class=\"line\">    d.profile.gender=<span class=\"string\">&quot;woman&quot;</span></span><br><span class=\"line\">    db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新增欄位合併內容\"><a href=\"#新增欄位合併內容\" class=\"headerlink\" title=\"新增欄位合併內容\"></a>新增欄位合併內容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">d.description= d.profile.name+<span class=\"string\">&quot;,&quot;</span>+d.profile.gender;</span><br><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"刪除欄位\"><a href=\"#刪除欄位\" class=\"headerlink\" title=\"刪除欄位\"></a>刪除欄位</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">delete d.description</span><br><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>如果是要在mongo的docker環境上面下指令<br>需要把指令包成js，檔案丟進去docker裡面，<br>然後下指令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(<span class=\"string\">&quot;script/Change.js&quot;</span>) //檔案位置</span><br><span class=\"line\">mongo 127.0.0.1:27017/<span class=\"built_in\">test</span> Change.js</span><br></pre></td></tr></table></figure>\n執行結果與上述內容一樣</li>\n</ul>\n<hr>\n<p>本章對mongo的簡單操作到此結束，<br>之後再介紹如何用golang程式去對mongo CRUD操作．</p>\n","site":{"data":{}},"excerpt":"<h1 id=\"什麼是mongo\"><a href=\"#什麼是mongo\" class=\"headerlink\" title=\"什麼是mongo\"></a>什麼是mongo</h1> <blockquote class=\"blockquote-center\">\n MongoDB是NoSQL的資料庫，以文件儲存資料，一般資料庫開Table須定義欄位(大小、型別、名稱等)，但是Collection完全不事先定義欄位，每筆document可以有不等數量的欄位</blockquote>\n\n<h1 id=\"本文將會知道：\"><a href=\"#本文將會知道：\" class=\"headerlink\" title=\"本文將會知道：\"></a>本文將會知道：</h1><ul>\n<li>使用docker-compose 快速啟動mongodb<ul>\n<li>須先下載docker並具docker-compose知識</li>\n</ul>\n</li>\n<li>簡單的工具操作與MongoDB Shell 更新批量資料</li>\n</ul>","more":"<p>與關聯式資料庫名詞對應：</p>\n<table>\n<thead>\n<tr>\n<th>MongoDB</th>\n<th>RDBMS</th>\n<th>意思</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>db</td>\n<td>DB</td>\n<td>資料庫</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>Table</td>\n<td>表格</td>\n</tr>\n<tr>\n<td>document</td>\n<td>record</td>\n<td>一筆紀錄</td>\n</tr>\n</tbody></table>\n<h2 id=\"1-啟動mongo-docker\"><a href=\"#1-啟動mongo-docker\" class=\"headerlink\" title=\"1.啟動mongo docker\"></a>1.啟動mongo docker</h2><p>這邊直接用編輯docker-compose.yml  貼上網路找到的內容</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">version:</span> <span class=\"string\">&#x27;3.1&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"attr\">services:</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">mongo:</span></span><br><span class=\"line\">    <span class=\"attr\">image:</span> <span class=\"string\">mongo</span></span><br><span class=\"line\">    <span class=\"attr\">ports:</span></span><br><span class=\"line\">      <span class=\"bullet\">-</span> <span class=\"string\">&quot;27017:27017&quot;</span></span><br><span class=\"line\">    <span class=\"attr\">restart:</span> <span class=\"string\">always</span></span><br><span class=\"line\">    <span class=\"attr\">environment:</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_USERNAME:</span> <span class=\"string\">root</span></span><br><span class=\"line\">      <span class=\"attr\">MONGO_INITDB_ROOT_PASSWORD:</span> <span class=\"string\">example</span></span><br></pre></td></tr></table></figure>\n<p>啟動</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">➜  mongo git:(master) ✗ docker-compose up -d   </span><br><span class=\"line\">Creating network <span class=\"string\">&quot;mongo_default&quot;</span> with the default driver</span><br><span class=\"line\">Creating mongo_mongo_1         ... <span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"2-操作資料內容\"><a href=\"#2-操作資料內容\" class=\"headerlink\" title=\"2.操作資料內容\"></a>2.操作資料內容</h2><p>以下可用透過一些網上mongo工具 ex Robo3T操作</p>\n<p>先進行連線進入介面host: localhost, port: 27017</p>\n<p>CreateDB”test”，新增一筆Collection”user”，與新增Documanet如下(Json格式)</p>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;profile&quot;</span> : &#123;</span><br><span class=\"line\">        <span class=\"attr\">&quot;name&quot;</span> : <span class=\"string\">&quot;user1&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;gender&quot;</span> : <span class=\"string\">&quot;F&quot;</span>,</span><br><span class=\"line\">        <span class=\"attr\">&quot;age&quot;</span> : <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>新增完會自動產生唯一的objectID，透過工具也可以對資料做簡單的修改動作。</p>\n<h2 id=\"3-mongo-shell\"><a href=\"#3-mongo-shell\" class=\"headerlink\" title=\"3.mongo shell\"></a>3.mongo shell</h2><ul>\n<li>可以再有提供shell指令視窗的工具上下指令去做更新進階的搜尋，</li>\n<li>例如mongo 3T上方就有視窗可以使用．</li>\n</ul>\n<hr>\n<h3 id=\"搜尋指令\"><a href=\"#搜尋指令\" class=\"headerlink\" title=\"搜尋指令\"></a>搜尋指令</h3><h4 id=\"搜尋全部\"><a href=\"#搜尋全部\" class=\"headerlink\" title=\"搜尋全部\"></a>搜尋全部</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;) </span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋by-id\"><a href=\"#搜尋by-id\" class=\"headerlink\" title=\"搜尋by_id\"></a>搜尋by_id</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;_id:ObjectId(&quot;5eaa780f3dfac43981e4412c&quot;)&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"限制顯示的欄位-1可見-0不可見\"><a href=\"#限制顯示的欄位-1可見-0不可見\" class=\"headerlink\" title=\"限制顯示的欄位: 1可見,0不可見\"></a>限制顯示的欄位: 1可見,0不可見</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;,&#123;profile.name:1&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">有一點像是</span><br><span class=\"line\">SELECT profile.name FROM user</span><br><span class=\"line\">_id預設顯示，可以關掉_id:0 </span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋內容值\"><a href=\"#搜尋內容值\" class=\"headerlink\" title=\"搜尋內容值\"></a>搜尋內容值</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.name&quot;:&quot;user1&quot;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋範圍-數字型態\"><a href=\"#搜尋範圍-數字型態\" class=\"headerlink\" title=\"搜尋範圍 數字型態\"></a>搜尋範圍 數字型態</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[gt大於，gte大於等於，lt小於，lte小於等於]</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.gender&quot;:&quot;F&quot;,&quot;profile.age&quot;:&#123;$gt:2,$lte:18&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"搜尋範圍-字串型態\"><a href=\"#搜尋範圍-字串型態\" class=\"headerlink\" title=\"搜尋範圍 字串型態\"></a>搜尋範圍 字串型態</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">按UTF-8進行字典排序 表搜尋字母A~Z間</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&quot;profile.name&quot;:&#123;$gt:&quot;a&quot;,$lte:&quot;z&quot;&#125;&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">依命名排序，其中 1 为升序排列，而 -1 是用于降序排列</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;).sort(&#123;name:1&#125;)</span><br></pre></td></tr></table></figure>\n<h4 id=\"顯示筆數-limit-與開始-skip\"><a href=\"#顯示筆數-limit-與開始-skip\" class=\"headerlink\" title=\"顯示筆數(limit)與開始(skip)\"></a>顯示筆數(limit)與開始(skip)</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用他來做分頁讀取</span><br><span class=\"line\">db.getCollection(&#39;user&#39;).find(&#123;&#125;).sort(&#123;name:1&#125;).skip(0).limit(2)</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"計算總數\"><a href=\"#計算總數\" class=\"headerlink\" title=\"計算總數\"></a>計算總數</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(&#39;user&#39;).find().count()</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"批次更新\"><a href=\"#批次更新\" class=\"headerlink\" title=\"批次更新\"></a>批次更新</h3><p>一般來說工具就可以做內容更新，但如果需要透過指令，</p>\n<h4 id=\"更新欄位\"><a href=\"#更新欄位\" class=\"headerlink\" title=\"更新欄位\"></a>更新欄位</h4><p>將性別欄位“F”全改成“woman”</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">     </span><br><span class=\"line\"><span class=\"keyword\">if</span>(d.profile.gender==<span class=\"string\">&quot;F&quot;</span>)&#123;</span><br><span class=\"line\">    d.profile.gender=<span class=\"string\">&quot;woman&quot;</span></span><br><span class=\"line\">    db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"新增欄位合併內容\"><a href=\"#新增欄位合併內容\" class=\"headerlink\" title=\"新增欄位合併內容\"></a>新增欄位合併內容</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">d.description= d.profile.name+<span class=\"string\">&quot;,&quot;</span>+d.profile.gender;</span><br><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<h4 id=\"刪除欄位\"><a href=\"#刪除欄位\" class=\"headerlink\" title=\"刪除欄位\"></a>刪除欄位</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).find().forEach( <span class=\"keyword\">function</span>(d) &#123;</span><br><span class=\"line\">delete d.description</span><br><span class=\"line\">db.getCollection(<span class=\"string\">&#x27;user&#x27;</span>).update(&#123;<span class=\"string\">&quot;profile.name&quot;</span>:d.profile.name&#125;,d);</span><br><span class=\"line\">    <span class=\"built_in\">print</span>(d.profile.name+<span class=\"string\">&quot; process change done&quot;</span> );  </span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<hr>\n<ul>\n<li>如果是要在mongo的docker環境上面下指令<br>需要把指令包成js，檔案丟進去docker裡面，<br>然後下指令<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">load(<span class=\"string\">&quot;script/Change.js&quot;</span>) //檔案位置</span><br><span class=\"line\">mongo 127.0.0.1:27017/<span class=\"built_in\">test</span> Change.js</span><br></pre></td></tr></table></figure>\n執行結果與上述內容一樣</li>\n</ul>\n<hr>\n<p>本章對mongo的簡單操作到此結束，<br>之後再介紹如何用golang程式去對mongo CRUD操作．</p>"},{"title":"[Docker]快速啟動可用VNC進去連線之ubuntu","date":"2020-09-14T14:22:35.000Z","_content":"\n> 一般來說docker可以快速去建立一個ubuntu環境，但如果習慣畫面操作，還需要再安裝VNC設定，不知道有沒有人做好的VNC版本呢? 網路上找到一個docker image專案可以做到這件事->[docker-ubuntu-vnc-desktop](https://github.com/fcwu/docker-ubuntu-vnc-desktop \"docker-ubuntu-vnc-desktop\")\n\n<!--more-->\n\n\n### 遵照git readme指示啟動:\n\n#### 網頁版本連線\nQuick Start <br>\nRun the docker container and access with port 6080<br>\n\ndocker run -p 6080:80 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc\nBrowse http://127.0.0.1:6080/<br>\n\n#### VNC 版本連線\ndocker run -p 6080:80 -p 5900:5900 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br>\n\n下載VNC工具[realvnc](https://www.realvnc.com/en/connect/download/viewer/ \"realvnc\") 啟動之後連VNC(local:127.0.0.0)就可以一樣看到畫面了<br>","source":"_posts/docker-ubuntu-vnc.md","raw":"---\ntitle: \"[Docker]快速啟動可用VNC進去連線之ubuntu\"\ntags:\n  - docker\ncategories:\n  - Tech.\n  - deploy\n  - docker\ndate: 2020-09-14 22:22:35\n---\n\n> 一般來說docker可以快速去建立一個ubuntu環境，但如果習慣畫面操作，還需要再安裝VNC設定，不知道有沒有人做好的VNC版本呢? 網路上找到一個docker image專案可以做到這件事->[docker-ubuntu-vnc-desktop](https://github.com/fcwu/docker-ubuntu-vnc-desktop \"docker-ubuntu-vnc-desktop\")\n\n<!--more-->\n\n\n### 遵照git readme指示啟動:\n\n#### 網頁版本連線\nQuick Start <br>\nRun the docker container and access with port 6080<br>\n\ndocker run -p 6080:80 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc\nBrowse http://127.0.0.1:6080/<br>\n\n#### VNC 版本連線\ndocker run -p 6080:80 -p 5900:5900 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br>\n\n下載VNC工具[realvnc](https://www.realvnc.com/en/connect/download/viewer/ \"realvnc\") 啟動之後連VNC(local:127.0.0.0)就可以一樣看到畫面了<br>","slug":"docker-ubuntu-vnc","published":1,"updated":"2022-05-01T07:09:56.191Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb2001pkp2xd7xdaisq","content":"<blockquote>\n<p>一般來說docker可以快速去建立一個ubuntu環境，但如果習慣畫面操作，還需要再安裝VNC設定，不知道有沒有人做好的VNC版本呢? 網路上找到一個docker image專案可以做到這件事-&gt;<a href=\"https://github.com/fcwu/docker-ubuntu-vnc-desktop\" title=\"docker-ubuntu-vnc-desktop\">docker-ubuntu-vnc-desktop</a></p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h3 id=\"遵照git-readme指示啟動\"><a href=\"#遵照git-readme指示啟動\" class=\"headerlink\" title=\"遵照git readme指示啟動:\"></a>遵照git readme指示啟動:</h3><h4 id=\"網頁版本連線\"><a href=\"#網頁版本連線\" class=\"headerlink\" title=\"網頁版本連線\"></a>網頁版本連線</h4><p>Quick Start <br><br>Run the docker container and access with port 6080<br></p>\n<p>docker run -p 6080:80 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br>Browse <a href=\"http://127.0.0.1:6080/\">http://127.0.0.1:6080/</a><br></p>\n<h4 id=\"VNC-版本連線\"><a href=\"#VNC-版本連線\" class=\"headerlink\" title=\"VNC 版本連線\"></a>VNC 版本連線</h4><p>docker run -p 6080:80 -p 5900:5900 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br></p>\n<p>下載VNC工具<a href=\"https://www.realvnc.com/en/connect/download/viewer/\" title=\"realvnc\">realvnc</a> 啟動之後連VNC(local:127.0.0.0)就可以一樣看到畫面了<br></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>一般來說docker可以快速去建立一個ubuntu環境，但如果習慣畫面操作，還需要再安裝VNC設定，不知道有沒有人做好的VNC版本呢? 網路上找到一個docker image專案可以做到這件事-&gt;<a href=\"https://github.com/fcwu/docker-ubuntu-vnc-desktop\" title=\"docker-ubuntu-vnc-desktop\">docker-ubuntu-vnc-desktop</a></p>\n</blockquote>","more":"<h3 id=\"遵照git-readme指示啟動\"><a href=\"#遵照git-readme指示啟動\" class=\"headerlink\" title=\"遵照git readme指示啟動:\"></a>遵照git readme指示啟動:</h3><h4 id=\"網頁版本連線\"><a href=\"#網頁版本連線\" class=\"headerlink\" title=\"網頁版本連線\"></a>網頁版本連線</h4><p>Quick Start <br><br>Run the docker container and access with port 6080<br></p>\n<p>docker run -p 6080:80 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br>Browse <a href=\"http://127.0.0.1:6080/\">http://127.0.0.1:6080/</a><br></p>\n<h4 id=\"VNC-版本連線\"><a href=\"#VNC-版本連線\" class=\"headerlink\" title=\"VNC 版本連線\"></a>VNC 版本連線</h4><p>docker run -p 6080:80 -p 5900:5900 -v /dev/shm:/dev/shm dorowu/ubuntu-desktop-lxde-vnc<br></p>\n<p>下載VNC工具<a href=\"https://www.realvnc.com/en/connect/download/viewer/\" title=\"realvnc\">realvnc</a> 啟動之後連VNC(local:127.0.0.0)就可以一樣看到畫面了<br></p>"},{"title":"[command]使用內建指令快速產生大黨","date":"2021-04-20T10:33:30.000Z","_content":"\n\n>開發時有時會需要測試大檔案的上傳，因此需要先準備大檔案，而系統內建就有一些指令可以快速產生虛胖的檔案． \n\n\n<!--more-->\n\n### windows環境\n\n>Fsutil 是用於執行與檔案配置表 (FAT) 和 NTFS 檔案系統相關的工作，例如管理重新剖析點、管理稀疏檔案或卸載磁片區。必須以系統管理員身分執行，才能使用 fsutil。\n\n更多功能請見[microsoft fsutil](https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/fsutil)\n\n#### fsutil file createnew 用法\n- fsutil file createnew 位置 <FileName.txt> <FileSize(size in bytes)>\n```\nC:\\WINDOWS\\system32> fsutil file createnew /?\n使用方法 : fsutil file createNew <filename> <length>\n   例如 : fsutil file createNew C:\\testfile.txt 1000\nC:\\WINDOWS\\system32>fsutil file createnew C:\\testfile.txt 1000\n檔案 C:\\testfile.txt 已經建立\n```\n- 自行計算一下產生不同大小的檔案\n```\nfsutil file createnew C:\\1kb.txt 1000 //產生1kb檔案至指定位置\nfsutil file createnew large_10m.txt 10485760   //10*1024*1024\nfsutil file createnew large_500m.txt 524288000   //500*1024*1024\nfsutil file createnew large_1g.txt 1073741824  //1*1024*1024*1024\n```\n\n---\n\n### Mac 環境\n在Ｍac環境使用更方便，不需計算大小，使用內建的 mkfile 指令就可以輕鬆建立了：\n- mkfile -n size[b|k|m|g] filename\n```\nmkfile -n 20m 20mb.txt\n```\n\n---\n\n### 網路參考文章\n\n[Quickly Generate Large Test Files in Windows](https://tweaks.com/windows/62755/quickly-generate-large-test-files-in-windows/)\n[[Mac] 使用 mkfile 指令，快速建立測試用的大檔](https://ephrain.net/mac-%E4%BD%BF%E7%94%A8-mkfile-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%B8%AC%E8%A9%A6%E7%94%A8%E7%9A%84%E5%A4%A7%E6%AA%94/)\n","source":"_posts/fake-file.md","raw":"---\ntitle: \"[command]使用內建指令快速產生大黨\"\ntags:\n  - CLI\n  - file\n  - command\ncategories:\n  - [Tech., Mac]\n  - [Tech., Windows]\ndate: 2021-04-20 18:33:30\n---\n\n\n>開發時有時會需要測試大檔案的上傳，因此需要先準備大檔案，而系統內建就有一些指令可以快速產生虛胖的檔案． \n\n\n<!--more-->\n\n### windows環境\n\n>Fsutil 是用於執行與檔案配置表 (FAT) 和 NTFS 檔案系統相關的工作，例如管理重新剖析點、管理稀疏檔案或卸載磁片區。必須以系統管理員身分執行，才能使用 fsutil。\n\n更多功能請見[microsoft fsutil](https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/fsutil)\n\n#### fsutil file createnew 用法\n- fsutil file createnew 位置 <FileName.txt> <FileSize(size in bytes)>\n```\nC:\\WINDOWS\\system32> fsutil file createnew /?\n使用方法 : fsutil file createNew <filename> <length>\n   例如 : fsutil file createNew C:\\testfile.txt 1000\nC:\\WINDOWS\\system32>fsutil file createnew C:\\testfile.txt 1000\n檔案 C:\\testfile.txt 已經建立\n```\n- 自行計算一下產生不同大小的檔案\n```\nfsutil file createnew C:\\1kb.txt 1000 //產生1kb檔案至指定位置\nfsutil file createnew large_10m.txt 10485760   //10*1024*1024\nfsutil file createnew large_500m.txt 524288000   //500*1024*1024\nfsutil file createnew large_1g.txt 1073741824  //1*1024*1024*1024\n```\n\n---\n\n### Mac 環境\n在Ｍac環境使用更方便，不需計算大小，使用內建的 mkfile 指令就可以輕鬆建立了：\n- mkfile -n size[b|k|m|g] filename\n```\nmkfile -n 20m 20mb.txt\n```\n\n---\n\n### 網路參考文章\n\n[Quickly Generate Large Test Files in Windows](https://tweaks.com/windows/62755/quickly-generate-large-test-files-in-windows/)\n[[Mac] 使用 mkfile 指令，快速建立測試用的大檔](https://ephrain.net/mac-%E4%BD%BF%E7%94%A8-mkfile-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%B8%AC%E8%A9%A6%E7%94%A8%E7%9A%84%E5%A4%A7%E6%AA%94/)\n","slug":"fake-file","published":1,"updated":"2023-01-22T07:03:26.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb3001skp2x0ght1n4v","content":"<blockquote>\n<p>開發時有時會需要測試大檔案的上傳，因此需要先準備大檔案，而系統內建就有一些指令可以快速產生虛胖的檔案． </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"windows環境\"><a href=\"#windows環境\" class=\"headerlink\" title=\"windows環境\"></a>windows環境</h3><blockquote>\n<p>Fsutil 是用於執行與檔案配置表 (FAT) 和 NTFS 檔案系統相關的工作，例如管理重新剖析點、管理稀疏檔案或卸載磁片區。必須以系統管理員身分執行，才能使用 fsutil。</p>\n</blockquote>\n<p>更多功能請見<a href=\"https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/fsutil\">microsoft fsutil</a></p>\n<h4 id=\"fsutil-file-createnew-用法\"><a href=\"#fsutil-file-createnew-用法\" class=\"headerlink\" title=\"fsutil file createnew 用法\"></a>fsutil file createnew 用法</h4><ul>\n<li>fsutil file createnew 位置 &lt;FileName.txt&gt; &lt;FileSize(size in bytes)&gt;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt; fsutil file createnew &#x2F;?</span><br><span class=\"line\">使用方法 : fsutil file createNew &lt;filename&gt; &lt;length&gt;</span><br><span class=\"line\">   例如 : fsutil file createNew C:\\testfile.txt 1000</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;fsutil file createnew C:\\testfile.txt 1000</span><br><span class=\"line\">檔案 C:\\testfile.txt 已經建立</span><br></pre></td></tr></table></figure></li>\n<li>自行計算一下產生不同大小的檔案<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fsutil file createnew C:\\1kb.txt 1000 &#x2F;&#x2F;產生1kb檔案至指定位置</span><br><span class=\"line\">fsutil file createnew large_10m.txt 10485760   &#x2F;&#x2F;10*1024*1024</span><br><span class=\"line\">fsutil file createnew large_500m.txt 524288000   &#x2F;&#x2F;500*1024*1024</span><br><span class=\"line\">fsutil file createnew large_1g.txt 1073741824  &#x2F;&#x2F;1*1024*1024*1024</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"Mac-環境\"><a href=\"#Mac-環境\" class=\"headerlink\" title=\"Mac 環境\"></a>Mac 環境</h3><p>在Ｍac環境使用更方便，不需計算大小，使用內建的 mkfile 指令就可以輕鬆建立了：</p>\n<ul>\n<li>mkfile -n size[b|k|m|g] filename<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfile -n 20m 20mb.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><p><a href=\"https://tweaks.com/windows/62755/quickly-generate-large-test-files-in-windows/\">Quickly Generate Large Test Files in Windows</a><br><a href=\"https://ephrain.net/mac-%E4%BD%BF%E7%94%A8-mkfile-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%B8%AC%E8%A9%A6%E7%94%A8%E7%9A%84%E5%A4%A7%E6%AA%94/\">[Mac] 使用 mkfile 指令，快速建立測試用的大檔</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>開發時有時會需要測試大檔案的上傳，因此需要先準備大檔案，而系統內建就有一些指令可以快速產生虛胖的檔案． </p>\n</blockquote>","more":"<h3 id=\"windows環境\"><a href=\"#windows環境\" class=\"headerlink\" title=\"windows環境\"></a>windows環境</h3><blockquote>\n<p>Fsutil 是用於執行與檔案配置表 (FAT) 和 NTFS 檔案系統相關的工作，例如管理重新剖析點、管理稀疏檔案或卸載磁片區。必須以系統管理員身分執行，才能使用 fsutil。</p>\n</blockquote>\n<p>更多功能請見<a href=\"https://docs.microsoft.com/zh-tw/windows-server/administration/windows-commands/fsutil\">microsoft fsutil</a></p>\n<h4 id=\"fsutil-file-createnew-用法\"><a href=\"#fsutil-file-createnew-用法\" class=\"headerlink\" title=\"fsutil file createnew 用法\"></a>fsutil file createnew 用法</h4><ul>\n<li>fsutil file createnew 位置 &lt;FileName.txt&gt; &lt;FileSize(size in bytes)&gt;<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">C:\\WINDOWS\\system32&gt; fsutil file createnew &#x2F;?</span><br><span class=\"line\">使用方法 : fsutil file createNew &lt;filename&gt; &lt;length&gt;</span><br><span class=\"line\">   例如 : fsutil file createNew C:\\testfile.txt 1000</span><br><span class=\"line\">C:\\WINDOWS\\system32&gt;fsutil file createnew C:\\testfile.txt 1000</span><br><span class=\"line\">檔案 C:\\testfile.txt 已經建立</span><br></pre></td></tr></table></figure></li>\n<li>自行計算一下產生不同大小的檔案<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fsutil file createnew C:\\1kb.txt 1000 &#x2F;&#x2F;產生1kb檔案至指定位置</span><br><span class=\"line\">fsutil file createnew large_10m.txt 10485760   &#x2F;&#x2F;10*1024*1024</span><br><span class=\"line\">fsutil file createnew large_500m.txt 524288000   &#x2F;&#x2F;500*1024*1024</span><br><span class=\"line\">fsutil file createnew large_1g.txt 1073741824  &#x2F;&#x2F;1*1024*1024*1024</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"Mac-環境\"><a href=\"#Mac-環境\" class=\"headerlink\" title=\"Mac 環境\"></a>Mac 環境</h3><p>在Ｍac環境使用更方便，不需計算大小，使用內建的 mkfile 指令就可以輕鬆建立了：</p>\n<ul>\n<li>mkfile -n size[b|k|m|g] filename<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfile -n 20m 20mb.txt</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><p><a href=\"https://tweaks.com/windows/62755/quickly-generate-large-test-files-in-windows/\">Quickly Generate Large Test Files in Windows</a><br><a href=\"https://ephrain.net/mac-%E4%BD%BF%E7%94%A8-mkfile-%E6%8C%87%E4%BB%A4%EF%BC%8C%E5%BF%AB%E9%80%9F%E5%BB%BA%E7%AB%8B%E6%B8%AC%E8%A9%A6%E7%94%A8%E7%9A%84%E5%A4%A7%E6%AA%94/\">[Mac] 使用 mkfile 指令，快速建立測試用的大檔</a></p>"},{"title":"GitHub 建立首頁個人頁面介紹","date":"2021-01-11T09:10:07.000Z","_content":"\n>GitHub創立完帳號之後 其實可以產生profile 個人頁面，就可以在自己的首頁加上更多介紹！ \n\n如何建立自己的 GitHub 個人頁面：\n\n1. 建立帳號同名 Repository\n2. 修改 README.md\n3. 完成! 到首頁看看效果 看看我的效果＝>https://github.com/minilabmemo\n\n網路上還有更多很酷的個人介面介紹與產生器，可以參考以下文章: \n\n- [如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀](https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1)\n- [profile Generator](https://rahuldkjain.github.io/gh-profile-readme-generator/)\n這工具幫你產出介紹還有技能樹圖示!!!\n","source":"_posts/github-profile-page.md","raw":"---\ntitle: \"GitHub 建立首頁個人頁面介紹\"\ndate: 2021-01-11 17:10:07\ntags:\n  - GitHub\ncategories:\n  - Tech.\n  - GitHub\n\n---\n\n>GitHub創立完帳號之後 其實可以產生profile 個人頁面，就可以在自己的首頁加上更多介紹！ \n\n如何建立自己的 GitHub 個人頁面：\n\n1. 建立帳號同名 Repository\n2. 修改 README.md\n3. 完成! 到首頁看看效果 看看我的效果＝>https://github.com/minilabmemo\n\n網路上還有更多很酷的個人介面介紹與產生器，可以參考以下文章: \n\n- [如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀](https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1)\n- [profile Generator](https://rahuldkjain.github.io/gh-profile-readme-generator/)\n這工具幫你產出介紹還有技能樹圖示!!!\n","slug":"github-profile-page","published":1,"updated":"2023-01-22T07:03:26.168Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb4001vkp2xdeec9zot","content":"<blockquote>\n<p>GitHub創立完帳號之後 其實可以產生profile 個人頁面，就可以在自己的首頁加上更多介紹！ </p>\n</blockquote>\n<p>如何建立自己的 GitHub 個人頁面：</p>\n<ol>\n<li>建立帳號同名 Repository</li>\n<li>修改 README.md</li>\n<li>完成! 到首頁看看效果 看看我的效果＝&gt;<a href=\"https://github.com/minilabmemo\">https://github.com/minilabmemo</a></li>\n</ol>\n<p>網路上還有更多很酷的個人介面介紹與產生器，可以參考以下文章: </p>\n<ul>\n<li><a href=\"https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1\">如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀</a></li>\n<li><a href=\"https://rahuldkjain.github.io/gh-profile-readme-generator/\">profile Generator</a><br>這工具幫你產出介紹還有技能樹圖示!!!</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>GitHub創立完帳號之後 其實可以產生profile 個人頁面，就可以在自己的首頁加上更多介紹！ </p>\n</blockquote>\n<p>如何建立自己的 GitHub 個人頁面：</p>\n<ol>\n<li>建立帳號同名 Repository</li>\n<li>修改 README.md</li>\n<li>完成! 到首頁看看效果 看看我的效果＝&gt;<a href=\"https://github.com/minilabmemo\">https://github.com/minilabmemo</a></li>\n</ol>\n<p>網路上還有更多很酷的個人介面介紹與產生器，可以參考以下文章: </p>\n<ul>\n<li><a href=\"https://medium.com/starbugs/%E5%A6%82%E4%BD%95%E5%BB%BA%E7%AB%8B%E7%8D%A8%E4%B8%80%E7%84%A1%E4%BA%8C%E7%9A%84-github-profile-%E8%88%87%E4%B8%89%E5%80%8B%E5%BE%88%E9%85%B7%E7%9A%84%E8%A8%AD%E8%A8%88%E5%8F%8A%E6%87%89%E7%94%A8-ef1cbb4b42c1\">如何建立獨一無二的 GitHub Profile！與三個很酷的設計及應用 🚀</a></li>\n<li><a href=\"https://rahuldkjain.github.io/gh-profile-readme-generator/\">profile Generator</a><br>這工具幫你產出介紹還有技能樹圖示!!!</li>\n</ul>\n"},{"title":"[deploy]將網頁程式部署到heroku運行","date":"2020-09-18T02:46:22.000Z","_content":"\n <blockquote class=\"blockquote-center\">\nHeroku是一個支援多種程式語言的雲平台即服務，免費版提供每個月平台550小時時間，但每 30 分鐘未使用都會休眠一次，需等待他從休眠時間中甦醒，時間大約 30 秒左右．</blockquote>\n\n<!--more-->\n\n## 註冊 heroku\n\n- 先上官網註冊一個帳號\n\n## 安裝 heroku CLI\n\n參考：https://devcenter.heroku.com/articles/heroku-cli#download-and-install\n\n- 安裝\n\n```\n  ➜  testmemooo git:(master) heroku version\n ›   Warning: heroku update available from 7.40.0 to 7.43.0.\nheroku/7.40.0 darwin-x64 node-v12.16.2\n➜  testmemooo git:(master) npm install -g heroku\n/usr/local/bin/heroku -> /usr/local/lib/node_modules/heroku/bin/run\n+ heroku@7.43.0\nadded 788 packages from 316 contributors in 54.332s\n➜  testmemooo git:(master) heroku version\nheroku/7.43.0 darwin-x64 node-v10.16.3\n```\n\n- 登入\n  heroku login\n\n- 查看每個月使用多少時間\n\nAccount Setting->Billing-> Free Dyno Usage\n\n### 部署 React\n\n#### 方式一：兩分鐘 0 配置快速部署\n\n- 官方已先配置好並照說明指令輸入即可\n  [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration)\n\n```\nnpm install -g create-react-app\ncreate-react-app '自命名專案'\ncd '自命名專案'\ngit init\nheroku create -b https://github.com/mars/create-react-app-buildpack.git\ngit add .\ngit commit -m \"react-create-app on Heroku\"\ngit push heroku master\nheroku open\n```\n\n其中中間那一句 heroku create 會在剛剛的網站上新增一個 damp-stream-02723 專案\n最後一句是開啟網站：\nhttps://damp-stream-02723.herokuapp.com/\n這樣就看到網站了，命名應該是隨機的，但實際測試可以透過以下方式改名\n\n- 更換專案名稱\n  登入該網站後直接在專案上改名字\n  之後要回到專案上改 git 上傳的位置\n  [update git remote](https://devcenter.heroku.com/articles/renaming-apps#updating-git-remotes)\n\n```\n使用指令git remote rm heroku刪除舊有的 remote ‘heroku’\n➜  demomemooo git:(master) git remote rm heroku\n\n使用heroku指令綁定heroku git:remote -a newname\n\n➜  demomemooo git:(master) heroku git:remote -a demomemooo\n ›   Error: Couldn't find that app.\n ›   Error ID: not_found\n這邊會失敗是因為當時還沒有在網站上更名\n➜  demomemooo git:(master) heroku git:remote -a demomemooo\nset git remote heroku to https://git.heroku.com/demomemooo.git\n```\n\nhttps://demomemooo.herokuapp.com/\n\n小提醒：之後如果要更新記得先在本地起看看，並且照一般在 vscode 操作 git 上傳即可．\n\n部署設定：\n- 保護源代碼\n設定GENERATE_SOURCEMAP環境變數可以使得源代碼不會出現在dev tool中顯示\nadd into package.json:\n```\n\"scripts\": {    \n    \"start\": \"react-scripts start\",\n    \"build\": \"GENERATE_SOURCEMAP=false react-scripts build\",\n}\n```\n\n## 現有專案上傳\n\n```\ncd '現有專案'\nheroku create -b https://github.com/mars/create-react-app-buildpack.git\n專案內容看不到有什麼變化＠＠ 但本地專案會多連接一個heroku遠端git連結\n遠端heroku網站上一樣會多一個隨機命名的專案被建立．\ngit push heroku master\n上傳，會直接執行build/deploy，等待它完就可以了．\nheroku open\n```\n\n#### 方法二 自行建立設定\n\n- 先建立 React 命名 testdemooo\n\n```\ncreate-react-app testdemooo\n```\n\n- 進入後 按 New->Create New App 輸入命名新增一個專案\n  (ex testdemooo)\n\n- 產生完會有部署指令，照做即可\n\n```\n新的 Git repository 需做\n\n$ cd my-project/\n$ git init\n$ heroku git:remote -a testmemooo\n\n\n針對已存在Git repository，簡單新增“ heroku remote\n\n$ heroku git:remote -a testmemooo\n```\n\n- 但這樣做打開網站會錯誤，以下面文章的最佳解答照做即可\n  [React 專案佈署 heroku 問題](https://ithelp.ithome.com.tw/questions/10198600)\n  大致上做法是自行建立 server.js 與產生 build，只需要推 build 檔案上去即可（記得 gitignor 要拿掉 build folder）\n  \n\n\n\n>note class_name %} ## 網路參考文章 \n\n- [Deploying create-react-app project isn't uglifying my code](https://stackoverflow.com/questions/58359500/deploying-create-react-app-project-isnt-uglifying-my-code)\n- [React Create Script 2.0 減少維護環境配置](https://linyencheng.github.io/2019/02/27/react-create-script-2/)","source":"_posts/heroku-deploy.md","raw":"---\ntitle: '[deploy]將網頁程式部署到heroku運行'\ntags:\n  - heroku\n  - deploy\n  - GUI\n\ncategories:\n  - Tech.\n  - deploy\n  - heroku\ndate: 2020-09-18 10:46:22\n---\n\n <blockquote class=\"blockquote-center\">\nHeroku是一個支援多種程式語言的雲平台即服務，免費版提供每個月平台550小時時間，但每 30 分鐘未使用都會休眠一次，需等待他從休眠時間中甦醒，時間大約 30 秒左右．</blockquote>\n\n<!--more-->\n\n## 註冊 heroku\n\n- 先上官網註冊一個帳號\n\n## 安裝 heroku CLI\n\n參考：https://devcenter.heroku.com/articles/heroku-cli#download-and-install\n\n- 安裝\n\n```\n  ➜  testmemooo git:(master) heroku version\n ›   Warning: heroku update available from 7.40.0 to 7.43.0.\nheroku/7.40.0 darwin-x64 node-v12.16.2\n➜  testmemooo git:(master) npm install -g heroku\n/usr/local/bin/heroku -> /usr/local/lib/node_modules/heroku/bin/run\n+ heroku@7.43.0\nadded 788 packages from 316 contributors in 54.332s\n➜  testmemooo git:(master) heroku version\nheroku/7.43.0 darwin-x64 node-v10.16.3\n```\n\n- 登入\n  heroku login\n\n- 查看每個月使用多少時間\n\nAccount Setting->Billing-> Free Dyno Usage\n\n### 部署 React\n\n#### 方式一：兩分鐘 0 配置快速部署\n\n- 官方已先配置好並照說明指令輸入即可\n  [Deploying React with Zero Configuration](https://blog.heroku.com/deploying-react-with-zero-configuration)\n\n```\nnpm install -g create-react-app\ncreate-react-app '自命名專案'\ncd '自命名專案'\ngit init\nheroku create -b https://github.com/mars/create-react-app-buildpack.git\ngit add .\ngit commit -m \"react-create-app on Heroku\"\ngit push heroku master\nheroku open\n```\n\n其中中間那一句 heroku create 會在剛剛的網站上新增一個 damp-stream-02723 專案\n最後一句是開啟網站：\nhttps://damp-stream-02723.herokuapp.com/\n這樣就看到網站了，命名應該是隨機的，但實際測試可以透過以下方式改名\n\n- 更換專案名稱\n  登入該網站後直接在專案上改名字\n  之後要回到專案上改 git 上傳的位置\n  [update git remote](https://devcenter.heroku.com/articles/renaming-apps#updating-git-remotes)\n\n```\n使用指令git remote rm heroku刪除舊有的 remote ‘heroku’\n➜  demomemooo git:(master) git remote rm heroku\n\n使用heroku指令綁定heroku git:remote -a newname\n\n➜  demomemooo git:(master) heroku git:remote -a demomemooo\n ›   Error: Couldn't find that app.\n ›   Error ID: not_found\n這邊會失敗是因為當時還沒有在網站上更名\n➜  demomemooo git:(master) heroku git:remote -a demomemooo\nset git remote heroku to https://git.heroku.com/demomemooo.git\n```\n\nhttps://demomemooo.herokuapp.com/\n\n小提醒：之後如果要更新記得先在本地起看看，並且照一般在 vscode 操作 git 上傳即可．\n\n部署設定：\n- 保護源代碼\n設定GENERATE_SOURCEMAP環境變數可以使得源代碼不會出現在dev tool中顯示\nadd into package.json:\n```\n\"scripts\": {    \n    \"start\": \"react-scripts start\",\n    \"build\": \"GENERATE_SOURCEMAP=false react-scripts build\",\n}\n```\n\n## 現有專案上傳\n\n```\ncd '現有專案'\nheroku create -b https://github.com/mars/create-react-app-buildpack.git\n專案內容看不到有什麼變化＠＠ 但本地專案會多連接一個heroku遠端git連結\n遠端heroku網站上一樣會多一個隨機命名的專案被建立．\ngit push heroku master\n上傳，會直接執行build/deploy，等待它完就可以了．\nheroku open\n```\n\n#### 方法二 自行建立設定\n\n- 先建立 React 命名 testdemooo\n\n```\ncreate-react-app testdemooo\n```\n\n- 進入後 按 New->Create New App 輸入命名新增一個專案\n  (ex testdemooo)\n\n- 產生完會有部署指令，照做即可\n\n```\n新的 Git repository 需做\n\n$ cd my-project/\n$ git init\n$ heroku git:remote -a testmemooo\n\n\n針對已存在Git repository，簡單新增“ heroku remote\n\n$ heroku git:remote -a testmemooo\n```\n\n- 但這樣做打開網站會錯誤，以下面文章的最佳解答照做即可\n  [React 專案佈署 heroku 問題](https://ithelp.ithome.com.tw/questions/10198600)\n  大致上做法是自行建立 server.js 與產生 build，只需要推 build 檔案上去即可（記得 gitignor 要拿掉 build folder）\n  \n\n\n\n>note class_name %} ## 網路參考文章 \n\n- [Deploying create-react-app project isn't uglifying my code](https://stackoverflow.com/questions/58359500/deploying-create-react-app-project-isnt-uglifying-my-code)\n- [React Create Script 2.0 減少維護環境配置](https://linyencheng.github.io/2019/02/27/react-create-script-2/)","slug":"heroku-deploy","published":1,"updated":"2023-01-22T07:05:18.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb5001ykp2xdinc0q58","content":" <blockquote class=\"blockquote-center\">\nHeroku是一個支援多種程式語言的雲平台即服務，免費版提供每個月平台550小時時間，但每 30 分鐘未使用都會休眠一次，需等待他從休眠時間中甦醒，時間大約 30 秒左右．</blockquote>\n\n<a id=\"more\"></a>\n\n<h2 id=\"註冊-heroku\"><a href=\"#註冊-heroku\" class=\"headerlink\" title=\"註冊 heroku\"></a>註冊 heroku</h2><ul>\n<li>先上官網註冊一個帳號</li>\n</ul>\n<h2 id=\"安裝-heroku-CLI\"><a href=\"#安裝-heroku-CLI\" class=\"headerlink\" title=\"安裝 heroku CLI\"></a>安裝 heroku CLI</h2><p>參考：<a href=\"https://devcenter.heroku.com/articles/heroku-cli#download-and-install\">https://devcenter.heroku.com/articles/heroku-cli#download-and-install</a></p>\n<ul>\n<li>安裝</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ➜  testmemooo git:(master) heroku version</span><br><span class=\"line\"> ›   Warning: heroku update available from 7.40.0 to 7.43.0.</span><br><span class=\"line\">heroku&#x2F;7.40.0 darwin-x64 node-v12.16.2</span><br><span class=\"line\">➜  testmemooo git:(master) npm install -g heroku</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;heroku -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;heroku&#x2F;bin&#x2F;run</span><br><span class=\"line\">+ heroku@7.43.0</span><br><span class=\"line\">added 788 packages from 316 contributors in 54.332s</span><br><span class=\"line\">➜  testmemooo git:(master) heroku version</span><br><span class=\"line\">heroku&#x2F;7.43.0 darwin-x64 node-v10.16.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>登入<br>heroku login</p>\n</li>\n<li><p>查看每個月使用多少時間</p>\n</li>\n</ul>\n<p>Account Setting-&gt;Billing-&gt; Free Dyno Usage</p>\n<h3 id=\"部署-React\"><a href=\"#部署-React\" class=\"headerlink\" title=\"部署 React\"></a>部署 React</h3><h4 id=\"方式一：兩分鐘-0-配置快速部署\"><a href=\"#方式一：兩分鐘-0-配置快速部署\" class=\"headerlink\" title=\"方式一：兩分鐘 0 配置快速部署\"></a>方式一：兩分鐘 0 配置快速部署</h4><ul>\n<li>官方已先配置好並照說明指令輸入即可<br><a href=\"https://blog.heroku.com/deploying-react-with-zero-configuration\">Deploying React with Zero Configuration</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\">create-react-app &#39;自命名專案&#39;</span><br><span class=\"line\">cd &#39;自命名專案&#39;</span><br><span class=\"line\">git init</span><br><span class=\"line\">heroku create -b https:&#x2F;&#x2F;github.com&#x2F;mars&#x2F;create-react-app-buildpack.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;react-create-app on Heroku&quot;</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n<p>其中中間那一句 heroku create 會在剛剛的網站上新增一個 damp-stream-02723 專案<br>最後一句是開啟網站：<br><a href=\"https://damp-stream-02723.herokuapp.com/\">https://damp-stream-02723.herokuapp.com/</a><br>這樣就看到網站了，命名應該是隨機的，但實際測試可以透過以下方式改名</p>\n<ul>\n<li>更換專案名稱<br>登入該網站後直接在專案上改名字<br>之後要回到專案上改 git 上傳的位置<br><a href=\"https://devcenter.heroku.com/articles/renaming-apps#updating-git-remotes\">update git remote</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指令git remote rm heroku刪除舊有的 remote ‘heroku’</span><br><span class=\"line\">➜  demomemooo git:(master) git remote rm heroku</span><br><span class=\"line\"></span><br><span class=\"line\">使用heroku指令綁定heroku git:remote -a newname</span><br><span class=\"line\"></span><br><span class=\"line\">➜  demomemooo git:(master) heroku git:remote -a demomemooo</span><br><span class=\"line\"> ›   Error: Couldn&#39;t find that app.</span><br><span class=\"line\"> ›   Error ID: not_found</span><br><span class=\"line\">這邊會失敗是因為當時還沒有在網站上更名</span><br><span class=\"line\">➜  demomemooo git:(master) heroku git:remote -a demomemooo</span><br><span class=\"line\">set git remote heroku to https:&#x2F;&#x2F;git.heroku.com&#x2F;demomemooo.git</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://demomemooo.herokuapp.com/\">https://demomemooo.herokuapp.com/</a></p>\n<p>小提醒：之後如果要更新記得先在本地起看看，並且照一般在 vscode 操作 git 上傳即可．</p>\n<p>部署設定：</p>\n<ul>\n<li>保護源代碼<br>設定GENERATE_SOURCEMAP環境變數可以使得源代碼不會出現在dev tool中顯示<br>add into package.json:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;    </span><br><span class=\"line\">    &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;GENERATE_SOURCEMAP&#x3D;false react-scripts build&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"現有專案上傳\"><a href=\"#現有專案上傳\" class=\"headerlink\" title=\"現有專案上傳\"></a>現有專案上傳</h2></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#39;現有專案&#39;</span><br><span class=\"line\">heroku create -b https:&#x2F;&#x2F;github.com&#x2F;mars&#x2F;create-react-app-buildpack.git</span><br><span class=\"line\">專案內容看不到有什麼變化＠＠ 但本地專案會多連接一個heroku遠端git連結</span><br><span class=\"line\">遠端heroku網站上一樣會多一個隨機命名的專案被建立．</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">上傳，會直接執行build&#x2F;deploy，等待它完就可以了．</span><br><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-自行建立設定\"><a href=\"#方法二-自行建立設定\" class=\"headerlink\" title=\"方法二 自行建立設定\"></a>方法二 自行建立設定</h4><ul>\n<li>先建立 React 命名 testdemooo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app testdemooo</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>進入後 按 New-&gt;Create New App 輸入命名新增一個專案<br>(ex testdemooo)</p>\n</li>\n<li><p>產生完會有部署指令，照做即可</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的 Git repository 需做</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd my-project&#x2F;</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ heroku git:remote -a testmemooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">針對已存在Git repository，簡單新增“ heroku remote</span><br><span class=\"line\"></span><br><span class=\"line\">$ heroku git:remote -a testmemooo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但這樣做打開網站會錯誤，以下面文章的最佳解答照做即可<br><a href=\"https://ithelp.ithome.com.tw/questions/10198600\">React 專案佈署 heroku 問題</a><br>大致上做法是自行建立 server.js 與產生 build，只需要推 build 檔案上去即可（記得 gitignor 要拿掉 build folder）</li>\n</ul>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/58359500/deploying-create-react-app-project-isnt-uglifying-my-code\">Deploying create-react-app project isn’t uglifying my code</a></li>\n<li><a href=\"https://linyencheng.github.io/2019/02/27/react-create-script-2/\">React Create Script 2.0 減少維護環境配置</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote class=\"blockquote-center\">\nHeroku是一個支援多種程式語言的雲平台即服務，免費版提供每個月平台550小時時間，但每 30 分鐘未使用都會休眠一次，需等待他從休眠時間中甦醒，時間大約 30 秒左右．</blockquote>","more":"<h2 id=\"註冊-heroku\"><a href=\"#註冊-heroku\" class=\"headerlink\" title=\"註冊 heroku\"></a>註冊 heroku</h2><ul>\n<li>先上官網註冊一個帳號</li>\n</ul>\n<h2 id=\"安裝-heroku-CLI\"><a href=\"#安裝-heroku-CLI\" class=\"headerlink\" title=\"安裝 heroku CLI\"></a>安裝 heroku CLI</h2><p>參考：<a href=\"https://devcenter.heroku.com/articles/heroku-cli#download-and-install\">https://devcenter.heroku.com/articles/heroku-cli#download-and-install</a></p>\n<ul>\n<li>安裝</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  ➜  testmemooo git:(master) heroku version</span><br><span class=\"line\"> ›   Warning: heroku update available from 7.40.0 to 7.43.0.</span><br><span class=\"line\">heroku&#x2F;7.40.0 darwin-x64 node-v12.16.2</span><br><span class=\"line\">➜  testmemooo git:(master) npm install -g heroku</span><br><span class=\"line\">&#x2F;usr&#x2F;local&#x2F;bin&#x2F;heroku -&gt; &#x2F;usr&#x2F;local&#x2F;lib&#x2F;node_modules&#x2F;heroku&#x2F;bin&#x2F;run</span><br><span class=\"line\">+ heroku@7.43.0</span><br><span class=\"line\">added 788 packages from 316 contributors in 54.332s</span><br><span class=\"line\">➜  testmemooo git:(master) heroku version</span><br><span class=\"line\">heroku&#x2F;7.43.0 darwin-x64 node-v10.16.3</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>登入<br>heroku login</p>\n</li>\n<li><p>查看每個月使用多少時間</p>\n</li>\n</ul>\n<p>Account Setting-&gt;Billing-&gt; Free Dyno Usage</p>\n<h3 id=\"部署-React\"><a href=\"#部署-React\" class=\"headerlink\" title=\"部署 React\"></a>部署 React</h3><h4 id=\"方式一：兩分鐘-0-配置快速部署\"><a href=\"#方式一：兩分鐘-0-配置快速部署\" class=\"headerlink\" title=\"方式一：兩分鐘 0 配置快速部署\"></a>方式一：兩分鐘 0 配置快速部署</h4><ul>\n<li>官方已先配置好並照說明指令輸入即可<br><a href=\"https://blog.heroku.com/deploying-react-with-zero-configuration\">Deploying React with Zero Configuration</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\">create-react-app &#39;自命名專案&#39;</span><br><span class=\"line\">cd &#39;自命名專案&#39;</span><br><span class=\"line\">git init</span><br><span class=\"line\">heroku create -b https:&#x2F;&#x2F;github.com&#x2F;mars&#x2F;create-react-app-buildpack.git</span><br><span class=\"line\">git add .</span><br><span class=\"line\">git commit -m &quot;react-create-app on Heroku&quot;</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n<p>其中中間那一句 heroku create 會在剛剛的網站上新增一個 damp-stream-02723 專案<br>最後一句是開啟網站：<br><a href=\"https://damp-stream-02723.herokuapp.com/\">https://damp-stream-02723.herokuapp.com/</a><br>這樣就看到網站了，命名應該是隨機的，但實際測試可以透過以下方式改名</p>\n<ul>\n<li>更換專案名稱<br>登入該網站後直接在專案上改名字<br>之後要回到專案上改 git 上傳的位置<br><a href=\"https://devcenter.heroku.com/articles/renaming-apps#updating-git-remotes\">update git remote</a></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">使用指令git remote rm heroku刪除舊有的 remote ‘heroku’</span><br><span class=\"line\">➜  demomemooo git:(master) git remote rm heroku</span><br><span class=\"line\"></span><br><span class=\"line\">使用heroku指令綁定heroku git:remote -a newname</span><br><span class=\"line\"></span><br><span class=\"line\">➜  demomemooo git:(master) heroku git:remote -a demomemooo</span><br><span class=\"line\"> ›   Error: Couldn&#39;t find that app.</span><br><span class=\"line\"> ›   Error ID: not_found</span><br><span class=\"line\">這邊會失敗是因為當時還沒有在網站上更名</span><br><span class=\"line\">➜  demomemooo git:(master) heroku git:remote -a demomemooo</span><br><span class=\"line\">set git remote heroku to https:&#x2F;&#x2F;git.heroku.com&#x2F;demomemooo.git</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://demomemooo.herokuapp.com/\">https://demomemooo.herokuapp.com/</a></p>\n<p>小提醒：之後如果要更新記得先在本地起看看，並且照一般在 vscode 操作 git 上傳即可．</p>\n<p>部署設定：</p>\n<ul>\n<li>保護源代碼<br>設定GENERATE_SOURCEMAP環境變數可以使得源代碼不會出現在dev tool中顯示<br>add into package.json:<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;    </span><br><span class=\"line\">    &quot;start&quot;: &quot;react-scripts start&quot;,</span><br><span class=\"line\">    &quot;build&quot;: &quot;GENERATE_SOURCEMAP&#x3D;false react-scripts build&quot;,</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"現有專案上傳\"><a href=\"#現有專案上傳\" class=\"headerlink\" title=\"現有專案上傳\"></a>現有專案上傳</h2></li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd &#39;現有專案&#39;</span><br><span class=\"line\">heroku create -b https:&#x2F;&#x2F;github.com&#x2F;mars&#x2F;create-react-app-buildpack.git</span><br><span class=\"line\">專案內容看不到有什麼變化＠＠ 但本地專案會多連接一個heroku遠端git連結</span><br><span class=\"line\">遠端heroku網站上一樣會多一個隨機命名的專案被建立．</span><br><span class=\"line\">git push heroku master</span><br><span class=\"line\">上傳，會直接執行build&#x2F;deploy，等待它完就可以了．</span><br><span class=\"line\">heroku open</span><br></pre></td></tr></table></figure>\n<h4 id=\"方法二-自行建立設定\"><a href=\"#方法二-自行建立設定\" class=\"headerlink\" title=\"方法二 自行建立設定\"></a>方法二 自行建立設定</h4><ul>\n<li>先建立 React 命名 testdemooo</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">create-react-app testdemooo</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>進入後 按 New-&gt;Create New App 輸入命名新增一個專案<br>(ex testdemooo)</p>\n</li>\n<li><p>產生完會有部署指令，照做即可</p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">新的 Git repository 需做</span><br><span class=\"line\"></span><br><span class=\"line\">$ cd my-project&#x2F;</span><br><span class=\"line\">$ git init</span><br><span class=\"line\">$ heroku git:remote -a testmemooo</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">針對已存在Git repository，簡單新增“ heroku remote</span><br><span class=\"line\"></span><br><span class=\"line\">$ heroku git:remote -a testmemooo</span><br></pre></td></tr></table></figure>\n<ul>\n<li>但這樣做打開網站會錯誤，以下面文章的最佳解答照做即可<br><a href=\"https://ithelp.ithome.com.tw/questions/10198600\">React 專案佈署 heroku 問題</a><br>大致上做法是自行建立 server.js 與產生 build，只需要推 build 檔案上去即可（記得 gitignor 要拿掉 build folder）</li>\n</ul>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/58359500/deploying-create-react-app-project-isnt-uglifying-my-code\">Deploying create-react-app project isn’t uglifying my code</a></li>\n<li><a href=\"https://linyencheng.github.io/2019/02/27/react-create-script-2/\">React Create Script 2.0 減少維護環境配置</a></li>\n</ul>"},{"title":"[JAVA]有關java之OutOfMemory檢測等相關問題文章整理","date":"2020-11-14T11:31:51.000Z","_content":"\n\n>note info %}有關java之OutOfMemory檢測等相關問題文章整理\n\n\n<!--more-->\n\n\n#### 關於JVM\n```\n-Xms = 初始值，預設是實體記憶體的1/64\n-Xmx = 最大值，預設是實體記憶體的1/4\n-Xmn = 最小值\n預設空餘堆記憶體小於40%時，JVM 就會增大堆直到-Xmx 的最大限制。\n```\n\n- [一图解千愁，jvm内存从来没有这么简单过！](https://juejin.im/post/5ed49e7c51882543012f9e6c \"一图解千愁，jvm内存从来没有这么简单过！\")\n- 該文建議使用操作系统的2/3作为堆空间，是比较合理的。这是一个经验值。比如6GB的内存，你分配给JVM的，最好不要超过4GB。\n- [淺談 JVM PermGen space 的解決方法](https://ithelp.ithome.com.tw/articles/10211000)\n\n#### 調整JVM\n可以透過以下的參數來修改它，不過應該不要刻意去加大給它的分配記憶體，因為遇到需要大量的請求不多，\n怕造成記憶體的浪費，應該是從程式面下手修正程式效能(又是一課題了Orz)。\n- 開發時 IDE 設定\n\n```\nIDE JAVA_OPTS=\"-Xmx900m -Xms900m\"\n\n```\n- 修改jvm.cfg\n[調整JVM虛擬機器記憶體大小](https://www.itread01.com/content/1546694105.html \"調整JVM虛擬機器記憶體大小\")\n- 執行jar包的時候參數調整\n```bash\njava -Xmx900m -Xms900m jar app.jar\n```\n\n\n- tomcat/Resin/weblogic 等設定\n[完美解決java.lang.OutOfMemoryError處理錯誤的問題](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/313033/ \"完美解決java.lang.OutOfMemoryError處理錯誤的問題\")\n\n#### 調整JVM參數說明\n- [深入理解JVM內幕之JVM簡單調優參數](https://kknews.cc/zh-tw/code/lxjr3bb.html \"深入理解JVM內幕之JVM簡單調優參數\")\n\t- Xmx和Xms設置一樣大，MaxPermSize和MinPermSize設置一樣大\n\n\n#### 關於OutOfMemoryError追查\n[專案出現記憶體溢位的原因及解決方案](https://www.itread01.com/content/1546849805.html \"專案出現記憶體溢位的原因及解決方案\")\n重點:\n1. 修改JVM啟動引數，直接增加記憶體。(-Xms，-Xmx引數一定不要忘記加。)\n2.檢查錯誤日誌，檢視“OutOfMemory”錯誤前是否有其它異常或錯誤。\n3.對程式碼進行走查和分析，找出可能發生記憶體溢位的位置。\n4.使用記憶體檢視工具動態檢視記憶體使用情況\n\t1. Eclipse開啟Show Heap Status\n\t1. IntelliJ IDEA 可開啟Memory Indicator & debugger Memory頁籤\n\t(可參考下方檢測工具@IDEA標題)\n\n\n------------\n#### 程式面與錯誤訊息範例\n\n-  關於集合物件未清除的範例\n[List、MAP等集合对象是否有使用完后,未清除造成内存溢出](https://bbs.csdn.net/topics/391865237 \"List、MAP等集合对象是否有使用完后,未清除造成内存溢出\")\n- Map &Java heap space 無限迴圈\n[Java記憶體溢位(OOM)異常排查指南](https://www.itread01.com/content/1548835928.html \"Java記憶體溢位(OOM)異常排查指南\")\n\t- 內含更多錯誤示例解說\nOutOfMemoryError: Java heap space\nOutOfMemoryError: GC overhead limit exceeded\nOutOfMemoryError:Permgen space\nOutOfMemoryError:Metaspace\nOutOfMemoryError:Unable to create new native thread\nOutOfMemoryError:Out of swap space?\nOutOfMemoryError:Requested array size exceeds VM limit\nOut of memory:Kill process or sacrifice child\n\n------------\n#### 檢測工具@IDEA\nIntelliJ IDEA 可開啟Memory Indicator & debugger Memory頁籤\n\t(可參考說明開啟:\n\t[show-heap-memory-size-in-intellij](https://stackoverflow.com/questions/36691118/is-it-possible-to-show-heap-memory-size-in-intellij-ide-android-studio \"show-heap-memory-size-in-intellij\")\n\t\t[Analyze objects in the JVM heap](https://www.jetbrains.com/help/idea/analyze-objects-in-the-jvm-heap.html \"Analyze objects in the JVM heap\"))\n\t\t\n- 關於IDEA如何设置JVM参数\n[IDEA如何设置JVM参数](https://blog.csdn.net/shuiCSDN/article/details/104144009 \"IDEA如何设置JVM参数\")\n[菜鸟学习IntelliJ IDEA之如何设置JVM运行参数](https://blog.csdn.net/Gaomb_1990/article/details/80645056 \"菜鸟学习IntelliJ IDEA之如何设置JVM运行参数\")\n\n-  關於IDEA debugger Memory頁籤\n用來查看目前堆中類的個數的情况，右邊的diff會顯示跳轉類的變化\n> 過去看來是透過plugin去安裝JVM Debugger Memory View，但我在plugin 已找不到這個，且官網支援的版本也沒有了，但在IEDA 2020.1 debugg時多出的Memory tab，似乎與這功能一模一樣。\n說明網站:\n[神兵利器－内存调试插件](https://www.jianshu.com/p/709fdc76d420 \"神兵利器－内存调试插件\")\n[IDEA中很有用的內存調試插件](https://kknews.cc/zh-hk/code/2q4qpvz.html \"IDEA中很有用的內存調試插件\")\n[使用多年的go pprof检查内存泄漏的方法居然是错的?!](https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/ \"使用多年的go pprof检查内存泄漏的方法居然是错的?!\")\n\n------------\n\n#### 使用jvm監控工具命令\n一般用於檢視服務執行時狀態的主要命令包括：jstat、jmap、top、jstack\n- 基本工具介紹 [Java內存泄露監控工具](https://kknews.cc/code/pl6kmv2.html \"Java內存泄露監控工具：JVM監控工具介紹  原文網址：https://kknews.cc/code/pl6kmv2.html\")","source":"_posts/java-jvm-memory.md","raw":"---\ntitle: \"[JAVA]有關java之OutOfMemory檢測等相關問題文章整理\"\ntags:\n  - java\n  - Memory\n  - IDEA\ncategories:\n  - Tech.\n  - back-end\n  - java\ndate: 2020-11-14 19:31:51\n---\n\n\n>note info %}有關java之OutOfMemory檢測等相關問題文章整理\n\n\n<!--more-->\n\n\n#### 關於JVM\n```\n-Xms = 初始值，預設是實體記憶體的1/64\n-Xmx = 最大值，預設是實體記憶體的1/4\n-Xmn = 最小值\n預設空餘堆記憶體小於40%時，JVM 就會增大堆直到-Xmx 的最大限制。\n```\n\n- [一图解千愁，jvm内存从来没有这么简单过！](https://juejin.im/post/5ed49e7c51882543012f9e6c \"一图解千愁，jvm内存从来没有这么简单过！\")\n- 該文建議使用操作系统的2/3作为堆空间，是比较合理的。这是一个经验值。比如6GB的内存，你分配给JVM的，最好不要超过4GB。\n- [淺談 JVM PermGen space 的解決方法](https://ithelp.ithome.com.tw/articles/10211000)\n\n#### 調整JVM\n可以透過以下的參數來修改它，不過應該不要刻意去加大給它的分配記憶體，因為遇到需要大量的請求不多，\n怕造成記憶體的浪費，應該是從程式面下手修正程式效能(又是一課題了Orz)。\n- 開發時 IDE 設定\n\n```\nIDE JAVA_OPTS=\"-Xmx900m -Xms900m\"\n\n```\n- 修改jvm.cfg\n[調整JVM虛擬機器記憶體大小](https://www.itread01.com/content/1546694105.html \"調整JVM虛擬機器記憶體大小\")\n- 執行jar包的時候參數調整\n```bash\njava -Xmx900m -Xms900m jar app.jar\n```\n\n\n- tomcat/Resin/weblogic 等設定\n[完美解決java.lang.OutOfMemoryError處理錯誤的問題](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/313033/ \"完美解決java.lang.OutOfMemoryError處理錯誤的問題\")\n\n#### 調整JVM參數說明\n- [深入理解JVM內幕之JVM簡單調優參數](https://kknews.cc/zh-tw/code/lxjr3bb.html \"深入理解JVM內幕之JVM簡單調優參數\")\n\t- Xmx和Xms設置一樣大，MaxPermSize和MinPermSize設置一樣大\n\n\n#### 關於OutOfMemoryError追查\n[專案出現記憶體溢位的原因及解決方案](https://www.itread01.com/content/1546849805.html \"專案出現記憶體溢位的原因及解決方案\")\n重點:\n1. 修改JVM啟動引數，直接增加記憶體。(-Xms，-Xmx引數一定不要忘記加。)\n2.檢查錯誤日誌，檢視“OutOfMemory”錯誤前是否有其它異常或錯誤。\n3.對程式碼進行走查和分析，找出可能發生記憶體溢位的位置。\n4.使用記憶體檢視工具動態檢視記憶體使用情況\n\t1. Eclipse開啟Show Heap Status\n\t1. IntelliJ IDEA 可開啟Memory Indicator & debugger Memory頁籤\n\t(可參考下方檢測工具@IDEA標題)\n\n\n------------\n#### 程式面與錯誤訊息範例\n\n-  關於集合物件未清除的範例\n[List、MAP等集合对象是否有使用完后,未清除造成内存溢出](https://bbs.csdn.net/topics/391865237 \"List、MAP等集合对象是否有使用完后,未清除造成内存溢出\")\n- Map &Java heap space 無限迴圈\n[Java記憶體溢位(OOM)異常排查指南](https://www.itread01.com/content/1548835928.html \"Java記憶體溢位(OOM)異常排查指南\")\n\t- 內含更多錯誤示例解說\nOutOfMemoryError: Java heap space\nOutOfMemoryError: GC overhead limit exceeded\nOutOfMemoryError:Permgen space\nOutOfMemoryError:Metaspace\nOutOfMemoryError:Unable to create new native thread\nOutOfMemoryError:Out of swap space?\nOutOfMemoryError:Requested array size exceeds VM limit\nOut of memory:Kill process or sacrifice child\n\n------------\n#### 檢測工具@IDEA\nIntelliJ IDEA 可開啟Memory Indicator & debugger Memory頁籤\n\t(可參考說明開啟:\n\t[show-heap-memory-size-in-intellij](https://stackoverflow.com/questions/36691118/is-it-possible-to-show-heap-memory-size-in-intellij-ide-android-studio \"show-heap-memory-size-in-intellij\")\n\t\t[Analyze objects in the JVM heap](https://www.jetbrains.com/help/idea/analyze-objects-in-the-jvm-heap.html \"Analyze objects in the JVM heap\"))\n\t\t\n- 關於IDEA如何设置JVM参数\n[IDEA如何设置JVM参数](https://blog.csdn.net/shuiCSDN/article/details/104144009 \"IDEA如何设置JVM参数\")\n[菜鸟学习IntelliJ IDEA之如何设置JVM运行参数](https://blog.csdn.net/Gaomb_1990/article/details/80645056 \"菜鸟学习IntelliJ IDEA之如何设置JVM运行参数\")\n\n-  關於IDEA debugger Memory頁籤\n用來查看目前堆中類的個數的情况，右邊的diff會顯示跳轉類的變化\n> 過去看來是透過plugin去安裝JVM Debugger Memory View，但我在plugin 已找不到這個，且官網支援的版本也沒有了，但在IEDA 2020.1 debugg時多出的Memory tab，似乎與這功能一模一樣。\n說明網站:\n[神兵利器－内存调试插件](https://www.jianshu.com/p/709fdc76d420 \"神兵利器－内存调试插件\")\n[IDEA中很有用的內存調試插件](https://kknews.cc/zh-hk/code/2q4qpvz.html \"IDEA中很有用的內存調試插件\")\n[使用多年的go pprof检查内存泄漏的方法居然是错的?!](https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/ \"使用多年的go pprof检查内存泄漏的方法居然是错的?!\")\n\n------------\n\n#### 使用jvm監控工具命令\n一般用於檢視服務執行時狀態的主要命令包括：jstat、jmap、top、jstack\n- 基本工具介紹 [Java內存泄露監控工具](https://kknews.cc/code/pl6kmv2.html \"Java內存泄露監控工具：JVM監控工具介紹  原文網址：https://kknews.cc/code/pl6kmv2.html\")","slug":"java-jvm-memory","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb60021kp2x182igmm6","content":"<blockquote>\n<p>note info %}有關java之OutOfMemory檢測等相關問題文章整理</p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h4 id=\"關於JVM\"><a href=\"#關於JVM\" class=\"headerlink\" title=\"關於JVM\"></a>關於JVM</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms &#x3D; 初始值，預設是實體記憶體的1&#x2F;64</span><br><span class=\"line\">-Xmx &#x3D; 最大值，預設是實體記憶體的1&#x2F;4</span><br><span class=\"line\">-Xmn &#x3D; 最小值</span><br><span class=\"line\">預設空餘堆記憶體小於40%時，JVM 就會增大堆直到-Xmx 的最大限制。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://juejin.im/post/5ed49e7c51882543012f9e6c\" title=\"一图解千愁，jvm内存从来没有这么简单过！\">一图解千愁，jvm内存从来没有这么简单过！</a></li>\n<li>該文建議使用操作系统的2/3作为堆空间，是比较合理的。这是一个经验值。比如6GB的内存，你分配给JVM的，最好不要超过4GB。</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10211000\">淺談 JVM PermGen space 的解決方法</a></li>\n</ul>\n<h4 id=\"調整JVM\"><a href=\"#調整JVM\" class=\"headerlink\" title=\"調整JVM\"></a>調整JVM</h4><p>可以透過以下的參數來修改它，不過應該不要刻意去加大給它的分配記憶體，因為遇到需要大量的請求不多，<br>怕造成記憶體的浪費，應該是從程式面下手修正程式效能(又是一課題了Orz)。</p>\n<ul>\n<li>開發時 IDE 設定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDE JAVA_OPTS&#x3D;&quot;-Xmx900m -Xms900m&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>修改jvm.cfg<br><a href=\"https://www.itread01.com/content/1546694105.html\" title=\"調整JVM虛擬機器記憶體大小\">調整JVM虛擬機器記憶體大小</a></p>\n</li>\n<li><p>執行jar包的時候參數調整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xmx900m -Xms900m jar app.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tomcat/Resin/weblogic 等設定<br><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/313033/\" title=\"完美解決java.lang.OutOfMemoryError處理錯誤的問題\">完美解決java.lang.OutOfMemoryError處理錯誤的問題</a></p>\n</li>\n</ul>\n<h4 id=\"調整JVM參數說明\"><a href=\"#調整JVM參數說明\" class=\"headerlink\" title=\"調整JVM參數說明\"></a>調整JVM參數說明</h4><ul>\n<li><a href=\"https://kknews.cc/zh-tw/code/lxjr3bb.html\" title=\"深入理解JVM內幕之JVM簡單調優參數\">深入理解JVM內幕之JVM簡單調優參數</a><ul>\n<li>Xmx和Xms設置一樣大，MaxPermSize和MinPermSize設置一樣大</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"關於OutOfMemoryError追查\"><a href=\"#關於OutOfMemoryError追查\" class=\"headerlink\" title=\"關於OutOfMemoryError追查\"></a>關於OutOfMemoryError追查</h4><p><a href=\"https://www.itread01.com/content/1546849805.html\" title=\"專案出現記憶體溢位的原因及解決方案\">專案出現記憶體溢位的原因及解決方案</a><br>重點:</p>\n<ol>\n<li>修改JVM啟動引數，直接增加記憶體。(-Xms，-Xmx引數一定不要忘記加。)</li>\n<li>檢查錯誤日誌，檢視“OutOfMemory”錯誤前是否有其它異常或錯誤。</li>\n<li>對程式碼進行走查和分析，找出可能發生記憶體溢位的位置。</li>\n<li>使用記憶體檢視工具動態檢視記憶體使用情況<ol>\n<li>Eclipse開啟Show Heap Status</li>\n<li>IntelliJ IDEA 可開啟Memory Indicator &amp; debugger Memory頁籤<br>(可參考下方檢測工具@IDEA標題)</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"程式面與錯誤訊息範例\"><a href=\"#程式面與錯誤訊息範例\" class=\"headerlink\" title=\"程式面與錯誤訊息範例\"></a>程式面與錯誤訊息範例</h4><ul>\n<li> 關於集合物件未清除的範例<br><a href=\"https://bbs.csdn.net/topics/391865237\" title=\"List、MAP等集合对象是否有使用完后,未清除造成内存溢出\">List、MAP等集合对象是否有使用完后,未清除造成内存溢出</a></li>\n<li>Map &amp;Java heap space 無限迴圈<br><a href=\"https://www.itread01.com/content/1548835928.html\" title=\"Java記憶體溢位(OOM)異常排查指南\">Java記憶體溢位(OOM)異常排查指南</a><ul>\n<li>內含更多錯誤示例解說<br>OutOfMemoryError: Java heap space<br>OutOfMemoryError: GC overhead limit exceeded<br>OutOfMemoryError:Permgen space<br>OutOfMemoryError:Metaspace<br>OutOfMemoryError:Unable to create new native thread<br>OutOfMemoryError:Out of swap space?<br>OutOfMemoryError:Requested array size exceeds VM limit<br>Out of memory:Kill process or sacrifice child</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"檢測工具-IDEA\"><a href=\"#檢測工具-IDEA\" class=\"headerlink\" title=\"檢測工具@IDEA\"></a>檢測工具@IDEA</h4><p>IntelliJ IDEA 可開啟Memory Indicator &amp; debugger Memory頁籤<br>    (可參考說明開啟:<br>    <a href=\"https://stackoverflow.com/questions/36691118/is-it-possible-to-show-heap-memory-size-in-intellij-ide-android-studio\" title=\"show-heap-memory-size-in-intellij\">show-heap-memory-size-in-intellij</a><br>        <a href=\"https://www.jetbrains.com/help/idea/analyze-objects-in-the-jvm-heap.html\" title=\"Analyze objects in the JVM heap\">Analyze objects in the JVM heap</a>)</p>\n<ul>\n<li><p>關於IDEA如何设置JVM参数<br><a href=\"https://blog.csdn.net/shuiCSDN/article/details/104144009\" title=\"IDEA如何设置JVM参数\">IDEA如何设置JVM参数</a><br><a href=\"https://blog.csdn.net/Gaomb_1990/article/details/80645056\" title=\"菜鸟学习IntelliJ IDEA之如何设置JVM运行参数\">菜鸟学习IntelliJ IDEA之如何设置JVM运行参数</a></p>\n</li>\n<li><p> 關於IDEA debugger Memory頁籤<br>用來查看目前堆中類的個數的情况，右邊的diff會顯示跳轉類的變化</p>\n<blockquote>\n<p>過去看來是透過plugin去安裝JVM Debugger Memory View，但我在plugin 已找不到這個，且官網支援的版本也沒有了，但在IEDA 2020.1 debugg時多出的Memory tab，似乎與這功能一模一樣。<br>說明網站:<br><a href=\"https://www.jianshu.com/p/709fdc76d420\" title=\"神兵利器－内存调试插件\">神兵利器－内存调试插件</a><br><a href=\"https://kknews.cc/zh-hk/code/2q4qpvz.html\" title=\"IDEA中很有用的內存調試插件\">IDEA中很有用的內存調試插件</a><br><a href=\"https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/\" title=\"使用多年的go pprof检查内存泄漏的方法居然是错的?!\">使用多年的go pprof检查内存泄漏的方法居然是错的?!</a></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"使用jvm監控工具命令\"><a href=\"#使用jvm監控工具命令\" class=\"headerlink\" title=\"使用jvm監控工具命令\"></a>使用jvm監控工具命令</h4><p>一般用於檢視服務執行時狀態的主要命令包括：jstat、jmap、top、jstack</p>\n<ul>\n<li>基本工具介紹 <a href=\"https://kknews.cc/code/pl6kmv2.html\" title=\"Java內存泄露監控工具：JVM監控工具介紹  原文網址：https://kknews.cc/code/pl6kmv2.html\">Java內存泄露監控工具</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>note info %}有關java之OutOfMemory檢測等相關問題文章整理</p>\n</blockquote>","more":"<h4 id=\"關於JVM\"><a href=\"#關於JVM\" class=\"headerlink\" title=\"關於JVM\"></a>關於JVM</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-Xms &#x3D; 初始值，預設是實體記憶體的1&#x2F;64</span><br><span class=\"line\">-Xmx &#x3D; 最大值，預設是實體記憶體的1&#x2F;4</span><br><span class=\"line\">-Xmn &#x3D; 最小值</span><br><span class=\"line\">預設空餘堆記憶體小於40%時，JVM 就會增大堆直到-Xmx 的最大限制。</span><br></pre></td></tr></table></figure>\n<ul>\n<li><a href=\"https://juejin.im/post/5ed49e7c51882543012f9e6c\" title=\"一图解千愁，jvm内存从来没有这么简单过！\">一图解千愁，jvm内存从来没有这么简单过！</a></li>\n<li>該文建議使用操作系统的2/3作为堆空间，是比较合理的。这是一个经验值。比如6GB的内存，你分配给JVM的，最好不要超过4GB。</li>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10211000\">淺談 JVM PermGen space 的解決方法</a></li>\n</ul>\n<h4 id=\"調整JVM\"><a href=\"#調整JVM\" class=\"headerlink\" title=\"調整JVM\"></a>調整JVM</h4><p>可以透過以下的參數來修改它，不過應該不要刻意去加大給它的分配記憶體，因為遇到需要大量的請求不多，<br>怕造成記憶體的浪費，應該是從程式面下手修正程式效能(又是一課題了Orz)。</p>\n<ul>\n<li>開發時 IDE 設定</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">IDE JAVA_OPTS&#x3D;&quot;-Xmx900m -Xms900m&quot;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>修改jvm.cfg<br><a href=\"https://www.itread01.com/content/1546694105.html\" title=\"調整JVM虛擬機器記憶體大小\">調整JVM虛擬機器記憶體大小</a></p>\n</li>\n<li><p>執行jar包的時候參數調整</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">java -Xmx900m -Xms900m jar app.jar</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>tomcat/Resin/weblogic 等設定<br><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/313033/\" title=\"完美解決java.lang.OutOfMemoryError處理錯誤的問題\">完美解決java.lang.OutOfMemoryError處理錯誤的問題</a></p>\n</li>\n</ul>\n<h4 id=\"調整JVM參數說明\"><a href=\"#調整JVM參數說明\" class=\"headerlink\" title=\"調整JVM參數說明\"></a>調整JVM參數說明</h4><ul>\n<li><a href=\"https://kknews.cc/zh-tw/code/lxjr3bb.html\" title=\"深入理解JVM內幕之JVM簡單調優參數\">深入理解JVM內幕之JVM簡單調優參數</a><ul>\n<li>Xmx和Xms設置一樣大，MaxPermSize和MinPermSize設置一樣大</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"關於OutOfMemoryError追查\"><a href=\"#關於OutOfMemoryError追查\" class=\"headerlink\" title=\"關於OutOfMemoryError追查\"></a>關於OutOfMemoryError追查</h4><p><a href=\"https://www.itread01.com/content/1546849805.html\" title=\"專案出現記憶體溢位的原因及解決方案\">專案出現記憶體溢位的原因及解決方案</a><br>重點:</p>\n<ol>\n<li>修改JVM啟動引數，直接增加記憶體。(-Xms，-Xmx引數一定不要忘記加。)</li>\n<li>檢查錯誤日誌，檢視“OutOfMemory”錯誤前是否有其它異常或錯誤。</li>\n<li>對程式碼進行走查和分析，找出可能發生記憶體溢位的位置。</li>\n<li>使用記憶體檢視工具動態檢視記憶體使用情況<ol>\n<li>Eclipse開啟Show Heap Status</li>\n<li>IntelliJ IDEA 可開啟Memory Indicator &amp; debugger Memory頁籤<br>(可參考下方檢測工具@IDEA標題)</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h4 id=\"程式面與錯誤訊息範例\"><a href=\"#程式面與錯誤訊息範例\" class=\"headerlink\" title=\"程式面與錯誤訊息範例\"></a>程式面與錯誤訊息範例</h4><ul>\n<li> 關於集合物件未清除的範例<br><a href=\"https://bbs.csdn.net/topics/391865237\" title=\"List、MAP等集合对象是否有使用完后,未清除造成内存溢出\">List、MAP等集合对象是否有使用完后,未清除造成内存溢出</a></li>\n<li>Map &amp;Java heap space 無限迴圈<br><a href=\"https://www.itread01.com/content/1548835928.html\" title=\"Java記憶體溢位(OOM)異常排查指南\">Java記憶體溢位(OOM)異常排查指南</a><ul>\n<li>內含更多錯誤示例解說<br>OutOfMemoryError: Java heap space<br>OutOfMemoryError: GC overhead limit exceeded<br>OutOfMemoryError:Permgen space<br>OutOfMemoryError:Metaspace<br>OutOfMemoryError:Unable to create new native thread<br>OutOfMemoryError:Out of swap space?<br>OutOfMemoryError:Requested array size exceeds VM limit<br>Out of memory:Kill process or sacrifice child</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"檢測工具-IDEA\"><a href=\"#檢測工具-IDEA\" class=\"headerlink\" title=\"檢測工具@IDEA\"></a>檢測工具@IDEA</h4><p>IntelliJ IDEA 可開啟Memory Indicator &amp; debugger Memory頁籤<br>    (可參考說明開啟:<br>    <a href=\"https://stackoverflow.com/questions/36691118/is-it-possible-to-show-heap-memory-size-in-intellij-ide-android-studio\" title=\"show-heap-memory-size-in-intellij\">show-heap-memory-size-in-intellij</a><br>        <a href=\"https://www.jetbrains.com/help/idea/analyze-objects-in-the-jvm-heap.html\" title=\"Analyze objects in the JVM heap\">Analyze objects in the JVM heap</a>)</p>\n<ul>\n<li><p>關於IDEA如何设置JVM参数<br><a href=\"https://blog.csdn.net/shuiCSDN/article/details/104144009\" title=\"IDEA如何设置JVM参数\">IDEA如何设置JVM参数</a><br><a href=\"https://blog.csdn.net/Gaomb_1990/article/details/80645056\" title=\"菜鸟学习IntelliJ IDEA之如何设置JVM运行参数\">菜鸟学习IntelliJ IDEA之如何设置JVM运行参数</a></p>\n</li>\n<li><p> 關於IDEA debugger Memory頁籤<br>用來查看目前堆中類的個數的情况，右邊的diff會顯示跳轉類的變化</p>\n<blockquote>\n<p>過去看來是透過plugin去安裝JVM Debugger Memory View，但我在plugin 已找不到這個，且官網支援的版本也沒有了，但在IEDA 2020.1 debugg時多出的Memory tab，似乎與這功能一模一樣。<br>說明網站:<br><a href=\"https://www.jianshu.com/p/709fdc76d420\" title=\"神兵利器－内存调试插件\">神兵利器－内存调试插件</a><br><a href=\"https://kknews.cc/zh-hk/code/2q4qpvz.html\" title=\"IDEA中很有用的內存調試插件\">IDEA中很有用的內存調試插件</a><br><a href=\"https://colobu.com/2019/08/20/use-pprof-to-compare-go-memory-usage/\" title=\"使用多年的go pprof检查内存泄漏的方法居然是错的?!\">使用多年的go pprof检查内存泄漏的方法居然是错的?!</a></p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"使用jvm監控工具命令\"><a href=\"#使用jvm監控工具命令\" class=\"headerlink\" title=\"使用jvm監控工具命令\"></a>使用jvm監控工具命令</h4><p>一般用於檢視服務執行時狀態的主要命令包括：jstat、jmap、top、jstack</p>\n<ul>\n<li>基本工具介紹 <a href=\"https://kknews.cc/code/pl6kmv2.html\" title=\"Java內存泄露監控工具：JVM監控工具介紹  原文網址：https://kknews.cc/code/pl6kmv2.html\">Java內存泄露監控工具</a></li>\n</ul>"},{"title":"[JAVA] spring 非同步事件","date":"2021-01-30T10:00:42.000Z","_content":"\n>spring 加上 Fire and forget，非同步處理，發出處理後就不用等待回復繼續做其他事情 \n\n<!--more-->\n\n1.找到@Configuration 的地方加上@EnableAsync\n\n```\n@Configuration\n@EnableAsync\npublic class XxxConfig {\n}\n```\n\n2.找到想要執行非同步的方法上方加上 @Async\n\n```\n@Component\npublic class MyComponent {\n    @Async\n    void doSomething() {\n        // this will be executed asynchronously\n    }\n}\n```\n\n如果想要拿到回傳的地方可以在 Future<XXX>拿到結果。\n\n```\n@Component\npublic class MyComponent {\n    @Async\n    Future<String> doSomething(String s, int i, long l, Object o) {\n        // this will be executed asynchronously\n        return new AsyncResult<>(\"result\");\n    }\n}\n```\n\n3.異常處理 TBD\n這塊自己是用 restTamplate 發出訊息，但無奈可以 catch 到錯誤，卻無法做錯誤輸出整理。\n留下文章待做研究。\n\n---\n\n>note class_name %} 網路參考文章 \n\n- [spring-background-fire-and-forget-processing](https://stackoverflow.com/questions/33243255/spring-background-fire-and-forget-processing)\n- [Spring Boot(5) @Async 非同步執行緒池詳解](https://www.mdeditor.tw/pl/pIYL/zh-tw)\n- Spring 中@Async 用法與異常處理\n  [Spring 中@Async 用法](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/312303/)\n","source":"_posts/java-spring-asnc.md","raw":"---\ntitle: \"[JAVA] spring 非同步事件\"\ntags:\n  - java\n  - spring\ncategories:\n  - Tech.\n  - back-end\n  - java\ndate: 2021-01-30 18:00:42\n---\n\n>spring 加上 Fire and forget，非同步處理，發出處理後就不用等待回復繼續做其他事情 \n\n<!--more-->\n\n1.找到@Configuration 的地方加上@EnableAsync\n\n```\n@Configuration\n@EnableAsync\npublic class XxxConfig {\n}\n```\n\n2.找到想要執行非同步的方法上方加上 @Async\n\n```\n@Component\npublic class MyComponent {\n    @Async\n    void doSomething() {\n        // this will be executed asynchronously\n    }\n}\n```\n\n如果想要拿到回傳的地方可以在 Future<XXX>拿到結果。\n\n```\n@Component\npublic class MyComponent {\n    @Async\n    Future<String> doSomething(String s, int i, long l, Object o) {\n        // this will be executed asynchronously\n        return new AsyncResult<>(\"result\");\n    }\n}\n```\n\n3.異常處理 TBD\n這塊自己是用 restTamplate 發出訊息，但無奈可以 catch 到錯誤，卻無法做錯誤輸出整理。\n留下文章待做研究。\n\n---\n\n>note class_name %} 網路參考文章 \n\n- [spring-background-fire-and-forget-processing](https://stackoverflow.com/questions/33243255/spring-background-fire-and-forget-processing)\n- [Spring Boot(5) @Async 非同步執行緒池詳解](https://www.mdeditor.tw/pl/pIYL/zh-tw)\n- Spring 中@Async 用法與異常處理\n  [Spring 中@Async 用法](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/312303/)\n","slug":"java-spring-asnc","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb70023kp2x1kwz2d2s","content":"<blockquote>\n<p>spring 加上 Fire and forget，非同步處理，發出處理後就不用等待回復繼續做其他事情 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<p>1.找到@Configuration 的地方加上@EnableAsync</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class XxxConfig &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.找到想要執行非同步的方法上方加上 @Async</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class MyComponent &#123;</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    void doSomething() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; this will be executed asynchronously</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要拿到回傳的地方可以在 Future<XXX>拿到結果。</XXX></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class MyComponent &#123;</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    Future&lt;String&gt; doSomething(String s, int i, long l, Object o) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; this will be executed asynchronously</span><br><span class=\"line\">        return new AsyncResult&lt;&gt;(&quot;result&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.異常處理 TBD<br>這塊自己是用 restTamplate 發出訊息，但無奈可以 catch 到錯誤，卻無法做錯誤輸出整理。<br>留下文章待做研究。</p>\n<hr>\n<blockquote>\n<p>note class_name %} 網路參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/33243255/spring-background-fire-and-forget-processing\">spring-background-fire-and-forget-processing</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/pIYL/zh-tw\">Spring Boot(5) @Async 非同步執行緒池詳解</a></li>\n<li>Spring 中@Async 用法與異常處理<br><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/312303/\">Spring 中@Async 用法</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>spring 加上 Fire and forget，非同步處理，發出處理後就不用等待回復繼續做其他事情 </p>\n</blockquote>","more":"<p>1.找到@Configuration 的地方加上@EnableAsync</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Configuration</span><br><span class=\"line\">@EnableAsync</span><br><span class=\"line\">public class XxxConfig &#123;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>2.找到想要執行非同步的方法上方加上 @Async</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class MyComponent &#123;</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    void doSomething() &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; this will be executed asynchronously</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>如果想要拿到回傳的地方可以在 Future<XXX>拿到結果。</XXX></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Component</span><br><span class=\"line\">public class MyComponent &#123;</span><br><span class=\"line\">    @Async</span><br><span class=\"line\">    Future&lt;String&gt; doSomething(String s, int i, long l, Object o) &#123;</span><br><span class=\"line\">        &#x2F;&#x2F; this will be executed asynchronously</span><br><span class=\"line\">        return new AsyncResult&lt;&gt;(&quot;result&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>3.異常處理 TBD<br>這塊自己是用 restTamplate 發出訊息，但無奈可以 catch 到錯誤，卻無法做錯誤輸出整理。<br>留下文章待做研究。</p>\n<hr>\n<blockquote>\n<p>note class_name %} 網路參考文章 </p>\n</blockquote>\n<ul>\n<li><a href=\"https://stackoverflow.com/questions/33243255/spring-background-fire-and-forget-processing\">spring-background-fire-and-forget-processing</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/pIYL/zh-tw\">Spring Boot(5) @Async 非同步執行緒池詳解</a></li>\n<li>Spring 中@Async 用法與異常處理<br><a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/312303/\">Spring 中@Async 用法</a></li>\n</ul>"},{"title":"jmeter 測試工具初體驗","date":"2022-07-01T13:32:36.000Z","_content":"\n# 什麼是 JMeter \n>The **Apache JMeter™** application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.g \n\n# 使用時機\n\n當需要對API做整合測試並驗證回覆時使用．\n\n# 本文將會知道：\n  1. 使用測試工具JMeter做一連串API測試\n  2. 解析回覆json與驗證\n  3. `（未完待續）` 壓力測試\n\n<!--more-->\n\n\n\n\n\n## 啟動\n\n在windows下使用\n\n* 下載並開啟時執行黨 (jmeter=\"5.2.1\")\n* 如果需要解析json，需自行放入lib,xxx.jar\n\n## 範例：\n\n### Get APIs\n\n以下這個範例是根據詢問一個Http \\[list]，再根據回覆去一個個問另一支API．\n\n* 請依序新增對應設定，可以右鍵disable/enable該群組\n* 按下執行就可以從檢視結果樹看到結果\n\n測試計畫\n\n> * 使用者自訂變數;\n>* 執行緒群組\n>  *   簡易控制器: 簡易命名\n>\n>      * HTTP 標頭管理員 Authorization:Bearer ${token}\n>      * HTTP 要求 arrays\n        * BeanShell PostProcessor\n>      * JSON Extractor disabled\n>      * ForEach 控制器\n        * HTTP 要求 by id\n          * 驗證回覆\n>      * Debug Sampler\n>      * 檢視結果樹\n\n\n\n\n* 這個測試檔案：[sample.jmx](https://github.com/minilabmemo/working-helper-record/blob/main/sample.jmx)\n\n## 更多細節：\n\n### 自訂變數/引用變數\n\n當自訂toekn=xxx時就可以用${token}拿到變數．\n\n### HTTP 要求 arrays\n這是一個API 會直接回覆 arrays 如下：\n\n```\n[\n[\n   {\n      \"id\":\"1\",\n      \"name\":\"123\"\n   },\n   {\n      \"id\":\"2\",\n      \"name\":\"233\"\n   }\n]\n```\n\n### BeanShell PostProcessor\n\n- (java語法)處理json資料，並透過vars.put（key,value）設定資料給下一步使用\n- 這邊會需要debug比較麻煩，可以另外從上方視窗叫出log來查看問題出在哪裡\n```java\nimport org.json.JSONObject;\nimport org.json.JSONArray;\n\ntry{\n\t\nString response = \"\";\nresponse = prev.getResponseDataAsString();\nlog.info(\"responsessss：\" + response);\nJSONArray jsonArray = new JSONArray(response);\n\nfor (int i=0; i < jsonArray.length(); i++) {\n   JSONObject o= jsonArray.getJSONObject(i);\n   String name = o.getString(\"name\");\n    String id = o.getString(\"id\");\n   log.info(\"name：\" + name);\n   vars.put(\"data_\"+i,id);\n}\n\n\ncatch (Throwable ex) {\nlog.error(\"Error in Beanshell\", ex);\nthrow ex;\n}\n```\n\n### ForEach 控制器\n\n在使用之前必須有資料是\\[data\\_1:xxx,data\\_2:xxx....]&#x20;\n\n* 變數前置字串為data，start index:-1，輸出變數名稱，d&#x20;\n* 這時下一層的HTTP 要求 by id就可以引用${d}\n\n### 驗證回覆\n\n可以驗證回復，如果要驗證的是500，可以勾選Ignore status。\n\n### Debug Sampler&#x20;\n\n可以查看過程中變數內容\n\n\n\n\n###  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n* [Jmeter断言中判断请求失败的响应代码问题](https://www.cnblogs.com/fengsiyi/p/6904041.html) 找不到斷言，但有驗證回復\n* [Meter - JSON variable in a ForEach Controller](https://www.codeproject.com/Tips/5323656/JMeter-JSON-variable-in-a-ForEach-Controller)\n","source":"_posts/jmeter.md","raw":"---\ntitle: jmeter 測試工具初體驗\ntags:\n  - test\n  - jmeter\n  - qa\ncategories:\n  - Tech.\n  - back-end\n  - test\ndate: 2022-07-01 21:32:36\n---\n\n# 什麼是 JMeter \n>The **Apache JMeter™** application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.g \n\n# 使用時機\n\n當需要對API做整合測試並驗證回覆時使用．\n\n# 本文將會知道：\n  1. 使用測試工具JMeter做一連串API測試\n  2. 解析回覆json與驗證\n  3. `（未完待續）` 壓力測試\n\n<!--more-->\n\n\n\n\n\n## 啟動\n\n在windows下使用\n\n* 下載並開啟時執行黨 (jmeter=\"5.2.1\")\n* 如果需要解析json，需自行放入lib,xxx.jar\n\n## 範例：\n\n### Get APIs\n\n以下這個範例是根據詢問一個Http \\[list]，再根據回覆去一個個問另一支API．\n\n* 請依序新增對應設定，可以右鍵disable/enable該群組\n* 按下執行就可以從檢視結果樹看到結果\n\n測試計畫\n\n> * 使用者自訂變數;\n>* 執行緒群組\n>  *   簡易控制器: 簡易命名\n>\n>      * HTTP 標頭管理員 Authorization:Bearer ${token}\n>      * HTTP 要求 arrays\n        * BeanShell PostProcessor\n>      * JSON Extractor disabled\n>      * ForEach 控制器\n        * HTTP 要求 by id\n          * 驗證回覆\n>      * Debug Sampler\n>      * 檢視結果樹\n\n\n\n\n* 這個測試檔案：[sample.jmx](https://github.com/minilabmemo/working-helper-record/blob/main/sample.jmx)\n\n## 更多細節：\n\n### 自訂變數/引用變數\n\n當自訂toekn=xxx時就可以用${token}拿到變數．\n\n### HTTP 要求 arrays\n這是一個API 會直接回覆 arrays 如下：\n\n```\n[\n[\n   {\n      \"id\":\"1\",\n      \"name\":\"123\"\n   },\n   {\n      \"id\":\"2\",\n      \"name\":\"233\"\n   }\n]\n```\n\n### BeanShell PostProcessor\n\n- (java語法)處理json資料，並透過vars.put（key,value）設定資料給下一步使用\n- 這邊會需要debug比較麻煩，可以另外從上方視窗叫出log來查看問題出在哪裡\n```java\nimport org.json.JSONObject;\nimport org.json.JSONArray;\n\ntry{\n\t\nString response = \"\";\nresponse = prev.getResponseDataAsString();\nlog.info(\"responsessss：\" + response);\nJSONArray jsonArray = new JSONArray(response);\n\nfor (int i=0; i < jsonArray.length(); i++) {\n   JSONObject o= jsonArray.getJSONObject(i);\n   String name = o.getString(\"name\");\n    String id = o.getString(\"id\");\n   log.info(\"name：\" + name);\n   vars.put(\"data_\"+i,id);\n}\n\n\ncatch (Throwable ex) {\nlog.error(\"Error in Beanshell\", ex);\nthrow ex;\n}\n```\n\n### ForEach 控制器\n\n在使用之前必須有資料是\\[data\\_1:xxx,data\\_2:xxx....]&#x20;\n\n* 變數前置字串為data，start index:-1，輸出變數名稱，d&#x20;\n* 這時下一層的HTTP 要求 by id就可以引用${d}\n\n### 驗證回覆\n\n可以驗證回復，如果要驗證的是500，可以勾選Ignore status。\n\n### Debug Sampler&#x20;\n\n可以查看過程中變數內容\n\n\n\n\n###  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n* [Jmeter断言中判断请求失败的响应代码问题](https://www.cnblogs.com/fengsiyi/p/6904041.html) 找不到斷言，但有驗證回復\n* [Meter - JSON variable in a ForEach Controller](https://www.codeproject.com/Tips/5323656/JMeter-JSON-variable-in-a-ForEach-Controller)\n","slug":"jmeter","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb80026kp2xhed309b4","content":"<h1 id=\"什麼是-JMeter\"><a href=\"#什麼是-JMeter\" class=\"headerlink\" title=\"什麼是 JMeter\"></a>什麼是 JMeter</h1><blockquote>\n<p>The <strong>Apache JMeter™</strong> application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.g </p>\n</blockquote>\n<h1 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h1><p>當需要對API做整合測試並驗證回覆時使用．</p>\n<h1 id=\"本文將會知道：\"><a href=\"#本文將會知道：\" class=\"headerlink\" title=\"本文將會知道：\"></a>本文將會知道：</h1><ol>\n<li>使用測試工具JMeter做一連串API測試</li>\n<li>解析回覆json與驗證</li>\n<li><code>（未完待續）</code> 壓力測試</li>\n</ol>\n<a id=\"more\"></a>\n\n\n\n\n\n<h2 id=\"啟動\"><a href=\"#啟動\" class=\"headerlink\" title=\"啟動\"></a>啟動</h2><p>在windows下使用</p>\n<ul>\n<li>下載並開啟時執行黨 (jmeter=”5.2.1”)</li>\n<li>如果需要解析json，需自行放入lib,xxx.jar</li>\n</ul>\n<h2 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h2><h3 id=\"Get-APIs\"><a href=\"#Get-APIs\" class=\"headerlink\" title=\"Get APIs\"></a>Get APIs</h3><p>以下這個範例是根據詢問一個Http [list]，再根據回覆去一個個問另一支API．</p>\n<ul>\n<li>請依序新增對應設定，可以右鍵disable/enable該群組</li>\n<li>按下執行就可以從檢視結果樹看到結果</li>\n</ul>\n<p>測試計畫</p>\n<blockquote>\n<ul>\n<li><p>使用者自訂變數;</p>\n</li>\n<li><p>執行緒群組</p>\n</li>\n<li><p>簡易控制器: 簡易命名</p>\n<ul>\n<li>HTTP 標頭管理員 Authorization:Bearer ${token}</li>\n<li>HTTP 要求 arrays<ul>\n<li>BeanShell PostProcessor</li>\n</ul>\n</li>\n<li>JSON Extractor disabled</li>\n<li>ForEach 控制器<ul>\n<li>HTTP 要求 by id<ul>\n<li>驗證回覆</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Debug Sampler</li>\n<li>檢視結果樹</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>這個測試檔案：<a href=\"https://github.com/minilabmemo/working-helper-record/blob/main/sample.jmx\">sample.jmx</a></li>\n</ul>\n<h2 id=\"更多細節：\"><a href=\"#更多細節：\" class=\"headerlink\" title=\"更多細節：\"></a>更多細節：</h2><h3 id=\"自訂變數-引用變數\"><a href=\"#自訂變數-引用變數\" class=\"headerlink\" title=\"自訂變數/引用變數\"></a>自訂變數/引用變數</h3><p>當自訂toekn=xxx時就可以用${token}拿到變數．</p>\n<h3 id=\"HTTP-要求-arrays\"><a href=\"#HTTP-要求-arrays\" class=\"headerlink\" title=\"HTTP 要求 arrays\"></a>HTTP 要求 arrays</h3><p>這是一個API 會直接回覆 arrays 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">[</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;id&quot;:&quot;1&quot;,</span><br><span class=\"line\">      &quot;name&quot;:&quot;123&quot;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;id&quot;:&quot;2&quot;,</span><br><span class=\"line\">      &quot;name&quot;:&quot;233&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"BeanShell-PostProcessor\"><a href=\"#BeanShell-PostProcessor\" class=\"headerlink\" title=\"BeanShell PostProcessor\"></a>BeanShell PostProcessor</h3><ul>\n<li>(java語法)處理json資料，並透過vars.put（key,value）設定資料給下一步使用</li>\n<li>這邊會需要debug比較麻煩，可以另外從上方視窗叫出log來查看問題出在哪裡<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">String response = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">response = prev.getResponseDataAsString();</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;responsessss：&quot;</span> + response);</span><br><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray(response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class=\"line\">   JSONObject o= jsonArray.getJSONObject(i);</span><br><span class=\"line\">   String name = o.getString(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    String id = o.getString(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">   log.info(<span class=\"string\">&quot;name：&quot;</span> + name);</span><br><span class=\"line\">   vars.put(<span class=\"string\">&quot;data_&quot;</span>+i,id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">log.error(<span class=\"string\">&quot;Error in Beanshell&quot;</span>, ex);</span><br><span class=\"line\"><span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ForEach-控制器\"><a href=\"#ForEach-控制器\" class=\"headerlink\" title=\"ForEach 控制器\"></a>ForEach 控制器</h3></li>\n</ul>\n<p>在使用之前必須有資料是[data_1:xxx,data_2:xxx….]&#x20;</p>\n<ul>\n<li>變數前置字串為data，start index:-1，輸出變數名稱，d&#x20;</li>\n<li>這時下一層的HTTP 要求 by id就可以引用${d}</li>\n</ul>\n<h3 id=\"驗證回覆\"><a href=\"#驗證回覆\" class=\"headerlink\" title=\"驗證回覆\"></a>驗證回覆</h3><p>可以驗證回復，如果要驗證的是500，可以勾選Ignore status。</p>\n<h3 id=\"Debug-Sampler-x20\"><a href=\"#Debug-Sampler-x20\" class=\"headerlink\" title=\"Debug Sampler&#x20;\"></a>Debug Sampler&#x20;</h3><p>可以查看過程中變數內容</p>\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/fengsiyi/p/6904041.html\">Jmeter断言中判断请求失败的响应代码问题</a> 找不到斷言，但有驗證回復</li>\n<li><a href=\"https://www.codeproject.com/Tips/5323656/JMeter-JSON-variable-in-a-ForEach-Controller\">Meter - JSON variable in a ForEach Controller</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h1 id=\"什麼是-JMeter\"><a href=\"#什麼是-JMeter\" class=\"headerlink\" title=\"什麼是 JMeter\"></a>什麼是 JMeter</h1><blockquote>\n<p>The <strong>Apache JMeter™</strong> application is open source software, a 100% pure Java application designed to load test functional behavior and measure performance. It was originally designed for testing Web Applications but has since expanded to other test functions.g </p>\n</blockquote>\n<h1 id=\"使用時機\"><a href=\"#使用時機\" class=\"headerlink\" title=\"使用時機\"></a>使用時機</h1><p>當需要對API做整合測試並驗證回覆時使用．</p>\n<h1 id=\"本文將會知道：\"><a href=\"#本文將會知道：\" class=\"headerlink\" title=\"本文將會知道：\"></a>本文將會知道：</h1><ol>\n<li>使用測試工具JMeter做一連串API測試</li>\n<li>解析回覆json與驗證</li>\n<li><code>（未完待續）</code> 壓力測試</li>\n</ol>","more":"<h2 id=\"啟動\"><a href=\"#啟動\" class=\"headerlink\" title=\"啟動\"></a>啟動</h2><p>在windows下使用</p>\n<ul>\n<li>下載並開啟時執行黨 (jmeter=”5.2.1”)</li>\n<li>如果需要解析json，需自行放入lib,xxx.jar</li>\n</ul>\n<h2 id=\"範例：\"><a href=\"#範例：\" class=\"headerlink\" title=\"範例：\"></a>範例：</h2><h3 id=\"Get-APIs\"><a href=\"#Get-APIs\" class=\"headerlink\" title=\"Get APIs\"></a>Get APIs</h3><p>以下這個範例是根據詢問一個Http [list]，再根據回覆去一個個問另一支API．</p>\n<ul>\n<li>請依序新增對應設定，可以右鍵disable/enable該群組</li>\n<li>按下執行就可以從檢視結果樹看到結果</li>\n</ul>\n<p>測試計畫</p>\n<blockquote>\n<ul>\n<li><p>使用者自訂變數;</p>\n</li>\n<li><p>執行緒群組</p>\n</li>\n<li><p>簡易控制器: 簡易命名</p>\n<ul>\n<li>HTTP 標頭管理員 Authorization:Bearer ${token}</li>\n<li>HTTP 要求 arrays<ul>\n<li>BeanShell PostProcessor</li>\n</ul>\n</li>\n<li>JSON Extractor disabled</li>\n<li>ForEach 控制器<ul>\n<li>HTTP 要求 by id<ul>\n<li>驗證回覆</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Debug Sampler</li>\n<li>檢視結果樹</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<ul>\n<li>這個測試檔案：<a href=\"https://github.com/minilabmemo/working-helper-record/blob/main/sample.jmx\">sample.jmx</a></li>\n</ul>\n<h2 id=\"更多細節：\"><a href=\"#更多細節：\" class=\"headerlink\" title=\"更多細節：\"></a>更多細節：</h2><h3 id=\"自訂變數-引用變數\"><a href=\"#自訂變數-引用變數\" class=\"headerlink\" title=\"自訂變數/引用變數\"></a>自訂變數/引用變數</h3><p>當自訂toekn=xxx時就可以用${token}拿到變數．</p>\n<h3 id=\"HTTP-要求-arrays\"><a href=\"#HTTP-要求-arrays\" class=\"headerlink\" title=\"HTTP 要求 arrays\"></a>HTTP 要求 arrays</h3><p>這是一個API 會直接回覆 arrays 如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">[</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;id&quot;:&quot;1&quot;,</span><br><span class=\"line\">      &quot;name&quot;:&quot;123&quot;</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   &#123;</span><br><span class=\"line\">      &quot;id&quot;:&quot;2&quot;,</span><br><span class=\"line\">      &quot;name&quot;:&quot;233&quot;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h3 id=\"BeanShell-PostProcessor\"><a href=\"#BeanShell-PostProcessor\" class=\"headerlink\" title=\"BeanShell PostProcessor\"></a>BeanShell PostProcessor</h3><ul>\n<li>(java語法)處理json資料，並透過vars.put（key,value）設定資料給下一步使用</li>\n<li>這邊會需要debug比較麻煩，可以另外從上方視窗叫出log來查看問題出在哪裡<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONObject;</span><br><span class=\"line\"><span class=\"keyword\">import</span> org.json.JSONArray;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">\t</span><br><span class=\"line\">String response = <span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">response = prev.getResponseDataAsString();</span><br><span class=\"line\">log.info(<span class=\"string\">&quot;responsessss：&quot;</span> + response);</span><br><span class=\"line\">JSONArray jsonArray = <span class=\"keyword\">new</span> JSONArray(response);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>; i &lt; jsonArray.length(); i++) &#123;</span><br><span class=\"line\">   JSONObject o= jsonArray.getJSONObject(i);</span><br><span class=\"line\">   String name = o.getString(<span class=\"string\">&quot;name&quot;</span>);</span><br><span class=\"line\">    String id = o.getString(<span class=\"string\">&quot;id&quot;</span>);</span><br><span class=\"line\">   log.info(<span class=\"string\">&quot;name：&quot;</span> + name);</span><br><span class=\"line\">   vars.put(<span class=\"string\">&quot;data_&quot;</span>+i,id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">catch</span> (Throwable ex) &#123;</span><br><span class=\"line\">log.error(<span class=\"string\">&quot;Error in Beanshell&quot;</span>, ex);</span><br><span class=\"line\"><span class=\"keyword\">throw</span> ex;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"ForEach-控制器\"><a href=\"#ForEach-控制器\" class=\"headerlink\" title=\"ForEach 控制器\"></a>ForEach 控制器</h3></li>\n</ul>\n<p>在使用之前必須有資料是[data_1:xxx,data_2:xxx….]&#x20;</p>\n<ul>\n<li>變數前置字串為data，start index:-1，輸出變數名稱，d&#x20;</li>\n<li>這時下一層的HTTP 要求 by id就可以引用${d}</li>\n</ul>\n<h3 id=\"驗證回覆\"><a href=\"#驗證回覆\" class=\"headerlink\" title=\"驗證回覆\"></a>驗證回覆</h3><p>可以驗證回復，如果要驗證的是500，可以勾選Ignore status。</p>\n<h3 id=\"Debug-Sampler-x20\"><a href=\"#Debug-Sampler-x20\" class=\"headerlink\" title=\"Debug Sampler&#x20;\"></a>Debug Sampler&#x20;</h3><p>可以查看過程中變數內容</p>\n<h3 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h3><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.cnblogs.com/fengsiyi/p/6904041.html\">Jmeter断言中判断请求失败的响应代码问题</a> 找不到斷言，但有驗證回復</li>\n<li><a href=\"https://www.codeproject.com/Tips/5323656/JMeter-JSON-variable-in-a-ForEach-Controller\">Meter - JSON variable in a ForEach Controller</a></li>\n</ul>"},{"title":"[JS 02] 同步與非同步","date":"2021-02-20T03:33:18.000Z","_content":"\n>延續學習ＪＳ的同步與非同步概念 \n\n☝☝本記錄為個人學習整理，如有誤還請您不吝指教，也有引用文章位置，如有問題也請告知．\n\n<!--more-->\n\n\n\n## 同步 vs 非同步\n\n<img src=\"/images/post/sync_async.png\" width=\"350px\"/>\n\n\n\n## 同步\n- 一個線程是一個基本的處理過程，程序用它来完成任務。每個線程一次只能執行一个任務\n- JavaScript 是一種同步的、阻塞的、單線程的语言。即使有多個ＣＰＵ，也只能在單一線程上運行多個任務，此線程稱為主線程\n\n\n## 異步/非同步 用法\n\n- 很多網頁API都使用異步代码，特别是從外部的設備來或許資源，譬如，抓取網路上文件，訪問DB，獲取影片流等等，在瀏覽器端只有一個使用者，但事件或網路要求(AJAX)要求不能阻塞其他程式的進行，通常需要等待一段時間後才會返回，所以需要讓使用者可以繼續進行目前的畫面操作．\n- JS有分為同步及異步callback，setTimeout與setinterval是種異步函數。\n- >label warning@而所有的同步回調函式都執行完成了，才會開始依順序執行異步的回調函式  %}。\n\n### 異步 callbacks\n異步callback(回調)其实就是函数，只不過是作為參數傳遞给那些後台执行的其他函数. 讓會造成阻塞的程式組成一個異步回調函式，先丟往一個任務佇列(task queue)先丟，當某個時間後台運行的代碼结束，就调用callbacks函数，通知你工作已经完成，\n\n#### 什麼是callback function？\n  - callback 將函數作為參數作為傳遞\n  - 讓函式控制參數函式的執行時機 ex 有的情境是當A作完再作B\n  - 使用上會有問題在於callback hell回呼地獄，不易閱讀 -->老派callbacks(會有回呼地獄)，新派promise\n\n#### Promises\n  - Promises 是新派的异步代码\n  - 具有fetch(來源黨或url)\n  - 可以有多個then(func 回乎，當前一個成功後呼叫) \n  - 其中任何一个then()块失败，则在末尾运行catch() -->避免callback hell，錯誤不是在“金字塔”的每一层单独处理。\n  - 還有其他.all()...等func，Promise.all 等到全部實現（或一個拒絕）。詳細請見：[MDN-Promise](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n#### aync/await\n  - ECMAScript 2017 JavaScript版\n  - 基于promises的语法糖，使异步代码更易于编写和阅读，讓非同步的程式碼讀起來更像在寫「同步程式碼」\n  - async function 回傳的一樣是 Promise 物件，可以混合使用.then 語法\n  - await 關鍵字 等待這個非同步的作業完成\n\n\n\n\n\n``` js Promises寫法\n\n    fetch('test.json')\n        .then(response => response.json())\n        .then(myData => {\n            console.log(myData.name);\n        })\n        .catch(e => {\n            console.log('catch a problem: ' + e.message);\n        });\n```\n\n\n\n    \n```js await/aync 寫法\nasync function myFetch() {\n        let response = await fetch('test.json');\n        let myData = await response.json();\n        console.log(myData.name);\n\n    }\n\n    myFetch()\n        .catch(e => {\n            console.log('catch a problem: ' + e.message);\n        });\n```\n\n\n\n```js Promises & await/aync混合用法\n    async function myFetch2() {\n        let response = await fetch('test.json');\n        return await response.json();\n    }\n\n    myFetch2().then((myData) => {\n        console.log(myData.name);\n    }).catch(e => {\n        console.log('catch a problem: ' + e.message);\n    });;\n```\n\n\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n  - [MDN-异步JavaScript简介](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing)\n  - [你懂 JavaScript 嗎？#23 Callback](https://cythilya.github.io/2018/10/30/callback/)\n  - [MDN-async和await:让异步编程更简单](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await)\n  - [MDN-response](https://developer.mozilla.org/zh-CN/docs/Web/API/Response)\n\n","source":"_posts/js-start-02.md","raw":"---\ntitle: \"[JS 02] 同步與非同步\"\ntags:\n  - javascript\n  - ES6\n  - callback\n  - Promises\n  - aync/await\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - js\ndate: 2021-02-20 11:33:18\n---\n\n>延續學習ＪＳ的同步與非同步概念 \n\n☝☝本記錄為個人學習整理，如有誤還請您不吝指教，也有引用文章位置，如有問題也請告知．\n\n<!--more-->\n\n\n\n## 同步 vs 非同步\n\n<img src=\"/images/post/sync_async.png\" width=\"350px\"/>\n\n\n\n## 同步\n- 一個線程是一個基本的處理過程，程序用它来完成任務。每個線程一次只能執行一个任務\n- JavaScript 是一種同步的、阻塞的、單線程的语言。即使有多個ＣＰＵ，也只能在單一線程上運行多個任務，此線程稱為主線程\n\n\n## 異步/非同步 用法\n\n- 很多網頁API都使用異步代码，特别是從外部的設備來或許資源，譬如，抓取網路上文件，訪問DB，獲取影片流等等，在瀏覽器端只有一個使用者，但事件或網路要求(AJAX)要求不能阻塞其他程式的進行，通常需要等待一段時間後才會返回，所以需要讓使用者可以繼續進行目前的畫面操作．\n- JS有分為同步及異步callback，setTimeout與setinterval是種異步函數。\n- >label warning@而所有的同步回調函式都執行完成了，才會開始依順序執行異步的回調函式  %}。\n\n### 異步 callbacks\n異步callback(回調)其实就是函数，只不過是作為參數傳遞给那些後台执行的其他函数. 讓會造成阻塞的程式組成一個異步回調函式，先丟往一個任務佇列(task queue)先丟，當某個時間後台運行的代碼结束，就调用callbacks函数，通知你工作已经完成，\n\n#### 什麼是callback function？\n  - callback 將函數作為參數作為傳遞\n  - 讓函式控制參數函式的執行時機 ex 有的情境是當A作完再作B\n  - 使用上會有問題在於callback hell回呼地獄，不易閱讀 -->老派callbacks(會有回呼地獄)，新派promise\n\n#### Promises\n  - Promises 是新派的异步代码\n  - 具有fetch(來源黨或url)\n  - 可以有多個then(func 回乎，當前一個成功後呼叫) \n  - 其中任何一个then()块失败，则在末尾运行catch() -->避免callback hell，錯誤不是在“金字塔”的每一层单独处理。\n  - 還有其他.all()...等func，Promise.all 等到全部實現（或一個拒絕）。詳細請見：[MDN-Promise](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise)\n\n#### aync/await\n  - ECMAScript 2017 JavaScript版\n  - 基于promises的语法糖，使异步代码更易于编写和阅读，讓非同步的程式碼讀起來更像在寫「同步程式碼」\n  - async function 回傳的一樣是 Promise 物件，可以混合使用.then 語法\n  - await 關鍵字 等待這個非同步的作業完成\n\n\n\n\n\n``` js Promises寫法\n\n    fetch('test.json')\n        .then(response => response.json())\n        .then(myData => {\n            console.log(myData.name);\n        })\n        .catch(e => {\n            console.log('catch a problem: ' + e.message);\n        });\n```\n\n\n\n    \n```js await/aync 寫法\nasync function myFetch() {\n        let response = await fetch('test.json');\n        let myData = await response.json();\n        console.log(myData.name);\n\n    }\n\n    myFetch()\n        .catch(e => {\n            console.log('catch a problem: ' + e.message);\n        });\n```\n\n\n\n```js Promises & await/aync混合用法\n    async function myFetch2() {\n        let response = await fetch('test.json');\n        return await response.json();\n    }\n\n    myFetch2().then((myData) => {\n        console.log(myData.name);\n    }).catch(e => {\n        console.log('catch a problem: ' + e.message);\n    });;\n```\n\n\n\n\n## 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n  - [MDN-异步JavaScript简介](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing)\n  - [你懂 JavaScript 嗎？#23 Callback](https://cythilya.github.io/2018/10/30/callback/)\n  - [MDN-async和await:让异步编程更简单](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await)\n  - [MDN-response](https://developer.mozilla.org/zh-CN/docs/Web/API/Response)\n\n","slug":"js-start-02","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhb90029kp2xcg4dcmps","content":"<blockquote>\n<p>延續學習ＪＳ的同步與非同步概念 </p>\n</blockquote>\n<p>☝☝本記錄為個人學習整理，如有誤還請您不吝指教，也有引用文章位置，如有問題也請告知．</p>\n<a id=\"more\"></a>\n\n\n\n<h2 id=\"同步-vs-非同步\"><a href=\"#同步-vs-非同步\" class=\"headerlink\" title=\"同步 vs 非同步\"></a>同步 vs 非同步</h2><img src=\"/images/post/sync_async.png\" width=\"350px\">\n\n\n\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><ul>\n<li>一個線程是一個基本的處理過程，程序用它来完成任務。每個線程一次只能執行一个任務</li>\n<li>JavaScript 是一種同步的、阻塞的、單線程的语言。即使有多個ＣＰＵ，也只能在單一線程上運行多個任務，此線程稱為主線程</li>\n</ul>\n<h2 id=\"異步-非同步-用法\"><a href=\"#異步-非同步-用法\" class=\"headerlink\" title=\"異步/非同步 用法\"></a>異步/非同步 用法</h2><ul>\n<li>很多網頁API都使用異步代码，特别是從外部的設備來或許資源，譬如，抓取網路上文件，訪問DB，獲取影片流等等，在瀏覽器端只有一個使用者，但事件或網路要求(AJAX)要求不能阻塞其他程式的進行，通常需要等待一段時間後才會返回，所以需要讓使用者可以繼續進行目前的畫面操作．</li>\n<li>JS有分為同步及異步callback，setTimeout與setinterval是種異步函數。</li>\n<li><blockquote>\n<p>label warning@而所有的同步回調函式都執行完成了，才會開始依順序執行異步的回調函式  %}。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"異步-callbacks\"><a href=\"#異步-callbacks\" class=\"headerlink\" title=\"異步 callbacks\"></a>異步 callbacks</h3><p>異步callback(回調)其实就是函数，只不過是作為參數傳遞给那些後台执行的其他函数. 讓會造成阻塞的程式組成一個異步回調函式，先丟往一個任務佇列(task queue)先丟，當某個時間後台運行的代碼结束，就调用callbacks函数，通知你工作已经完成，</p>\n<h4 id=\"什麼是callback-function？\"><a href=\"#什麼是callback-function？\" class=\"headerlink\" title=\"什麼是callback function？\"></a>什麼是callback function？</h4><ul>\n<li>callback 將函數作為參數作為傳遞</li>\n<li>讓函式控制參數函式的執行時機 ex 有的情境是當A作完再作B</li>\n<li>使用上會有問題在於callback hell回呼地獄，不易閱讀 –&gt;老派callbacks(會有回呼地獄)，新派promise</li>\n</ul>\n<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><ul>\n<li>Promises 是新派的异步代码</li>\n<li>具有fetch(來源黨或url)</li>\n<li>可以有多個then(func 回乎，當前一個成功後呼叫) </li>\n<li>其中任何一个then()块失败，则在末尾运行catch() –&gt;避免callback hell，錯誤不是在“金字塔”的每一层单独处理。</li>\n<li>還有其他.all()…等func，Promise.all 等到全部實現（或一個拒絕）。詳細請見：<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN-Promise</a></li>\n</ul>\n<h4 id=\"aync-await\"><a href=\"#aync-await\" class=\"headerlink\" title=\"aync/await\"></a>aync/await</h4><ul>\n<li>ECMAScript 2017 JavaScript版</li>\n<li>基于promises的语法糖，使异步代码更易于编写和阅读，讓非同步的程式碼讀起來更像在寫「同步程式碼」</li>\n<li>async function 回傳的一樣是 Promise 物件，可以混合使用.then 語法</li>\n<li>await 關鍵字 等待這個非同步的作業完成</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>Promises寫法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">&#x27;test.json&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">myData</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><figcaption><span>await/aync 寫法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFetch</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">&#x27;test.json&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> myData = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myFetch()</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><figcaption><span>Promises & await/aync混合用法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFetch2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">&#x27;test.json&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myFetch2().then(<span class=\"function\">(<span class=\"params\">myData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">&#125;);;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">MDN-异步JavaScript简介</a></li>\n<li><a href=\"https://cythilya.github.io/2018/10/30/callback/\">你懂 JavaScript 嗎？#23 Callback</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">MDN-async和await:让异步编程更简单</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response\">MDN-response</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>延續學習ＪＳ的同步與非同步概念 </p>\n</blockquote>\n<p>☝☝本記錄為個人學習整理，如有誤還請您不吝指教，也有引用文章位置，如有問題也請告知．</p>","more":"<h2 id=\"同步-vs-非同步\"><a href=\"#同步-vs-非同步\" class=\"headerlink\" title=\"同步 vs 非同步\"></a>同步 vs 非同步</h2><img src=\"/images/post/sync_async.png\" width=\"350px\">\n\n\n\n<h2 id=\"同步\"><a href=\"#同步\" class=\"headerlink\" title=\"同步\"></a>同步</h2><ul>\n<li>一個線程是一個基本的處理過程，程序用它来完成任務。每個線程一次只能執行一个任務</li>\n<li>JavaScript 是一種同步的、阻塞的、單線程的语言。即使有多個ＣＰＵ，也只能在單一線程上運行多個任務，此線程稱為主線程</li>\n</ul>\n<h2 id=\"異步-非同步-用法\"><a href=\"#異步-非同步-用法\" class=\"headerlink\" title=\"異步/非同步 用法\"></a>異步/非同步 用法</h2><ul>\n<li>很多網頁API都使用異步代码，特别是從外部的設備來或許資源，譬如，抓取網路上文件，訪問DB，獲取影片流等等，在瀏覽器端只有一個使用者，但事件或網路要求(AJAX)要求不能阻塞其他程式的進行，通常需要等待一段時間後才會返回，所以需要讓使用者可以繼續進行目前的畫面操作．</li>\n<li>JS有分為同步及異步callback，setTimeout與setinterval是種異步函數。</li>\n<li><blockquote>\n<p>label warning@而所有的同步回調函式都執行完成了，才會開始依順序執行異步的回調函式  %}。</p>\n</blockquote>\n</li>\n</ul>\n<h3 id=\"異步-callbacks\"><a href=\"#異步-callbacks\" class=\"headerlink\" title=\"異步 callbacks\"></a>異步 callbacks</h3><p>異步callback(回調)其实就是函数，只不過是作為參數傳遞给那些後台执行的其他函数. 讓會造成阻塞的程式組成一個異步回調函式，先丟往一個任務佇列(task queue)先丟，當某個時間後台運行的代碼结束，就调用callbacks函数，通知你工作已经完成，</p>\n<h4 id=\"什麼是callback-function？\"><a href=\"#什麼是callback-function？\" class=\"headerlink\" title=\"什麼是callback function？\"></a>什麼是callback function？</h4><ul>\n<li>callback 將函數作為參數作為傳遞</li>\n<li>讓函式控制參數函式的執行時機 ex 有的情境是當A作完再作B</li>\n<li>使用上會有問題在於callback hell回呼地獄，不易閱讀 –&gt;老派callbacks(會有回呼地獄)，新派promise</li>\n</ul>\n<h4 id=\"Promises\"><a href=\"#Promises\" class=\"headerlink\" title=\"Promises\"></a>Promises</h4><ul>\n<li>Promises 是新派的异步代码</li>\n<li>具有fetch(來源黨或url)</li>\n<li>可以有多個then(func 回乎，當前一個成功後呼叫) </li>\n<li>其中任何一个then()块失败，则在末尾运行catch() –&gt;避免callback hell，錯誤不是在“金字塔”的每一层单独处理。</li>\n<li>還有其他.all()…等func，Promise.all 等到全部實現（或一個拒絕）。詳細請見：<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Promise\">MDN-Promise</a></li>\n</ul>\n<h4 id=\"aync-await\"><a href=\"#aync-await\" class=\"headerlink\" title=\"aync/await\"></a>aync/await</h4><ul>\n<li>ECMAScript 2017 JavaScript版</li>\n<li>基于promises的语法糖，使异步代码更易于编写和阅读，讓非同步的程式碼讀起來更像在寫「同步程式碼」</li>\n<li>async function 回傳的一樣是 Promise 物件，可以混合使用.then 語法</li>\n<li>await 關鍵字 等待這個非同步的作業完成</li>\n</ul>\n<figure class=\"highlight js\"><figcaption><span>Promises寫法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">fetch(<span class=\"string\">&#x27;test.json&#x27;</span>)</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">response</span> =&gt;</span> response.json())</span><br><span class=\"line\">    .then(<span class=\"function\"><span class=\"params\">myData</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">    &#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<figure class=\"highlight js\"><figcaption><span>await/aync 寫法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFetch</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">&#x27;test.json&#x27;</span>);</span><br><span class=\"line\">        <span class=\"keyword\">let</span> myData = <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    myFetch()</span><br><span class=\"line\">        .catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">        &#125;);</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight js\"><figcaption><span>Promises & await/aync混合用法</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myFetch2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> response = <span class=\"keyword\">await</span> fetch(<span class=\"string\">&#x27;test.json&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">await</span> response.json();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">myFetch2().then(<span class=\"function\">(<span class=\"params\">myData</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(myData.name);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">e</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;catch a problem: &#x27;</span> + e.message);</span><br><span class=\"line\">&#125;);;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Introducing\">MDN-异步JavaScript简介</a></li>\n<li><a href=\"https://cythilya.github.io/2018/10/30/callback/\">你懂 JavaScript 嗎？#23 Callback</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Asynchronous/Async_await\">MDN-async和await:让异步编程更简单</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/API/Response\">MDN-response</a></li>\n</ul>"},{"title":"[linux][紀錄]在linux環境下指令操作","date":"2020-12-27T02:37:58.000Z","_content":"\n>紀錄在linux環境下使用command line如何下指令操作 \n\n\n\n> 如果曾經維護管理過linux介面環境，或是管理部署，都會需要在命令列介面環境下操作，所以需要了解基礎的指令操作，本篇純記錄用過的linux CLI指令．如果沒有linux環境可以參考另一篇 [[Docker]快速啟動可用VNC進去連線之ubuntu](https://minilabmemo.github.io/2020/09/14/docker-ubuntu-vnc/\")，就可以快速練習喔．\n\n＊命令列介面（英語：Command-Line Interface，縮寫：CLI）是在圖形使用者介面得到普及之前使用最為廣泛的使用者介面，它通常不支援滑鼠，使用者通過鍵盤輸入指令，電腦接收到指令後，予以執行。也有人稱之為文字使用者介面（character user interface, CUI）- 維基百科。\n\n\n### 系統相關資訊\nref:[linux查詢作業系統資訊，CPU物理個數，CPU核心數，邏輯CPU數，記憶體資訊查詢，硬碟資訊查詢](https://www.uj5u.com/caozuo/9727.html)\n\n#### 查詢記憶體大小\n```\n可以用下述指令:\nfree  \nfree -m  //單位\ncat /proc/meminfo\n\naaaa@el1000:~$ free -m\n              total        used        free      shared  buff/cache   available\nMem:          31985       17605        3437          71       10941       15137\nSwap:             0           0           0\n```\n\n\n#### 查詢CPU資訊\n- 查看 CPU 物理個數\naaaa@el1000:~$ grep 'physical id' /proc/cpuinfo | sort -u | wc -l\n1\n- 查看 CPU 核心數量\naaaa@el1000:~$ grep 'core id' /proc/cpuinfo | sort -u | wc -l\n8\n- 查看 CPU 執行緒數\naaaa@el1000:~$ cat /proc/cpuinfo| grep \"processor\"|wc -l\n16\naaaa@el1000:~$  grep 'processor' /proc/cpuinfo | sort -u | wc -l\n16\n- 查看 CPU 型號\naaaa@el1000:~$ cat /proc/cpuinfo | grep name | sort | uniq\nmodel name      : Intel(R) Xeon(R) CPU D-1548 @ 2.00GHz\n\n\n---------------\n\n\n#### 基本路徑操作\n```\npwd 目前位置\nmkdir folder 創建資料夾\nmkdir -p folder 如果目錄已存在則不會報錯\nmkdir -p Project/a/src  创建多级目录 mkdir -p\ntouch  檔名.txt 新增空白檔案\nls 列出 -a 含隱藏檔案\ncd 進入\ncat filename 直接檢視檔案內容\n```\n\n#### 檔案文件權限查看\n- ls -l \n```\n-l 參數可以顯示檔案與目錄的詳細資訊。\n-h 參數可以讓輸出的資訊以比較容易閱讀的格式呈現。\n\n```\n- -rwxr-xr-x 意思\n```\n第一位表示文件的類型，-爲文件，d爲目錄\n之後每三位代表即用戶、組用戶、其他用戶\n其中r表示讀、w表示寫、x表示可執行-表示沒有權限\n\n```\n- Linux 系统中采用三位十进制数表示权限，如0755， 0644.\n- 一般赋予目录0755权限，文件0644权限。\n```\n0755\nABCD\nA- 0， 表示十进制\nB－用户\nC－组用户\nD－其他用户\n \n---  -> 0   (no excute , no write ,no read)\n--x  -> 1   excute, (no write, no read)\n-w-  -> 2   write \n-wx  -> 3   write, excute\nr--  -> 4   read\nr-x  -> 5   read, excute\nrw-  -> 6   read, write , \nrwx  -> 7   read, write , excute\n \n0755->即用户具有读/写/执行权限，组用户和其它用户具有读写权限；\n0644->即用户具有读写权限，组用户和其它用户具有只读权限；\n\n```\n Ref: [ls 參數說明](https://blog.gtwang.org/linux/linux-ls-command-tutorial/)\n\n\n#### vi 文書處理軟體\n```\nvi test.txt\n//輸入i進入編輯模式\n//按下ESC回到一般模式\n:wq\n存檔\n:q!\n不存檔離開\n```\n\nhttp://linux.vbird.org/linux_basic/0310vi/0310vi.php\n\n#### 刪除\n```\nrm filename\nrm -r dirname/\n要刪除目錄, 需要加入 -r 代表 recursive 遞迴刪除, \n使用時要格外小心, 會把目錄內所有檔案及目錄一同刪除．\n-f：force=>強制，不會出現警告訊息，會自動忽略不存在的檔案。\n$ rm -r dirname/  刪除空目錄,內有檔案或副目錄便不能刪除\n各發行版為了安全起見,強制刪除整個根目錄會不能生效，如果真的想刪請見參考用法：\nRef:\nhttps://www.opencli.com/linux/rm-delete-files-directory-command\n\n```\n\n\n\n\n#### 查看檔案大小\n```\ndu \"File\"\ndu --block-size=1G \"File\"  後面不加檔案則是當前目錄\n-s, --summarize 只顯示總計\n-h, --human-readable 以 K, M, G 為計量單位\ndu -shc /ftp/*\nhttps://clay-atlas.com/blog/2020/01/11/linux-chinese-tutorial-command-du-check-file-size/\nhttps://blog.xuite.net/cadmus.lin/yo/39567921\n```\n\n\n\n\n#### tar \n```\n壓縮\ntar zcvf FileName.tar.gz\n-z  ：透過 gzip  的支援進行壓縮/解壓縮：此時檔名最好為 *.tar.gz\n-c  ：建立打包檔案，可搭配 -v 來察看過程中被打包的檔名(filename)\n-f filename：-f 後面要立刻接要被處理的檔名\n\n解壓縮\ntar zxvf FileName.tar.gz -C /xxx/xxx\n-x  ：解打包或解壓縮的功能，可以搭配 -C (大寫) 在特定目錄解開\n```\n\n\n\n\n\n-------\n#### wget\nwget 是 linux 中除了 curl 外另一個檔案下載的好用工具。\n若要下載網路上的檔案，可執行 wget 加上檔案的網址即可立即下載，\n```\nwget http://xxxx/xxxxx.tar.gz //也支援ftp://協定\n-c //檔案續傳，如果下載大型檔案中途斷線，-c 參數從上次中斷的地方繼續下載\n-i urls.txt //如果要下載的檔案非常多，可以將網址放進txt裡\n\nmore:\nhttps://blog.gtwang.org/linux/linux-wget-command-download-web-pages-and-files-tutorial-examples/\n```\n\n#### Ubuntu內建的apt-get指令來完成更新\n\nUpdate the package list first:\n```\nsudo apt-get update\n```\n\n#### sshpass\n- 安裝sshpass\n```\napt-get install sshpass\n```\n\n-  使用 scp 與 sshpass 即可複製檔案至遠端 SSH 伺服器.\n```\n$ sshpass -p [使用者密碼] scp -v [本地檔案路徑] [使用者帳號]@[遠端 SSH 伺服器 IP 位址]:[遠端 SSH Server 目錄]\n```\nRef:\nHow to install sshpass on ubuntu?\nhttps://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu\nSSH 檔案傳輸\nhttps://artistehsu.pixnet.net/blog/post/257353906\n\n\n---\n更多參考，待讀\n[看似比較簡單的Linux推坑教學 Linux CLI 基本教學](https://www.slideshare.net/ssuser6090c0/linux-linux-cli)\n","source":"_posts/linux-CLI.md","raw":"---\ntitle: \"[linux][紀錄]在linux環境下指令操作\"\ntags:\n  - linux\n  - CLI\ncategories:\n  - Tech.\n  - back-end\n  - linux\ndate: 2020-12-27 10:37:58\n---\n\n>紀錄在linux環境下使用command line如何下指令操作 \n\n\n\n> 如果曾經維護管理過linux介面環境，或是管理部署，都會需要在命令列介面環境下操作，所以需要了解基礎的指令操作，本篇純記錄用過的linux CLI指令．如果沒有linux環境可以參考另一篇 [[Docker]快速啟動可用VNC進去連線之ubuntu](https://minilabmemo.github.io/2020/09/14/docker-ubuntu-vnc/\")，就可以快速練習喔．\n\n＊命令列介面（英語：Command-Line Interface，縮寫：CLI）是在圖形使用者介面得到普及之前使用最為廣泛的使用者介面，它通常不支援滑鼠，使用者通過鍵盤輸入指令，電腦接收到指令後，予以執行。也有人稱之為文字使用者介面（character user interface, CUI）- 維基百科。\n\n\n### 系統相關資訊\nref:[linux查詢作業系統資訊，CPU物理個數，CPU核心數，邏輯CPU數，記憶體資訊查詢，硬碟資訊查詢](https://www.uj5u.com/caozuo/9727.html)\n\n#### 查詢記憶體大小\n```\n可以用下述指令:\nfree  \nfree -m  //單位\ncat /proc/meminfo\n\naaaa@el1000:~$ free -m\n              total        used        free      shared  buff/cache   available\nMem:          31985       17605        3437          71       10941       15137\nSwap:             0           0           0\n```\n\n\n#### 查詢CPU資訊\n- 查看 CPU 物理個數\naaaa@el1000:~$ grep 'physical id' /proc/cpuinfo | sort -u | wc -l\n1\n- 查看 CPU 核心數量\naaaa@el1000:~$ grep 'core id' /proc/cpuinfo | sort -u | wc -l\n8\n- 查看 CPU 執行緒數\naaaa@el1000:~$ cat /proc/cpuinfo| grep \"processor\"|wc -l\n16\naaaa@el1000:~$  grep 'processor' /proc/cpuinfo | sort -u | wc -l\n16\n- 查看 CPU 型號\naaaa@el1000:~$ cat /proc/cpuinfo | grep name | sort | uniq\nmodel name      : Intel(R) Xeon(R) CPU D-1548 @ 2.00GHz\n\n\n---------------\n\n\n#### 基本路徑操作\n```\npwd 目前位置\nmkdir folder 創建資料夾\nmkdir -p folder 如果目錄已存在則不會報錯\nmkdir -p Project/a/src  创建多级目录 mkdir -p\ntouch  檔名.txt 新增空白檔案\nls 列出 -a 含隱藏檔案\ncd 進入\ncat filename 直接檢視檔案內容\n```\n\n#### 檔案文件權限查看\n- ls -l \n```\n-l 參數可以顯示檔案與目錄的詳細資訊。\n-h 參數可以讓輸出的資訊以比較容易閱讀的格式呈現。\n\n```\n- -rwxr-xr-x 意思\n```\n第一位表示文件的類型，-爲文件，d爲目錄\n之後每三位代表即用戶、組用戶、其他用戶\n其中r表示讀、w表示寫、x表示可執行-表示沒有權限\n\n```\n- Linux 系统中采用三位十进制数表示权限，如0755， 0644.\n- 一般赋予目录0755权限，文件0644权限。\n```\n0755\nABCD\nA- 0， 表示十进制\nB－用户\nC－组用户\nD－其他用户\n \n---  -> 0   (no excute , no write ,no read)\n--x  -> 1   excute, (no write, no read)\n-w-  -> 2   write \n-wx  -> 3   write, excute\nr--  -> 4   read\nr-x  -> 5   read, excute\nrw-  -> 6   read, write , \nrwx  -> 7   read, write , excute\n \n0755->即用户具有读/写/执行权限，组用户和其它用户具有读写权限；\n0644->即用户具有读写权限，组用户和其它用户具有只读权限；\n\n```\n Ref: [ls 參數說明](https://blog.gtwang.org/linux/linux-ls-command-tutorial/)\n\n\n#### vi 文書處理軟體\n```\nvi test.txt\n//輸入i進入編輯模式\n//按下ESC回到一般模式\n:wq\n存檔\n:q!\n不存檔離開\n```\n\nhttp://linux.vbird.org/linux_basic/0310vi/0310vi.php\n\n#### 刪除\n```\nrm filename\nrm -r dirname/\n要刪除目錄, 需要加入 -r 代表 recursive 遞迴刪除, \n使用時要格外小心, 會把目錄內所有檔案及目錄一同刪除．\n-f：force=>強制，不會出現警告訊息，會自動忽略不存在的檔案。\n$ rm -r dirname/  刪除空目錄,內有檔案或副目錄便不能刪除\n各發行版為了安全起見,強制刪除整個根目錄會不能生效，如果真的想刪請見參考用法：\nRef:\nhttps://www.opencli.com/linux/rm-delete-files-directory-command\n\n```\n\n\n\n\n#### 查看檔案大小\n```\ndu \"File\"\ndu --block-size=1G \"File\"  後面不加檔案則是當前目錄\n-s, --summarize 只顯示總計\n-h, --human-readable 以 K, M, G 為計量單位\ndu -shc /ftp/*\nhttps://clay-atlas.com/blog/2020/01/11/linux-chinese-tutorial-command-du-check-file-size/\nhttps://blog.xuite.net/cadmus.lin/yo/39567921\n```\n\n\n\n\n#### tar \n```\n壓縮\ntar zcvf FileName.tar.gz\n-z  ：透過 gzip  的支援進行壓縮/解壓縮：此時檔名最好為 *.tar.gz\n-c  ：建立打包檔案，可搭配 -v 來察看過程中被打包的檔名(filename)\n-f filename：-f 後面要立刻接要被處理的檔名\n\n解壓縮\ntar zxvf FileName.tar.gz -C /xxx/xxx\n-x  ：解打包或解壓縮的功能，可以搭配 -C (大寫) 在特定目錄解開\n```\n\n\n\n\n\n-------\n#### wget\nwget 是 linux 中除了 curl 外另一個檔案下載的好用工具。\n若要下載網路上的檔案，可執行 wget 加上檔案的網址即可立即下載，\n```\nwget http://xxxx/xxxxx.tar.gz //也支援ftp://協定\n-c //檔案續傳，如果下載大型檔案中途斷線，-c 參數從上次中斷的地方繼續下載\n-i urls.txt //如果要下載的檔案非常多，可以將網址放進txt裡\n\nmore:\nhttps://blog.gtwang.org/linux/linux-wget-command-download-web-pages-and-files-tutorial-examples/\n```\n\n#### Ubuntu內建的apt-get指令來完成更新\n\nUpdate the package list first:\n```\nsudo apt-get update\n```\n\n#### sshpass\n- 安裝sshpass\n```\napt-get install sshpass\n```\n\n-  使用 scp 與 sshpass 即可複製檔案至遠端 SSH 伺服器.\n```\n$ sshpass -p [使用者密碼] scp -v [本地檔案路徑] [使用者帳號]@[遠端 SSH 伺服器 IP 位址]:[遠端 SSH Server 目錄]\n```\nRef:\nHow to install sshpass on ubuntu?\nhttps://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu\nSSH 檔案傳輸\nhttps://artistehsu.pixnet.net/blog/post/257353906\n\n\n---\n更多參考，待讀\n[看似比較簡單的Linux推坑教學 Linux CLI 基本教學](https://www.slideshare.net/ssuser6090c0/linux-linux-cli)\n","slug":"linux-CLI","published":1,"updated":"2023-01-22T07:03:26.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhba002ckp2xdqe41sl6","content":"<blockquote>\n<p>紀錄在linux環境下使用command line如何下指令操作 </p>\n</blockquote>\n<blockquote>\n<p>如果曾經維護管理過linux介面環境，或是管理部署，都會需要在命令列介面環境下操作，所以需要了解基礎的指令操作，本篇純記錄用過的linux CLI指令．如果沒有linux環境可以參考另一篇 <a href=\"https://minilabmemo.github.io/2020/09/14/docker-ubuntu-vnc/%22\">[Docker]快速啟動可用VNC進去連線之ubuntu</a>，就可以快速練習喔．</p>\n</blockquote>\n<p>＊命令列介面（英語：Command-Line Interface，縮寫：CLI）是在圖形使用者介面得到普及之前使用最為廣泛的使用者介面，它通常不支援滑鼠，使用者通過鍵盤輸入指令，電腦接收到指令後，予以執行。也有人稱之為文字使用者介面（character user interface, CUI）- 維基百科。</p>\n<h3 id=\"系統相關資訊\"><a href=\"#系統相關資訊\" class=\"headerlink\" title=\"系統相關資訊\"></a>系統相關資訊</h3><p>ref:<a href=\"https://www.uj5u.com/caozuo/9727.html\">linux查詢作業系統資訊，CPU物理個數，CPU核心數，邏輯CPU數，記憶體資訊查詢，硬碟資訊查詢</a></p>\n<h4 id=\"查詢記憶體大小\"><a href=\"#查詢記憶體大小\" class=\"headerlink\" title=\"查詢記憶體大小\"></a>查詢記憶體大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用下述指令:</span><br><span class=\"line\">free  </span><br><span class=\"line\">free -m  &#x2F;&#x2F;單位</span><br><span class=\"line\">cat &#x2F;proc&#x2F;meminfo</span><br><span class=\"line\"></span><br><span class=\"line\">aaaa@el1000:~$ free -m</span><br><span class=\"line\">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class=\"line\">Mem:          31985       17605        3437          71       10941       15137</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查詢CPU資訊\"><a href=\"#查詢CPU資訊\" class=\"headerlink\" title=\"查詢CPU資訊\"></a>查詢CPU資訊</h4><ul>\n<li>查看 CPU 物理個數<br>aaaa@el1000:~$ grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l<br>1</li>\n<li>查看 CPU 核心數量<br>aaaa@el1000:~$ grep ‘core id’ /proc/cpuinfo | sort -u | wc -l<br>8</li>\n<li>查看 CPU 執行緒數<br>aaaa@el1000:<del>$ cat /proc/cpuinfo| grep “processor”|wc -l<br>16<br>aaaa@el1000:</del>$  grep ‘processor’ /proc/cpuinfo | sort -u | wc -l<br>16</li>\n<li>查看 CPU 型號<br>aaaa@el1000:~$ cat /proc/cpuinfo | grep name | sort | uniq<br>model name      : Intel(R) Xeon(R) CPU D-1548 @ 2.00GHz</li>\n</ul>\n<hr>\n<h4 id=\"基本路徑操作\"><a href=\"#基本路徑操作\" class=\"headerlink\" title=\"基本路徑操作\"></a>基本路徑操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd 目前位置</span><br><span class=\"line\">mkdir folder 創建資料夾</span><br><span class=\"line\">mkdir -p folder 如果目錄已存在則不會報錯</span><br><span class=\"line\">mkdir -p Project&#x2F;a&#x2F;src  创建多级目录 mkdir -p</span><br><span class=\"line\">touch  檔名.txt 新增空白檔案</span><br><span class=\"line\">ls 列出 -a 含隱藏檔案</span><br><span class=\"line\">cd 進入</span><br><span class=\"line\">cat filename 直接檢視檔案內容</span><br></pre></td></tr></table></figure>\n<h4 id=\"檔案文件權限查看\"><a href=\"#檔案文件權限查看\" class=\"headerlink\" title=\"檔案文件權限查看\"></a>檔案文件權限查看</h4><ul>\n<li>ls -l <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-l 參數可以顯示檔案與目錄的詳細資訊。</span><br><span class=\"line\">-h 參數可以讓輸出的資訊以比較容易閱讀的格式呈現。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>-rwxr-xr-x 意思<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一位表示文件的類型，-爲文件，d爲目錄</span><br><span class=\"line\">之後每三位代表即用戶、組用戶、其他用戶</span><br><span class=\"line\">其中r表示讀、w表示寫、x表示可執行-表示沒有權限</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>Linux 系统中采用三位十进制数表示权限，如0755， 0644.</li>\n<li>一般赋予目录0755权限，文件0644权限。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0755</span><br><span class=\"line\">ABCD</span><br><span class=\"line\">A- 0， 表示十进制</span><br><span class=\"line\">B－用户</span><br><span class=\"line\">C－组用户</span><br><span class=\"line\">D－其他用户</span><br><span class=\"line\"> </span><br><span class=\"line\">---  -&gt; 0   (no excute , no write ,no read)</span><br><span class=\"line\">--x  -&gt; 1   excute, (no write, no read)</span><br><span class=\"line\">-w-  -&gt; 2   write </span><br><span class=\"line\">-wx  -&gt; 3   write, excute</span><br><span class=\"line\">r--  -&gt; 4   read</span><br><span class=\"line\">r-x  -&gt; 5   read, excute</span><br><span class=\"line\">rw-  -&gt; 6   read, write , </span><br><span class=\"line\">rwx  -&gt; 7   read, write , excute</span><br><span class=\"line\"> </span><br><span class=\"line\">0755-&gt;即用户具有读&#x2F;写&#x2F;执行权限，组用户和其它用户具有读写权限；</span><br><span class=\"line\">0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nRef: <a href=\"https://blog.gtwang.org/linux/linux-ls-command-tutorial/\">ls 參數說明</a></li>\n</ul>\n<h4 id=\"vi-文書處理軟體\"><a href=\"#vi-文書處理軟體\" class=\"headerlink\" title=\"vi 文書處理軟體\"></a>vi 文書處理軟體</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi test.txt</span><br><span class=\"line\">&#x2F;&#x2F;輸入i進入編輯模式</span><br><span class=\"line\">&#x2F;&#x2F;按下ESC回到一般模式</span><br><span class=\"line\">:wq</span><br><span class=\"line\">存檔</span><br><span class=\"line\">:q!</span><br><span class=\"line\">不存檔離開</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://linux.vbird.org/linux_basic/0310vi/0310vi.php\">http://linux.vbird.org/linux_basic/0310vi/0310vi.php</a></p>\n<h4 id=\"刪除\"><a href=\"#刪除\" class=\"headerlink\" title=\"刪除\"></a>刪除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm filename</span><br><span class=\"line\">rm -r dirname&#x2F;</span><br><span class=\"line\">要刪除目錄, 需要加入 -r 代表 recursive 遞迴刪除, </span><br><span class=\"line\">使用時要格外小心, 會把目錄內所有檔案及目錄一同刪除．</span><br><span class=\"line\">-f：force&#x3D;&gt;強制，不會出現警告訊息，會自動忽略不存在的檔案。</span><br><span class=\"line\">$ rm -r dirname&#x2F;  刪除空目錄,內有檔案或副目錄便不能刪除</span><br><span class=\"line\">各發行版為了安全起見,強制刪除整個根目錄會不能生效，如果真的想刪請見參考用法：</span><br><span class=\"line\">Ref:</span><br><span class=\"line\">https:&#x2F;&#x2F;www.opencli.com&#x2F;linux&#x2F;rm-delete-files-directory-command</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看檔案大小\"><a href=\"#查看檔案大小\" class=\"headerlink\" title=\"查看檔案大小\"></a>查看檔案大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du &quot;File&quot;</span><br><span class=\"line\">du --block-size&#x3D;1G &quot;File&quot;  後面不加檔案則是當前目錄</span><br><span class=\"line\">-s, --summarize 只顯示總計</span><br><span class=\"line\">-h, --human-readable 以 K, M, G 為計量單位</span><br><span class=\"line\">du -shc &#x2F;ftp&#x2F;*</span><br><span class=\"line\">https:&#x2F;&#x2F;clay-atlas.com&#x2F;blog&#x2F;2020&#x2F;01&#x2F;11&#x2F;linux-chinese-tutorial-command-du-check-file-size&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.xuite.net&#x2F;cadmus.lin&#x2F;yo&#x2F;39567921</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">壓縮</span><br><span class=\"line\">tar zcvf FileName.tar.gz</span><br><span class=\"line\">-z  ：透過 gzip  的支援進行壓縮&#x2F;解壓縮：此時檔名最好為 *.tar.gz</span><br><span class=\"line\">-c  ：建立打包檔案，可搭配 -v 來察看過程中被打包的檔名(filename)</span><br><span class=\"line\">-f filename：-f 後面要立刻接要被處理的檔名</span><br><span class=\"line\"></span><br><span class=\"line\">解壓縮</span><br><span class=\"line\">tar zxvf FileName.tar.gz -C &#x2F;xxx&#x2F;xxx</span><br><span class=\"line\">-x  ：解打包或解壓縮的功能，可以搭配 -C (大寫) 在特定目錄解開</span><br></pre></td></tr></table></figure>\n\n\n\n\n<hr>\n<h4 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h4><p>wget 是 linux 中除了 curl 外另一個檔案下載的好用工具。<br>若要下載網路上的檔案，可執行 wget 加上檔案的網址即可立即下載，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;xxxx&#x2F;xxxxx.tar.gz &#x2F;&#x2F;也支援ftp:&#x2F;&#x2F;協定</span><br><span class=\"line\">-c &#x2F;&#x2F;檔案續傳，如果下載大型檔案中途斷線，-c 參數從上次中斷的地方繼續下載</span><br><span class=\"line\">-i urls.txt &#x2F;&#x2F;如果要下載的檔案非常多，可以將網址放進txt裡</span><br><span class=\"line\"></span><br><span class=\"line\">more:</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.gtwang.org&#x2F;linux&#x2F;linux-wget-command-download-web-pages-and-files-tutorial-examples&#x2F;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ubuntu內建的apt-get指令來完成更新\"><a href=\"#Ubuntu內建的apt-get指令來完成更新\" class=\"headerlink\" title=\"Ubuntu內建的apt-get指令來完成更新\"></a>Ubuntu內建的apt-get指令來完成更新</h4><p>Update the package list first:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<h4 id=\"sshpass\"><a href=\"#sshpass\" class=\"headerlink\" title=\"sshpass\"></a>sshpass</h4><ul>\n<li>安裝sshpass<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install sshpass</span><br></pre></td></tr></table></figure></li>\n<li> 使用 scp 與 sshpass 即可複製檔案至遠端 SSH 伺服器.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sshpass -p [使用者密碼] scp -v [本地檔案路徑] [使用者帳號]@[遠端 SSH 伺服器 IP 位址]:[遠端 SSH Server 目錄]</span><br></pre></td></tr></table></figure>\nRef:<br>How to install sshpass on ubuntu?<br><a href=\"https://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu\">https://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu</a><br>SSH 檔案傳輸<br><a href=\"https://artistehsu.pixnet.net/blog/post/257353906\">https://artistehsu.pixnet.net/blog/post/257353906</a></li>\n</ul>\n<hr>\n<p>更多參考，待讀<br><a href=\"https://www.slideshare.net/ssuser6090c0/linux-linux-cli\">看似比較簡單的Linux推坑教學 Linux CLI 基本教學</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>紀錄在linux環境下使用command line如何下指令操作 </p>\n</blockquote>\n<blockquote>\n<p>如果曾經維護管理過linux介面環境，或是管理部署，都會需要在命令列介面環境下操作，所以需要了解基礎的指令操作，本篇純記錄用過的linux CLI指令．如果沒有linux環境可以參考另一篇 <a href=\"https://minilabmemo.github.io/2020/09/14/docker-ubuntu-vnc/%22\">[Docker]快速啟動可用VNC進去連線之ubuntu</a>，就可以快速練習喔．</p>\n</blockquote>\n<p>＊命令列介面（英語：Command-Line Interface，縮寫：CLI）是在圖形使用者介面得到普及之前使用最為廣泛的使用者介面，它通常不支援滑鼠，使用者通過鍵盤輸入指令，電腦接收到指令後，予以執行。也有人稱之為文字使用者介面（character user interface, CUI）- 維基百科。</p>\n<h3 id=\"系統相關資訊\"><a href=\"#系統相關資訊\" class=\"headerlink\" title=\"系統相關資訊\"></a>系統相關資訊</h3><p>ref:<a href=\"https://www.uj5u.com/caozuo/9727.html\">linux查詢作業系統資訊，CPU物理個數，CPU核心數，邏輯CPU數，記憶體資訊查詢，硬碟資訊查詢</a></p>\n<h4 id=\"查詢記憶體大小\"><a href=\"#查詢記憶體大小\" class=\"headerlink\" title=\"查詢記憶體大小\"></a>查詢記憶體大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">可以用下述指令:</span><br><span class=\"line\">free  </span><br><span class=\"line\">free -m  &#x2F;&#x2F;單位</span><br><span class=\"line\">cat &#x2F;proc&#x2F;meminfo</span><br><span class=\"line\"></span><br><span class=\"line\">aaaa@el1000:~$ free -m</span><br><span class=\"line\">              total        used        free      shared  buff&#x2F;cache   available</span><br><span class=\"line\">Mem:          31985       17605        3437          71       10941       15137</span><br><span class=\"line\">Swap:             0           0           0</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"查詢CPU資訊\"><a href=\"#查詢CPU資訊\" class=\"headerlink\" title=\"查詢CPU資訊\"></a>查詢CPU資訊</h4><ul>\n<li>查看 CPU 物理個數<br>aaaa@el1000:~$ grep ‘physical id’ /proc/cpuinfo | sort -u | wc -l<br>1</li>\n<li>查看 CPU 核心數量<br>aaaa@el1000:~$ grep ‘core id’ /proc/cpuinfo | sort -u | wc -l<br>8</li>\n<li>查看 CPU 執行緒數<br>aaaa@el1000:<del>$ cat /proc/cpuinfo| grep “processor”|wc -l<br>16<br>aaaa@el1000:</del>$  grep ‘processor’ /proc/cpuinfo | sort -u | wc -l<br>16</li>\n<li>查看 CPU 型號<br>aaaa@el1000:~$ cat /proc/cpuinfo | grep name | sort | uniq<br>model name      : Intel(R) Xeon(R) CPU D-1548 @ 2.00GHz</li>\n</ul>\n<hr>\n<h4 id=\"基本路徑操作\"><a href=\"#基本路徑操作\" class=\"headerlink\" title=\"基本路徑操作\"></a>基本路徑操作</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pwd 目前位置</span><br><span class=\"line\">mkdir folder 創建資料夾</span><br><span class=\"line\">mkdir -p folder 如果目錄已存在則不會報錯</span><br><span class=\"line\">mkdir -p Project&#x2F;a&#x2F;src  创建多级目录 mkdir -p</span><br><span class=\"line\">touch  檔名.txt 新增空白檔案</span><br><span class=\"line\">ls 列出 -a 含隱藏檔案</span><br><span class=\"line\">cd 進入</span><br><span class=\"line\">cat filename 直接檢視檔案內容</span><br></pre></td></tr></table></figure>\n<h4 id=\"檔案文件權限查看\"><a href=\"#檔案文件權限查看\" class=\"headerlink\" title=\"檔案文件權限查看\"></a>檔案文件權限查看</h4><ul>\n<li>ls -l <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-l 參數可以顯示檔案與目錄的詳細資訊。</span><br><span class=\"line\">-h 參數可以讓輸出的資訊以比較容易閱讀的格式呈現。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>-rwxr-xr-x 意思<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一位表示文件的類型，-爲文件，d爲目錄</span><br><span class=\"line\">之後每三位代表即用戶、組用戶、其他用戶</span><br><span class=\"line\">其中r表示讀、w表示寫、x表示可執行-表示沒有權限</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>Linux 系统中采用三位十进制数表示权限，如0755， 0644.</li>\n<li>一般赋予目录0755权限，文件0644权限。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">0755</span><br><span class=\"line\">ABCD</span><br><span class=\"line\">A- 0， 表示十进制</span><br><span class=\"line\">B－用户</span><br><span class=\"line\">C－组用户</span><br><span class=\"line\">D－其他用户</span><br><span class=\"line\"> </span><br><span class=\"line\">---  -&gt; 0   (no excute , no write ,no read)</span><br><span class=\"line\">--x  -&gt; 1   excute, (no write, no read)</span><br><span class=\"line\">-w-  -&gt; 2   write </span><br><span class=\"line\">-wx  -&gt; 3   write, excute</span><br><span class=\"line\">r--  -&gt; 4   read</span><br><span class=\"line\">r-x  -&gt; 5   read, excute</span><br><span class=\"line\">rw-  -&gt; 6   read, write , </span><br><span class=\"line\">rwx  -&gt; 7   read, write , excute</span><br><span class=\"line\"> </span><br><span class=\"line\">0755-&gt;即用户具有读&#x2F;写&#x2F;执行权限，组用户和其它用户具有读写权限；</span><br><span class=\"line\">0644-&gt;即用户具有读写权限，组用户和其它用户具有只读权限；</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nRef: <a href=\"https://blog.gtwang.org/linux/linux-ls-command-tutorial/\">ls 參數說明</a></li>\n</ul>\n<h4 id=\"vi-文書處理軟體\"><a href=\"#vi-文書處理軟體\" class=\"headerlink\" title=\"vi 文書處理軟體\"></a>vi 文書處理軟體</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi test.txt</span><br><span class=\"line\">&#x2F;&#x2F;輸入i進入編輯模式</span><br><span class=\"line\">&#x2F;&#x2F;按下ESC回到一般模式</span><br><span class=\"line\">:wq</span><br><span class=\"line\">存檔</span><br><span class=\"line\">:q!</span><br><span class=\"line\">不存檔離開</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://linux.vbird.org/linux_basic/0310vi/0310vi.php\">http://linux.vbird.org/linux_basic/0310vi/0310vi.php</a></p>\n<h4 id=\"刪除\"><a href=\"#刪除\" class=\"headerlink\" title=\"刪除\"></a>刪除</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rm filename</span><br><span class=\"line\">rm -r dirname&#x2F;</span><br><span class=\"line\">要刪除目錄, 需要加入 -r 代表 recursive 遞迴刪除, </span><br><span class=\"line\">使用時要格外小心, 會把目錄內所有檔案及目錄一同刪除．</span><br><span class=\"line\">-f：force&#x3D;&gt;強制，不會出現警告訊息，會自動忽略不存在的檔案。</span><br><span class=\"line\">$ rm -r dirname&#x2F;  刪除空目錄,內有檔案或副目錄便不能刪除</span><br><span class=\"line\">各發行版為了安全起見,強制刪除整個根目錄會不能生效，如果真的想刪請見參考用法：</span><br><span class=\"line\">Ref:</span><br><span class=\"line\">https:&#x2F;&#x2F;www.opencli.com&#x2F;linux&#x2F;rm-delete-files-directory-command</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查看檔案大小\"><a href=\"#查看檔案大小\" class=\"headerlink\" title=\"查看檔案大小\"></a>查看檔案大小</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">du &quot;File&quot;</span><br><span class=\"line\">du --block-size&#x3D;1G &quot;File&quot;  後面不加檔案則是當前目錄</span><br><span class=\"line\">-s, --summarize 只顯示總計</span><br><span class=\"line\">-h, --human-readable 以 K, M, G 為計量單位</span><br><span class=\"line\">du -shc &#x2F;ftp&#x2F;*</span><br><span class=\"line\">https:&#x2F;&#x2F;clay-atlas.com&#x2F;blog&#x2F;2020&#x2F;01&#x2F;11&#x2F;linux-chinese-tutorial-command-du-check-file-size&#x2F;</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.xuite.net&#x2F;cadmus.lin&#x2F;yo&#x2F;39567921</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"tar\"><a href=\"#tar\" class=\"headerlink\" title=\"tar\"></a>tar</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">壓縮</span><br><span class=\"line\">tar zcvf FileName.tar.gz</span><br><span class=\"line\">-z  ：透過 gzip  的支援進行壓縮&#x2F;解壓縮：此時檔名最好為 *.tar.gz</span><br><span class=\"line\">-c  ：建立打包檔案，可搭配 -v 來察看過程中被打包的檔名(filename)</span><br><span class=\"line\">-f filename：-f 後面要立刻接要被處理的檔名</span><br><span class=\"line\"></span><br><span class=\"line\">解壓縮</span><br><span class=\"line\">tar zxvf FileName.tar.gz -C &#x2F;xxx&#x2F;xxx</span><br><span class=\"line\">-x  ：解打包或解壓縮的功能，可以搭配 -C (大寫) 在特定目錄解開</span><br></pre></td></tr></table></figure>\n\n\n\n\n<hr>\n<h4 id=\"wget\"><a href=\"#wget\" class=\"headerlink\" title=\"wget\"></a>wget</h4><p>wget 是 linux 中除了 curl 外另一個檔案下載的好用工具。<br>若要下載網路上的檔案，可執行 wget 加上檔案的網址即可立即下載，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http:&#x2F;&#x2F;xxxx&#x2F;xxxxx.tar.gz &#x2F;&#x2F;也支援ftp:&#x2F;&#x2F;協定</span><br><span class=\"line\">-c &#x2F;&#x2F;檔案續傳，如果下載大型檔案中途斷線，-c 參數從上次中斷的地方繼續下載</span><br><span class=\"line\">-i urls.txt &#x2F;&#x2F;如果要下載的檔案非常多，可以將網址放進txt裡</span><br><span class=\"line\"></span><br><span class=\"line\">more:</span><br><span class=\"line\">https:&#x2F;&#x2F;blog.gtwang.org&#x2F;linux&#x2F;linux-wget-command-download-web-pages-and-files-tutorial-examples&#x2F;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Ubuntu內建的apt-get指令來完成更新\"><a href=\"#Ubuntu內建的apt-get指令來完成更新\" class=\"headerlink\" title=\"Ubuntu內建的apt-get指令來完成更新\"></a>Ubuntu內建的apt-get指令來完成更新</h4><p>Update the package list first:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br></pre></td></tr></table></figure>\n<h4 id=\"sshpass\"><a href=\"#sshpass\" class=\"headerlink\" title=\"sshpass\"></a>sshpass</h4><ul>\n<li>安裝sshpass<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get install sshpass</span><br></pre></td></tr></table></figure></li>\n<li> 使用 scp 與 sshpass 即可複製檔案至遠端 SSH 伺服器.<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ sshpass -p [使用者密碼] scp -v [本地檔案路徑] [使用者帳號]@[遠端 SSH 伺服器 IP 位址]:[遠端 SSH Server 目錄]</span><br></pre></td></tr></table></figure>\nRef:<br>How to install sshpass on ubuntu?<br><a href=\"https://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu\">https://www.codeproject.com/Questions/1179693/How-to-install-sshpass-on-ubuntu</a><br>SSH 檔案傳輸<br><a href=\"https://artistehsu.pixnet.net/blog/post/257353906\">https://artistehsu.pixnet.net/blog/post/257353906</a></li>\n</ul>\n<hr>\n<p>更多參考，待讀<br><a href=\"https://www.slideshare.net/ssuser6090c0/linux-linux-cli\">看似比較簡單的Linux推坑教學 Linux CLI 基本教學</a></p>\n"},{"title":"[監控]使用Prometheus+Grafana監控效能","date":"2021-04-28T12:20:29.000Z","_content":"\n>使用Prometheus+Grafana監控效能 \n\n\n\n\n## 介紹\n\n### Prometheus\n> 普羅米修斯是開源的免費應用程序。可以很容易建立不同維度的 metrics及資訊視覺化圖表的監控與查詢，也有告警設定，Kubernetes的核心組件也可以找到它的身影，許多知名公司如：Uber也有導入。\n\n### Grafana\n> Grafana是一個跨平台、開源的資料視覺化網路應用程式平台。使用者組態連接的資料來源之後，Grafana可以在網路瀏覽器里顯示資料圖表和警告。該軟體的企業版本提供更多的擴充功能。擴充功能通過外掛程式的形式提供，終端使用者可以自訂自己的資料面板介面以及資料請求方式。Grafana被廣泛使用，包括維基百科專案。\n\n\n<!--more-->\n\n## 必備安裝與設定\n\n### 下載Prometheus\n\n下載網址https://prometheus.io/download/\n\n個人是用windows 所以下載的是zip檔，\n內含prometheus.exe執行程式與prometheus.yml設定檔。\n點擊prometheus.exe 啟動預設9090port，即可查看http://localhost:9090/已運作。\n如欲更改port\n```\n//start.bat \nprometheus.exe  --web.listen-address=:9999\ncmd\n```\n但這時並未監控任何程式，待後面範例會用到，可先關閉。\n\n### 下載grafana\n\n下載網址 https://grafana.com/grafana/download\n個人是docker啟動\n```\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n即可開啟http://localhost:3000/ 預設帳號密碼：admin\n\n#### 設定 grafana連結prometheus\n進入後尋找data sources->設定連接prometheus\n新增Url:http://localhost:9999 Access:Browser，Save & Test確認連接\n目前還沒有設定圖表，僅先設定待用。\n\n--- \n\n## 監控windows電腦CPU/Network/Memory\n\n### 1.windows_exporter 用來監控windows\n下載地址： https://github.com/martinlindhe/wmi_exporter/releases\n下載MSI，下載後在需要監控的目標主機上雙擊執行安裝，安裝完成後會以服務的形式自動執行，預設監聽9182埠。\n\n如須關閉可以在電腦中服務找到windows_exporter關閉之。\n\n其他[Node Exporter Full by Instance ID](https://grafana.com/grafana/dashboards/10204)\n\n### 2.修改prometheus.yml\n```\n  - job_name: 'windows_exporter'\n    static_configs:\n    - targets: ['localhost:9182']\n      labels:\n        instance: Windows\n```\n\n### 3.於grafana 新增圖表\n於[grafana的網站上搜尋做好的圖表](https://grafana.com/grafana/dashboards)，這邊有找到兩種：\n- [windows_exporter for Prometheus Dashboard](https://grafana.com/grafana/dashboards/13466/)\n- [Windows Node (fixed for v0.13.0+)](https://grafana.com/grafana/dashboards/12422)\n就可以監控了\n\n<img src=\"/images/post/grafanaWin.png\" width=\"500px\"/>\n\n---\n\n## 監控Go程式效能\n### 1.在Go程式代碼中加入監控代碼\n\nex: [GIN的prometheus用法]( https://stackoverflow.com/questions/65608610/how-to-use-gin-as-a-server-to-write-prometheus-exporter-metrics)\n```diff\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n+\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n+\tStartMonitoring(\"0.0.0.0:8000\")\n\tselect {}\n}\nfunc StartMonitoring(port string) {\n\tvar p string\n\tif port == \"\" {\n\t\tp = \":8080\"\n\t} else {\n\t\tp = port\n\t}\n\tgo func() {\n\t\tlog.Println(\"Listening on\", p)\n+\thttp.Handle(\"/metrics\", promhttp.Handler())\n\t\tlog.Fatal(http.ListenAndServe(p, nil))\n\t}()\n}\n+ func prometheusHandler() gin.HandlerFunc {\n\th := promhttp.Handler()\n\n\treturn func(c *gin.Context) {\n\t\th.ServeHTTP(c.Writer, c.Request)\n\t}\n}\n```\n已開啟一個listen 8000的程式\n\n\n### 2. 編輯prometheus.yml，\n把監控的web服務localhost:8000加入，這邊可以編輯多組。\n```yaml\n  - job_name: 'prometheus'\n\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n\n    static_configs:\n    - targets: ['localhost:8000','localhost:8011']\n    \n```\n\n### 3. 啟動\n\n這時可以打開localhost:9999就可以看到Prometheus的簡易歷史圖表記錄了。\nmetrics available for this monitor [prometheus-go](https://docs.signalfx.com/en/latest/integrations/agent/monitors/prometheus-go.html)\n\n\n\n\n### 4. import Go Metrics 圖表\n於[grafana的網站上搜尋做好的圖表](https://grafana.com/grafana/dashboards)\n- 例如可以套入這個[Go Metrics](https://grafana.com/grafana/dashboards/10826) 範例\n\n\n\n-------------------\n\n\n##  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [Prometheus（二）：Prometheus 監控Windows機器](https://www.mdeditor.tw/pl/pghx/zh-tw)\n- [Promethus叢集部署筆記：（四）安裝並配置windows_exporter\n](https://www.mdeditor.tw/pl/gmMw/zh-tw)\n- [使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統](https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/)\n[Grafana | 將資料視覺化？簡易的介紹與操作！](https://ab20803.medium.com/grafana-%E5%B0%87%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-%E7%B0%A1%E6%98%93%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%93%8D%E4%BD%9C-4af05a0f4d8c)\n","source":"_posts/monitor-promethus-grafana.md","raw":"---\ntitle: \"[監控]使用Prometheus+Grafana監控效能\"\ntags:\n  - Prometheus\n  - Grafana\n  - monitor\ncategories:\n  - Tech.\n  - back-end\n  - monitor\ndate: 2021-04-28 20:20:29\n---\n\n>使用Prometheus+Grafana監控效能 \n\n\n\n\n## 介紹\n\n### Prometheus\n> 普羅米修斯是開源的免費應用程序。可以很容易建立不同維度的 metrics及資訊視覺化圖表的監控與查詢，也有告警設定，Kubernetes的核心組件也可以找到它的身影，許多知名公司如：Uber也有導入。\n\n### Grafana\n> Grafana是一個跨平台、開源的資料視覺化網路應用程式平台。使用者組態連接的資料來源之後，Grafana可以在網路瀏覽器里顯示資料圖表和警告。該軟體的企業版本提供更多的擴充功能。擴充功能通過外掛程式的形式提供，終端使用者可以自訂自己的資料面板介面以及資料請求方式。Grafana被廣泛使用，包括維基百科專案。\n\n\n<!--more-->\n\n## 必備安裝與設定\n\n### 下載Prometheus\n\n下載網址https://prometheus.io/download/\n\n個人是用windows 所以下載的是zip檔，\n內含prometheus.exe執行程式與prometheus.yml設定檔。\n點擊prometheus.exe 啟動預設9090port，即可查看http://localhost:9090/已運作。\n如欲更改port\n```\n//start.bat \nprometheus.exe  --web.listen-address=:9999\ncmd\n```\n但這時並未監控任何程式，待後面範例會用到，可先關閉。\n\n### 下載grafana\n\n下載網址 https://grafana.com/grafana/download\n個人是docker啟動\n```\ndocker run -d --name=grafana -p 3000:3000 grafana/grafana\n```\n即可開啟http://localhost:3000/ 預設帳號密碼：admin\n\n#### 設定 grafana連結prometheus\n進入後尋找data sources->設定連接prometheus\n新增Url:http://localhost:9999 Access:Browser，Save & Test確認連接\n目前還沒有設定圖表，僅先設定待用。\n\n--- \n\n## 監控windows電腦CPU/Network/Memory\n\n### 1.windows_exporter 用來監控windows\n下載地址： https://github.com/martinlindhe/wmi_exporter/releases\n下載MSI，下載後在需要監控的目標主機上雙擊執行安裝，安裝完成後會以服務的形式自動執行，預設監聽9182埠。\n\n如須關閉可以在電腦中服務找到windows_exporter關閉之。\n\n其他[Node Exporter Full by Instance ID](https://grafana.com/grafana/dashboards/10204)\n\n### 2.修改prometheus.yml\n```\n  - job_name: 'windows_exporter'\n    static_configs:\n    - targets: ['localhost:9182']\n      labels:\n        instance: Windows\n```\n\n### 3.於grafana 新增圖表\n於[grafana的網站上搜尋做好的圖表](https://grafana.com/grafana/dashboards)，這邊有找到兩種：\n- [windows_exporter for Prometheus Dashboard](https://grafana.com/grafana/dashboards/13466/)\n- [Windows Node (fixed for v0.13.0+)](https://grafana.com/grafana/dashboards/12422)\n就可以監控了\n\n<img src=\"/images/post/grafanaWin.png\" width=\"500px\"/>\n\n---\n\n## 監控Go程式效能\n### 1.在Go程式代碼中加入監控代碼\n\nex: [GIN的prometheus用法]( https://stackoverflow.com/questions/65608610/how-to-use-gin-as-a-server-to-write-prometheus-exporter-metrics)\n```diff\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"github.com/gin-gonic/gin\"\n+\t\"github.com/prometheus/client_golang/prometheus/promhttp\"\n)\nfunc main() {\n+\tStartMonitoring(\"0.0.0.0:8000\")\n\tselect {}\n}\nfunc StartMonitoring(port string) {\n\tvar p string\n\tif port == \"\" {\n\t\tp = \":8080\"\n\t} else {\n\t\tp = port\n\t}\n\tgo func() {\n\t\tlog.Println(\"Listening on\", p)\n+\thttp.Handle(\"/metrics\", promhttp.Handler())\n\t\tlog.Fatal(http.ListenAndServe(p, nil))\n\t}()\n}\n+ func prometheusHandler() gin.HandlerFunc {\n\th := promhttp.Handler()\n\n\treturn func(c *gin.Context) {\n\t\th.ServeHTTP(c.Writer, c.Request)\n\t}\n}\n```\n已開啟一個listen 8000的程式\n\n\n### 2. 編輯prometheus.yml，\n把監控的web服務localhost:8000加入，這邊可以編輯多組。\n```yaml\n  - job_name: 'prometheus'\n\n    # metrics_path defaults to '/metrics'\n    # scheme defaults to 'http'.\n\n    static_configs:\n    - targets: ['localhost:8000','localhost:8011']\n    \n```\n\n### 3. 啟動\n\n這時可以打開localhost:9999就可以看到Prometheus的簡易歷史圖表記錄了。\nmetrics available for this monitor [prometheus-go](https://docs.signalfx.com/en/latest/integrations/agent/monitors/prometheus-go.html)\n\n\n\n\n### 4. import Go Metrics 圖表\n於[grafana的網站上搜尋做好的圖表](https://grafana.com/grafana/dashboards)\n- 例如可以套入這個[Go Metrics](https://grafana.com/grafana/dashboards/10826) 範例\n\n\n\n-------------------\n\n\n##  網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span>\n- [Prometheus（二）：Prometheus 監控Windows機器](https://www.mdeditor.tw/pl/pghx/zh-tw)\n- [Promethus叢集部署筆記：（四）安裝並配置windows_exporter\n](https://www.mdeditor.tw/pl/gmMw/zh-tw)\n- [使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統](https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/)\n[Grafana | 將資料視覺化？簡易的介紹與操作！](https://ab20803.medium.com/grafana-%E5%B0%87%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-%E7%B0%A1%E6%98%93%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%93%8D%E4%BD%9C-4af05a0f4d8c)\n","slug":"monitor-promethus-grafana","published":1,"updated":"2023-01-22T07:05:18.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbb002ekp2xgsvoa4nn","content":"<blockquote>\n<p>使用Prometheus+Grafana監控效能 </p>\n</blockquote>\n<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><h3 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h3><blockquote>\n<p>普羅米修斯是開源的免費應用程序。可以很容易建立不同維度的 metrics及資訊視覺化圖表的監控與查詢，也有告警設定，Kubernetes的核心組件也可以找到它的身影，許多知名公司如：Uber也有導入。</p>\n</blockquote>\n<h3 id=\"Grafana\"><a href=\"#Grafana\" class=\"headerlink\" title=\"Grafana\"></a>Grafana</h3><blockquote>\n<p>Grafana是一個跨平台、開源的資料視覺化網路應用程式平台。使用者組態連接的資料來源之後，Grafana可以在網路瀏覽器里顯示資料圖表和警告。該軟體的企業版本提供更多的擴充功能。擴充功能通過外掛程式的形式提供，終端使用者可以自訂自己的資料面板介面以及資料請求方式。Grafana被廣泛使用，包括維基百科專案。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"必備安裝與設定\"><a href=\"#必備安裝與設定\" class=\"headerlink\" title=\"必備安裝與設定\"></a>必備安裝與設定</h2><h3 id=\"下載Prometheus\"><a href=\"#下載Prometheus\" class=\"headerlink\" title=\"下載Prometheus\"></a>下載Prometheus</h3><p>下載網址<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n<p>個人是用windows 所以下載的是zip檔，<br>內含prometheus.exe執行程式與prometheus.yml設定檔。<br>點擊prometheus.exe 啟動預設9090port，即可查看<a href=\"http://localhost:9090/%E5%B7%B2%E9%81%8B%E4%BD%9C%E3%80%82\">http://localhost:9090/已運作。</a><br>如欲更改port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;start.bat </span><br><span class=\"line\">prometheus.exe  --web.listen-address&#x3D;:9999</span><br><span class=\"line\">cmd</span><br></pre></td></tr></table></figure>\n<p>但這時並未監控任何程式，待後面範例會用到，可先關閉。</p>\n<h3 id=\"下載grafana\"><a href=\"#下載grafana\" class=\"headerlink\" title=\"下載grafana\"></a>下載grafana</h3><p>下載網址 <a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a><br>個人是docker啟動</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name&#x3D;grafana -p 3000:3000 grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<p>即可開啟<a href=\"http://localhost:3000/\">http://localhost:3000/</a> 預設帳號密碼：admin</p>\n<h4 id=\"設定-grafana連結prometheus\"><a href=\"#設定-grafana連結prometheus\" class=\"headerlink\" title=\"設定 grafana連結prometheus\"></a>設定 grafana連結prometheus</h4><p>進入後尋找data sources-&gt;設定連接prometheus<br>新增Url:<a href=\"http://localhost:9999/\">http://localhost:9999</a> Access:Browser，Save &amp; Test確認連接<br>目前還沒有設定圖表，僅先設定待用。</p>\n<hr>\n<h2 id=\"監控windows電腦CPU-Network-Memory\"><a href=\"#監控windows電腦CPU-Network-Memory\" class=\"headerlink\" title=\"監控windows電腦CPU/Network/Memory\"></a>監控windows電腦CPU/Network/Memory</h2><h3 id=\"1-windows-exporter-用來監控windows\"><a href=\"#1-windows-exporter-用來監控windows\" class=\"headerlink\" title=\"1.windows_exporter 用來監控windows\"></a>1.windows_exporter 用來監控windows</h3><p>下載地址： <a href=\"https://github.com/martinlindhe/wmi_exporter/releases\">https://github.com/martinlindhe/wmi_exporter/releases</a><br>下載MSI，下載後在需要監控的目標主機上雙擊執行安裝，安裝完成後會以服務的形式自動執行，預設監聽9182埠。</p>\n<p>如須關閉可以在電腦中服務找到windows_exporter關閉之。</p>\n<p>其他<a href=\"https://grafana.com/grafana/dashboards/10204\">Node Exporter Full by Instance ID</a></p>\n<h3 id=\"2-修改prometheus-yml\"><a href=\"#2-修改prometheus-yml\" class=\"headerlink\" title=\"2.修改prometheus.yml\"></a>2.修改prometheus.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- job_name: &#39;windows_exporter&#39;</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets: [&#39;localhost:9182&#39;]</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      instance: Windows</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-於grafana-新增圖表\"><a href=\"#3-於grafana-新增圖表\" class=\"headerlink\" title=\"3.於grafana 新增圖表\"></a>3.於grafana 新增圖表</h3><p>於<a href=\"https://grafana.com/grafana/dashboards\">grafana的網站上搜尋做好的圖表</a>，這邊有找到兩種：</p>\n<ul>\n<li><a href=\"https://grafana.com/grafana/dashboards/13466/\">windows_exporter for Prometheus Dashboard</a></li>\n<li><a href=\"https://grafana.com/grafana/dashboards/12422\">Windows Node (fixed for v0.13.0+)</a><br>就可以監控了</li>\n</ul>\n<img src=\"/images/post/grafanaWin.png\" width=\"500px\">\n\n<hr>\n<h2 id=\"監控Go程式效能\"><a href=\"#監控Go程式效能\" class=\"headerlink\" title=\"監控Go程式效能\"></a>監控Go程式效能</h2><h3 id=\"1-在Go程式代碼中加入監控代碼\"><a href=\"#1-在Go程式代碼中加入監控代碼\" class=\"headerlink\" title=\"1.在Go程式代碼中加入監控代碼\"></a>1.在Go程式代碼中加入監控代碼</h3><p>ex: <a href=\"https://stackoverflow.com/questions/65608610/how-to-use-gin-as-a-server-to-write-prometheus-exporter-metrics\">GIN的prometheus用法</a></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\">\t&quot;github.com/gin-gonic/gin&quot;</span><br><span class=\"line\"><span class=\"addition\">+\t&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"><span class=\"addition\">+\tStartMonitoring(&quot;0.0.0.0:8000&quot;)</span></span><br><span class=\"line\">\tselect &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func StartMonitoring(port string) &#123;</span><br><span class=\"line\">\tvar p string</span><br><span class=\"line\">\tif port == &quot;&quot; &#123;</span><br><span class=\"line\">\t\tp = &quot;:8080&quot;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tp = port</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tlog.Println(&quot;Listening on&quot;, p)</span><br><span class=\"line\"><span class=\"addition\">+\thttp.Handle(&quot;/metrics&quot;, promhttp.Handler())</span></span><br><span class=\"line\">\t\tlog.Fatal(http.ListenAndServe(p, nil))</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"addition\">+ func prometheusHandler() gin.HandlerFunc &#123;</span></span><br><span class=\"line\">\th := promhttp.Handler()</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn func(c *gin.Context) &#123;</span><br><span class=\"line\">\t\th.ServeHTTP(c.Writer, c.Request)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>已開啟一個listen 8000的程式</p>\n<h3 id=\"2-編輯prometheus-yml，\"><a href=\"#2-編輯prometheus-yml，\" class=\"headerlink\" title=\"2. 編輯prometheus.yml，\"></a>2. 編輯prometheus.yml，</h3><p>把監控的web服務localhost:8000加入，這邊可以編輯多組。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;prometheus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:8000&#x27;</span>,<span class=\"string\">&#x27;localhost:8011&#x27;</span>]</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-啟動\"><a href=\"#3-啟動\" class=\"headerlink\" title=\"3. 啟動\"></a>3. 啟動</h3><p>這時可以打開localhost:9999就可以看到Prometheus的簡易歷史圖表記錄了。<br>metrics available for this monitor <a href=\"https://docs.signalfx.com/en/latest/integrations/agent/monitors/prometheus-go.html\">prometheus-go</a></p>\n<h3 id=\"4-import-Go-Metrics-圖表\"><a href=\"#4-import-Go-Metrics-圖表\" class=\"headerlink\" title=\"4. import Go Metrics 圖表\"></a>4. import Go Metrics 圖表</h3><p>於<a href=\"https://grafana.com/grafana/dashboards\">grafana的網站上搜尋做好的圖表</a></p>\n<ul>\n<li>例如可以套入這個<a href=\"https://grafana.com/grafana/dashboards/10826\">Go Metrics</a> 範例</li>\n</ul>\n<hr>\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.mdeditor.tw/pl/pghx/zh-tw\">Prometheus（二）：Prometheus 監控Windows機器</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/gmMw/zh-tw\">Promethus叢集部署筆記：（四）安裝並配置windows_exporter\n</a></li>\n<li><a href=\"https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/\">使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統</a><br><a href=\"https://ab20803.medium.com/grafana-%E5%B0%87%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-%E7%B0%A1%E6%98%93%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%93%8D%E4%BD%9C-4af05a0f4d8c\">Grafana | 將資料視覺化？簡易的介紹與操作！</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>使用Prometheus+Grafana監控效能 </p>\n</blockquote>\n<h2 id=\"介紹\"><a href=\"#介紹\" class=\"headerlink\" title=\"介紹\"></a>介紹</h2><h3 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h3><blockquote>\n<p>普羅米修斯是開源的免費應用程序。可以很容易建立不同維度的 metrics及資訊視覺化圖表的監控與查詢，也有告警設定，Kubernetes的核心組件也可以找到它的身影，許多知名公司如：Uber也有導入。</p>\n</blockquote>\n<h3 id=\"Grafana\"><a href=\"#Grafana\" class=\"headerlink\" title=\"Grafana\"></a>Grafana</h3><blockquote>\n<p>Grafana是一個跨平台、開源的資料視覺化網路應用程式平台。使用者組態連接的資料來源之後，Grafana可以在網路瀏覽器里顯示資料圖表和警告。該軟體的企業版本提供更多的擴充功能。擴充功能通過外掛程式的形式提供，終端使用者可以自訂自己的資料面板介面以及資料請求方式。Grafana被廣泛使用，包括維基百科專案。</p>\n</blockquote>","more":"<h2 id=\"必備安裝與設定\"><a href=\"#必備安裝與設定\" class=\"headerlink\" title=\"必備安裝與設定\"></a>必備安裝與設定</h2><h3 id=\"下載Prometheus\"><a href=\"#下載Prometheus\" class=\"headerlink\" title=\"下載Prometheus\"></a>下載Prometheus</h3><p>下載網址<a href=\"https://prometheus.io/download/\">https://prometheus.io/download/</a></p>\n<p>個人是用windows 所以下載的是zip檔，<br>內含prometheus.exe執行程式與prometheus.yml設定檔。<br>點擊prometheus.exe 啟動預設9090port，即可查看<a href=\"http://localhost:9090/%E5%B7%B2%E9%81%8B%E4%BD%9C%E3%80%82\">http://localhost:9090/已運作。</a><br>如欲更改port</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;start.bat </span><br><span class=\"line\">prometheus.exe  --web.listen-address&#x3D;:9999</span><br><span class=\"line\">cmd</span><br></pre></td></tr></table></figure>\n<p>但這時並未監控任何程式，待後面範例會用到，可先關閉。</p>\n<h3 id=\"下載grafana\"><a href=\"#下載grafana\" class=\"headerlink\" title=\"下載grafana\"></a>下載grafana</h3><p>下載網址 <a href=\"https://grafana.com/grafana/download\">https://grafana.com/grafana/download</a><br>個人是docker啟動</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d --name&#x3D;grafana -p 3000:3000 grafana&#x2F;grafana</span><br></pre></td></tr></table></figure>\n<p>即可開啟<a href=\"http://localhost:3000/\">http://localhost:3000/</a> 預設帳號密碼：admin</p>\n<h4 id=\"設定-grafana連結prometheus\"><a href=\"#設定-grafana連結prometheus\" class=\"headerlink\" title=\"設定 grafana連結prometheus\"></a>設定 grafana連結prometheus</h4><p>進入後尋找data sources-&gt;設定連接prometheus<br>新增Url:<a href=\"http://localhost:9999/\">http://localhost:9999</a> Access:Browser，Save &amp; Test確認連接<br>目前還沒有設定圖表，僅先設定待用。</p>\n<hr>\n<h2 id=\"監控windows電腦CPU-Network-Memory\"><a href=\"#監控windows電腦CPU-Network-Memory\" class=\"headerlink\" title=\"監控windows電腦CPU/Network/Memory\"></a>監控windows電腦CPU/Network/Memory</h2><h3 id=\"1-windows-exporter-用來監控windows\"><a href=\"#1-windows-exporter-用來監控windows\" class=\"headerlink\" title=\"1.windows_exporter 用來監控windows\"></a>1.windows_exporter 用來監控windows</h3><p>下載地址： <a href=\"https://github.com/martinlindhe/wmi_exporter/releases\">https://github.com/martinlindhe/wmi_exporter/releases</a><br>下載MSI，下載後在需要監控的目標主機上雙擊執行安裝，安裝完成後會以服務的形式自動執行，預設監聽9182埠。</p>\n<p>如須關閉可以在電腦中服務找到windows_exporter關閉之。</p>\n<p>其他<a href=\"https://grafana.com/grafana/dashboards/10204\">Node Exporter Full by Instance ID</a></p>\n<h3 id=\"2-修改prometheus-yml\"><a href=\"#2-修改prometheus-yml\" class=\"headerlink\" title=\"2.修改prometheus.yml\"></a>2.修改prometheus.yml</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- job_name: &#39;windows_exporter&#39;</span><br><span class=\"line\">  static_configs:</span><br><span class=\"line\">  - targets: [&#39;localhost:9182&#39;]</span><br><span class=\"line\">    labels:</span><br><span class=\"line\">      instance: Windows</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-於grafana-新增圖表\"><a href=\"#3-於grafana-新增圖表\" class=\"headerlink\" title=\"3.於grafana 新增圖表\"></a>3.於grafana 新增圖表</h3><p>於<a href=\"https://grafana.com/grafana/dashboards\">grafana的網站上搜尋做好的圖表</a>，這邊有找到兩種：</p>\n<ul>\n<li><a href=\"https://grafana.com/grafana/dashboards/13466/\">windows_exporter for Prometheus Dashboard</a></li>\n<li><a href=\"https://grafana.com/grafana/dashboards/12422\">Windows Node (fixed for v0.13.0+)</a><br>就可以監控了</li>\n</ul>\n<img src=\"/images/post/grafanaWin.png\" width=\"500px\">\n\n<hr>\n<h2 id=\"監控Go程式效能\"><a href=\"#監控Go程式效能\" class=\"headerlink\" title=\"監控Go程式效能\"></a>監控Go程式效能</h2><h3 id=\"1-在Go程式代碼中加入監控代碼\"><a href=\"#1-在Go程式代碼中加入監控代碼\" class=\"headerlink\" title=\"1.在Go程式代碼中加入監控代碼\"></a>1.在Go程式代碼中加入監控代碼</h3><p>ex: <a href=\"https://stackoverflow.com/questions/65608610/how-to-use-gin-as-a-server-to-write-prometheus-exporter-metrics\">GIN的prometheus用法</a></p>\n<figure class=\"highlight diff\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import (</span><br><span class=\"line\">\t&quot;log&quot;</span><br><span class=\"line\">\t&quot;net/http&quot;</span><br><span class=\"line\">\t&quot;github.com/gin-gonic/gin&quot;</span><br><span class=\"line\"><span class=\"addition\">+\t&quot;github.com/prometheus/client_golang/prometheus/promhttp&quot;</span></span><br><span class=\"line\">)</span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\"><span class=\"addition\">+\tStartMonitoring(&quot;0.0.0.0:8000&quot;)</span></span><br><span class=\"line\">\tselect &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">func StartMonitoring(port string) &#123;</span><br><span class=\"line\">\tvar p string</span><br><span class=\"line\">\tif port == &quot;&quot; &#123;</span><br><span class=\"line\">\t\tp = &quot;:8080&quot;</span><br><span class=\"line\">\t&#125; else &#123;</span><br><span class=\"line\">\t\tp = port</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tgo func() &#123;</span><br><span class=\"line\">\t\tlog.Println(&quot;Listening on&quot;, p)</span><br><span class=\"line\"><span class=\"addition\">+\thttp.Handle(&quot;/metrics&quot;, promhttp.Handler())</span></span><br><span class=\"line\">\t\tlog.Fatal(http.ListenAndServe(p, nil))</span><br><span class=\"line\">\t&#125;()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"addition\">+ func prometheusHandler() gin.HandlerFunc &#123;</span></span><br><span class=\"line\">\th := promhttp.Handler()</span><br><span class=\"line\"></span><br><span class=\"line\">\treturn func(c *gin.Context) &#123;</span><br><span class=\"line\">\t\th.ServeHTTP(c.Writer, c.Request)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>已開啟一個listen 8000的程式</p>\n<h3 id=\"2-編輯prometheus-yml，\"><a href=\"#2-編輯prometheus-yml，\" class=\"headerlink\" title=\"2. 編輯prometheus.yml，\"></a>2. 編輯prometheus.yml，</h3><p>把監控的web服務localhost:8000加入，這邊可以編輯多組。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"bullet\">-</span> <span class=\"attr\">job_name:</span> <span class=\"string\">&#x27;prometheus&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\"># metrics_path defaults to &#x27;/metrics&#x27;</span></span><br><span class=\"line\">  <span class=\"comment\"># scheme defaults to &#x27;http&#x27;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">static_configs:</span></span><br><span class=\"line\">  <span class=\"bullet\">-</span> <span class=\"attr\">targets:</span> [<span class=\"string\">&#x27;localhost:8000&#x27;</span>,<span class=\"string\">&#x27;localhost:8011&#x27;</span>]</span><br><span class=\"line\">  </span><br></pre></td></tr></table></figure>\n<h3 id=\"3-啟動\"><a href=\"#3-啟動\" class=\"headerlink\" title=\"3. 啟動\"></a>3. 啟動</h3><p>這時可以打開localhost:9999就可以看到Prometheus的簡易歷史圖表記錄了。<br>metrics available for this monitor <a href=\"https://docs.signalfx.com/en/latest/integrations/agent/monitors/prometheus-go.html\">prometheus-go</a></p>\n<h3 id=\"4-import-Go-Metrics-圖表\"><a href=\"#4-import-Go-Metrics-圖表\" class=\"headerlink\" title=\"4. import Go Metrics 圖表\"></a>4. import Go Metrics 圖表</h3><p>於<a href=\"https://grafana.com/grafana/dashboards\">grafana的網站上搜尋做好的圖表</a></p>\n<ul>\n<li>例如可以套入這個<a href=\"https://grafana.com/grafana/dashboards/10826\">Go Metrics</a> 範例</li>\n</ul>\n<hr>\n<h2 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h2><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看以下參考文章了解更多概念👇👇👇</span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://www.mdeditor.tw/pl/pghx/zh-tw\">Prometheus（二）：Prometheus 監控Windows機器</a></li>\n<li><a href=\"https://www.mdeditor.tw/pl/gmMw/zh-tw\">Promethus叢集部署筆記：（四）安裝並配置windows_exporter\n</a></li>\n<li><a href=\"https://blog.techbridge.cc/2019/08/26/how-to-use-prometheus-grafana-in-flask-app/\">使用 Prometheus 和 Grafana 打造 Flask Web App 監控預警系統</a><br><a href=\"https://ab20803.medium.com/grafana-%E5%B0%87%E8%B3%87%E6%96%99%E8%A6%96%E8%A6%BA%E5%8C%96-%E7%B0%A1%E6%98%93%E7%9A%84%E4%BB%8B%E7%B4%B9%E8%88%87%E6%93%8D%E4%BD%9C-4af05a0f4d8c\">Grafana | 將資料視覺化？簡易的介紹與操作！</a></li>\n</ul>"},{"title":"[HTML & CSS][✍ 筆記] 初學 HTML & CSS 與練習","date":"2020-09-15T12:27:29.000Z","_content":"\n[✍ 持續更新]\n\n> 練習CSS & HTML 操作相關筆記．\n\n<!--more-->\n\n## HTML\n\n### Html 基礎\n- HTML 文件 (HTML document) \n- 標籤 (tag)<tagname>...</tagname>包圍著語意 (semantic) 內容(Content)區塊稱作 HTML 元素 (HTML element)，不同標籤表達不同語意\n- 空元素 (Empty Element / Void Element)\n有些 HTML 元素是不允許有內容的，稱之為空元素。沒有結束標籤\n常見包括\n```\n<br>換行 <hr> <img>圖片 <input>輸入 <link> <meta>\n```\n- HTML 標籤中還有屬性 (Attribute)，來提供該標籤的額外資訊\n\n\n### 撰寫規則\n- 屬性值用單引號雙引號都可以\n- 標籤與屬性大小寫都可以，常見且建議是固定使用小寫 (lowercase)。\n- 雙引號間的屬性值不能空白\n什麼是HTML 標籤Tag - HTML 語法教學Tutorial - Fooish 程式技術\nhttps://www.fooish.com/html/tag.html\n\n\n### 語意標籤\nHTML5中新增了語意化標籤(Semantic Elements)，目的是為了讓標籤(Tag)更具意義，以加強文件的結構化，讓搜尋引擎更清楚了解\n```\nHeader 可於body內或是article或是section代表頁首或是首要區塊\nNav 導覽區塊\nMain 主要區塊，整頁只有一個\nArticle 包覆文章\nSection 區塊\nDiv 無意義為包裹區塊排版用\nAside 用來代表主內容的附加內容，未必是側邊欄，廣告等等都可以用\nFooter 頁尾\nTime 時間\nMark 似螢光筆重點\ndetails 文章的細節\nFigure /figcaption區塊 引用與標題\n<hgroup> 當內容有主標題及次標題等多個標題的狀況下使用。\n<cite> 引用其他文獻或作品(例如書籍、歌曲、電影、繪畫、雕塑等）的標題\n\n<String>  粗體相對於<b></b>更有強烈意思\n<i></i>italic(斜體)的字首。em 的完整名稱則是 emphasized(強調/注重)\ns 原文是 strikethrough(刪除線)，del 這個標籤一看就會明白：delete(刪除)。\n```\n好文參考：\n- [快速了解HTML語意化標籤](https://medium.com/@changru.studio/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3html%E8%AA%9E%E6%84%8F%E5%8C%96%E6%A8%99%E7%B1%A4-33dd8247d779)\n\n- [[HTML5]b,i,s 跟 strong,em,del 這些看起來一樣，但意義不同的標籤們](\nhttps://km.nicetypo.com/doc/ead903b94bb8bf01974d3ccdb91a117b)\n\n\n\n## CSS\n\n### 區塊計算 Box Model\n- Box Model 預設 box-sizing: content-box\n  - content 內容 \n  ```\n  width: 寬度值;height: 高度值;\n  ```\n  - padding 內距\n  ```\n  padding:上 右 下 左;　padding:上下 左右;　\n  padding:上 左右 下;　padding:四邊同値;\n  ```\n  - border 邊框\n  ```\n  border: 邊框粗細 邊框顏色 邊框樣式 ;\n  ```\n  - margin 物件與物件間距離\n  ```\n   margin:上 右 下 左;margin:上下 左右;\n   margin:上 左右 下;margin:四邊同値;\n  ```\n- 該物件整體的大小會是content+padding+border，不要以為真的是width; height大小\n- 然後margin是占空間但不可視的地方。\n\n\n<img src=\"/images/post/content-box.png\" width=\"500px\" />\n\n- 可以改變屬性 box-sizing: border-box;\n- 就會幫你把整體物件大小設定為width+height\n- 但這樣表示content內容只有width/height-padding-border(看左右/上下設定多少)\n- 然後margin還是占空間但不可視的地方。\n\n<img src=\"/images/post/border-box.png\" width=\"500px\" />\n\n\n\n範例：可以用開發模式查看它的設定\n<iframe src=\"https://codesandbox.io/embed/box-concept-f37fr-f37fr?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Box concept-f37fr\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n### css reset\n撰寫時會發現元素與視窗有空隙，css reset可以清楚，還有其他一些效果\n\n- React + @emotion/css 套用範例\n```\nimport reset from 'react-style-reset';\nimport { injectGlobal } from '@emotion/css';\ninjectGlobal(reset, {\n});\n```\n\n\n### 排版\n\n\n#### display\n\n##### 隱藏元素\n- display預設為none\n\n```\n display: none; //空間消失\n visibility:hidden //空間仍存在\n\n```\n [w3schools Hide an Element](https://www.w3schools.com/css/css_display_visibility.asp)\n\n##### 區塊元素 \n- display預設為block，區塊元素排列都會另起一行，除非被改變\n- 可設置寬高 width hight\n- 默認情况下，其寬度自動填满其父元素寬度，即寬度100%\n- 高度，行高以及頂和底邊距都可控制；\n\n```\n常見包括 div、p、h1~h6、\nul、ol、li、\ndl、dt、dd、\nform、table、hr、\nblockquote 、\naddress、menu、pre.....等等\n```\n##### 行內元素\n- display預設inline，除非被改變\n- 設置寬高無效，只能由内容撑起来，行內元素會依照物件內容的大小決定占用的版面\n- 行内元素会排列在同一行，直到一行排不下，才會換行，其寬度隨元素的内容而變化。\n- 設置上下margin、padding无效，左右padding 、margin有效\n```\n常見包括\nspan、em、i、b、strong、\na、img、input、br、select、textarea、q、bdo、\nsub、sup...等等\n```\n- 行內不能包含區塊元素\n*可變元素 依上下文決定\n\nRef:https://www.jianshu.com/p/9fa96ece88f1\n\n##### 行內區塊\n- display：inline-block\n- 以inline的方式呈現，但同時擁有block的屬性\n\n\n------\n#### Position\nStatic：默認值，沒有定位。\n##### 固定定位fixed\n- 不管滾軸移動，依然在一樣位置\n- 空間不佔據，會蓋住別人\n- 固定他在原本寫的位置上\n- 有寫上右下左就會定位在視窗頂端的相對位置（非自身）\n- 應用：\n   - 蓋版廣告（左右上下置中 設立五個 為什麼）\n   - 頂置導覽列top0\n   - 回到上面 bottom 0\n\n##### relative\n- 空間會佔據，也會蓋住沒有設定定位的物件\n- 相對於原本的位置上\n- 兩個都有定位物件，後面蓋前面\n- 可以設定z-index 設定優先，預設0\n\n##### absolute\n- 空間不佔據，資料會在原本資料的位置\n- 設定完上下左右它會往有定位的父層找\n- 如果找不到會定位在視窗上，不是body(如果想要定在body上，body需要設定定位，往上還有html,有一點差別 )\n- 應用在不想與人排列的情況，通常父層會用relative,父層想要有排列\n- 應用：\n    - 特賣標籤absolute,父層項目relative\n    - 改版廣告的(X)\n\n----\n#### float\n\n----\n#### Flex\n- 父層設定可以控制子層的排列方式\n<iframe src=\"https://codesandbox.io/embed/flex-base1-xhwn8?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"flex-base1\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n----\n#### 關於置中\n##### margin\n“margin:0 atuo;”所代表的的意思是水平居中，區塊元素的容器水平置中。\n關於\n[margin:0 atuo;”是什么意思？](https://www.html.cn/qa/css3/19856.html)\n[不要告訴我你懂margin](https://fredevangigi.pixnet.net/blog/post/57202532)\n\nＴＢＤ\n1.align-content\n2.延伸設定\n3. default: align-items: stretch; 上下高度自動滿版時有出現空白問題\n\n-----\n\n## 範例版面與物件\n###  互動式視窗 Modal window \n原理：製作一置中視窗，然後先隱藏起來，該位置距離上方可以百分比設定．\n- margin: 15% auto; / 15% from the top and centered /\n  [w3schools=How TO CSS/JS Modal](https://www.w3schools.com/howto/howto_css_modals.asp)\n\n*My React版練習[Add: Model](https://github.com/minilabmemo/counter-water/commit/fd3a285c515fa8cdea8e94a965c6bcd95eff4996)\n\n-----\n### input 欄位\n- 一般的輸入數字框，可以看到預設會有上下箭頭出現\n```\n<input type=\"number\" value=\"5\">\n```\n<input type=\"number\" value=\"5\">\n\n  - 如果要隱藏上下箭頭可以這樣寫：[howto_css_hide_arrow_number](https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp)\n  - css-in-js 版- [Hiding input spinner using styled-component](https://stackoverflow.com/questions/56352294/hiding-input-spinner-using-styled-component)","source":"_posts/note-css-html.md","raw":"---\ntitle: \"[HTML & CSS][✍ 筆記] 初學 HTML & CSS 與練習\"\ntags:\n  - note\n  - css\n  - html\n  - ing\ncategories:\n  - [Tech., Web,front-end,html]\n  - [Tech., Web,front-end,css]\n\ndate: 2020-09-15 20:27:29\n---\n\n[✍ 持續更新]\n\n> 練習CSS & HTML 操作相關筆記．\n\n<!--more-->\n\n## HTML\n\n### Html 基礎\n- HTML 文件 (HTML document) \n- 標籤 (tag)<tagname>...</tagname>包圍著語意 (semantic) 內容(Content)區塊稱作 HTML 元素 (HTML element)，不同標籤表達不同語意\n- 空元素 (Empty Element / Void Element)\n有些 HTML 元素是不允許有內容的，稱之為空元素。沒有結束標籤\n常見包括\n```\n<br>換行 <hr> <img>圖片 <input>輸入 <link> <meta>\n```\n- HTML 標籤中還有屬性 (Attribute)，來提供該標籤的額外資訊\n\n\n### 撰寫規則\n- 屬性值用單引號雙引號都可以\n- 標籤與屬性大小寫都可以，常見且建議是固定使用小寫 (lowercase)。\n- 雙引號間的屬性值不能空白\n什麼是HTML 標籤Tag - HTML 語法教學Tutorial - Fooish 程式技術\nhttps://www.fooish.com/html/tag.html\n\n\n### 語意標籤\nHTML5中新增了語意化標籤(Semantic Elements)，目的是為了讓標籤(Tag)更具意義，以加強文件的結構化，讓搜尋引擎更清楚了解\n```\nHeader 可於body內或是article或是section代表頁首或是首要區塊\nNav 導覽區塊\nMain 主要區塊，整頁只有一個\nArticle 包覆文章\nSection 區塊\nDiv 無意義為包裹區塊排版用\nAside 用來代表主內容的附加內容，未必是側邊欄，廣告等等都可以用\nFooter 頁尾\nTime 時間\nMark 似螢光筆重點\ndetails 文章的細節\nFigure /figcaption區塊 引用與標題\n<hgroup> 當內容有主標題及次標題等多個標題的狀況下使用。\n<cite> 引用其他文獻或作品(例如書籍、歌曲、電影、繪畫、雕塑等）的標題\n\n<String>  粗體相對於<b></b>更有強烈意思\n<i></i>italic(斜體)的字首。em 的完整名稱則是 emphasized(強調/注重)\ns 原文是 strikethrough(刪除線)，del 這個標籤一看就會明白：delete(刪除)。\n```\n好文參考：\n- [快速了解HTML語意化標籤](https://medium.com/@changru.studio/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3html%E8%AA%9E%E6%84%8F%E5%8C%96%E6%A8%99%E7%B1%A4-33dd8247d779)\n\n- [[HTML5]b,i,s 跟 strong,em,del 這些看起來一樣，但意義不同的標籤們](\nhttps://km.nicetypo.com/doc/ead903b94bb8bf01974d3ccdb91a117b)\n\n\n\n## CSS\n\n### 區塊計算 Box Model\n- Box Model 預設 box-sizing: content-box\n  - content 內容 \n  ```\n  width: 寬度值;height: 高度值;\n  ```\n  - padding 內距\n  ```\n  padding:上 右 下 左;　padding:上下 左右;　\n  padding:上 左右 下;　padding:四邊同値;\n  ```\n  - border 邊框\n  ```\n  border: 邊框粗細 邊框顏色 邊框樣式 ;\n  ```\n  - margin 物件與物件間距離\n  ```\n   margin:上 右 下 左;margin:上下 左右;\n   margin:上 左右 下;margin:四邊同値;\n  ```\n- 該物件整體的大小會是content+padding+border，不要以為真的是width; height大小\n- 然後margin是占空間但不可視的地方。\n\n\n<img src=\"/images/post/content-box.png\" width=\"500px\" />\n\n- 可以改變屬性 box-sizing: border-box;\n- 就會幫你把整體物件大小設定為width+height\n- 但這樣表示content內容只有width/height-padding-border(看左右/上下設定多少)\n- 然後margin還是占空間但不可視的地方。\n\n<img src=\"/images/post/border-box.png\" width=\"500px\" />\n\n\n\n範例：可以用開發模式查看它的設定\n<iframe src=\"https://codesandbox.io/embed/box-concept-f37fr-f37fr?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"Box concept-f37fr\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n### css reset\n撰寫時會發現元素與視窗有空隙，css reset可以清楚，還有其他一些效果\n\n- React + @emotion/css 套用範例\n```\nimport reset from 'react-style-reset';\nimport { injectGlobal } from '@emotion/css';\ninjectGlobal(reset, {\n});\n```\n\n\n### 排版\n\n\n#### display\n\n##### 隱藏元素\n- display預設為none\n\n```\n display: none; //空間消失\n visibility:hidden //空間仍存在\n\n```\n [w3schools Hide an Element](https://www.w3schools.com/css/css_display_visibility.asp)\n\n##### 區塊元素 \n- display預設為block，區塊元素排列都會另起一行，除非被改變\n- 可設置寬高 width hight\n- 默認情况下，其寬度自動填满其父元素寬度，即寬度100%\n- 高度，行高以及頂和底邊距都可控制；\n\n```\n常見包括 div、p、h1~h6、\nul、ol、li、\ndl、dt、dd、\nform、table、hr、\nblockquote 、\naddress、menu、pre.....等等\n```\n##### 行內元素\n- display預設inline，除非被改變\n- 設置寬高無效，只能由内容撑起来，行內元素會依照物件內容的大小決定占用的版面\n- 行内元素会排列在同一行，直到一行排不下，才會換行，其寬度隨元素的内容而變化。\n- 設置上下margin、padding无效，左右padding 、margin有效\n```\n常見包括\nspan、em、i、b、strong、\na、img、input、br、select、textarea、q、bdo、\nsub、sup...等等\n```\n- 行內不能包含區塊元素\n*可變元素 依上下文決定\n\nRef:https://www.jianshu.com/p/9fa96ece88f1\n\n##### 行內區塊\n- display：inline-block\n- 以inline的方式呈現，但同時擁有block的屬性\n\n\n------\n#### Position\nStatic：默認值，沒有定位。\n##### 固定定位fixed\n- 不管滾軸移動，依然在一樣位置\n- 空間不佔據，會蓋住別人\n- 固定他在原本寫的位置上\n- 有寫上右下左就會定位在視窗頂端的相對位置（非自身）\n- 應用：\n   - 蓋版廣告（左右上下置中 設立五個 為什麼）\n   - 頂置導覽列top0\n   - 回到上面 bottom 0\n\n##### relative\n- 空間會佔據，也會蓋住沒有設定定位的物件\n- 相對於原本的位置上\n- 兩個都有定位物件，後面蓋前面\n- 可以設定z-index 設定優先，預設0\n\n##### absolute\n- 空間不佔據，資料會在原本資料的位置\n- 設定完上下左右它會往有定位的父層找\n- 如果找不到會定位在視窗上，不是body(如果想要定在body上，body需要設定定位，往上還有html,有一點差別 )\n- 應用在不想與人排列的情況，通常父層會用relative,父層想要有排列\n- 應用：\n    - 特賣標籤absolute,父層項目relative\n    - 改版廣告的(X)\n\n----\n#### float\n\n----\n#### Flex\n- 父層設定可以控制子層的排列方式\n<iframe src=\"https://codesandbox.io/embed/flex-base1-xhwn8?fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"flex-base1\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n----\n#### 關於置中\n##### margin\n“margin:0 atuo;”所代表的的意思是水平居中，區塊元素的容器水平置中。\n關於\n[margin:0 atuo;”是什么意思？](https://www.html.cn/qa/css3/19856.html)\n[不要告訴我你懂margin](https://fredevangigi.pixnet.net/blog/post/57202532)\n\nＴＢＤ\n1.align-content\n2.延伸設定\n3. default: align-items: stretch; 上下高度自動滿版時有出現空白問題\n\n-----\n\n## 範例版面與物件\n###  互動式視窗 Modal window \n原理：製作一置中視窗，然後先隱藏起來，該位置距離上方可以百分比設定．\n- margin: 15% auto; / 15% from the top and centered /\n  [w3schools=How TO CSS/JS Modal](https://www.w3schools.com/howto/howto_css_modals.asp)\n\n*My React版練習[Add: Model](https://github.com/minilabmemo/counter-water/commit/fd3a285c515fa8cdea8e94a965c6bcd95eff4996)\n\n-----\n### input 欄位\n- 一般的輸入數字框，可以看到預設會有上下箭頭出現\n```\n<input type=\"number\" value=\"5\">\n```\n<input type=\"number\" value=\"5\">\n\n  - 如果要隱藏上下箭頭可以這樣寫：[howto_css_hide_arrow_number](https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp)\n  - css-in-js 版- [Hiding input spinner using styled-component](https://stackoverflow.com/questions/56352294/hiding-input-spinner-using-styled-component)","slug":"note-css-html","published":1,"updated":"2022-09-09T03:11:26.136Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbc002ikp2x6v4agnpm","content":"<p>[✍ 持續更新]</p>\n<blockquote>\n<p>練習CSS &amp; HTML 操作相關筆記．</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Html-基礎\"><a href=\"#Html-基礎\" class=\"headerlink\" title=\"Html 基礎\"></a>Html 基礎</h3><ul>\n<li>HTML 文件 (HTML document) </li>\n<li>標籤 (tag)<tagname>…</tagname>包圍著語意 (semantic) 內容(Content)區塊稱作 HTML 元素 (HTML element)，不同標籤表達不同語意</li>\n<li>空元素 (Empty Element / Void Element)<br>有些 HTML 元素是不允許有內容的，稱之為空元素。沒有結束標籤<br>常見包括<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;換行 &lt;hr&gt; &lt;img&gt;圖片 &lt;input&gt;輸入 &lt;link&gt; &lt;meta&gt;</span><br></pre></td></tr></table></figure></li>\n<li>HTML 標籤中還有屬性 (Attribute)，來提供該標籤的額外資訊</li>\n</ul>\n<h3 id=\"撰寫規則\"><a href=\"#撰寫規則\" class=\"headerlink\" title=\"撰寫規則\"></a>撰寫規則</h3><ul>\n<li>屬性值用單引號雙引號都可以</li>\n<li>標籤與屬性大小寫都可以，常見且建議是固定使用小寫 (lowercase)。</li>\n<li>雙引號間的屬性值不能空白<br>什麼是HTML 標籤Tag - HTML 語法教學Tutorial - Fooish 程式技術<br><a href=\"https://www.fooish.com/html/tag.html\">https://www.fooish.com/html/tag.html</a></li>\n</ul>\n<h3 id=\"語意標籤\"><a href=\"#語意標籤\" class=\"headerlink\" title=\"語意標籤\"></a>語意標籤</h3><p>HTML5中新增了語意化標籤(Semantic Elements)，目的是為了讓標籤(Tag)更具意義，以加強文件的結構化，讓搜尋引擎更清楚了解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header 可於body內或是article或是section代表頁首或是首要區塊</span><br><span class=\"line\">Nav 導覽區塊</span><br><span class=\"line\">Main 主要區塊，整頁只有一個</span><br><span class=\"line\">Article 包覆文章</span><br><span class=\"line\">Section 區塊</span><br><span class=\"line\">Div 無意義為包裹區塊排版用</span><br><span class=\"line\">Aside 用來代表主內容的附加內容，未必是側邊欄，廣告等等都可以用</span><br><span class=\"line\">Footer 頁尾</span><br><span class=\"line\">Time 時間</span><br><span class=\"line\">Mark 似螢光筆重點</span><br><span class=\"line\">details 文章的細節</span><br><span class=\"line\">Figure &#x2F;figcaption區塊 引用與標題</span><br><span class=\"line\">&lt;hgroup&gt; 當內容有主標題及次標題等多個標題的狀況下使用。</span><br><span class=\"line\">&lt;cite&gt; 引用其他文獻或作品(例如書籍、歌曲、電影、繪畫、雕塑等）的標題</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;String&gt;  粗體相對於&lt;b&gt;&lt;&#x2F;b&gt;更有強烈意思</span><br><span class=\"line\">&lt;i&gt;&lt;&#x2F;i&gt;italic(斜體)的字首。em 的完整名稱則是 emphasized(強調&#x2F;注重)</span><br><span class=\"line\">s 原文是 strikethrough(刪除線)，del 這個標籤一看就會明白：delete(刪除)。</span><br></pre></td></tr></table></figure>\n<p>好文參考：</p>\n<ul>\n<li><p><a href=\"https://medium.com/@changru.studio/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3html%E8%AA%9E%E6%84%8F%E5%8C%96%E6%A8%99%E7%B1%A4-33dd8247d779\">快速了解HTML語意化標籤</a></p>\n</li>\n<li><p><a href=\"https://km.nicetypo.com/doc/ead903b94bb8bf01974d3ccdb91a117b\">[HTML5]b,i,s 跟 strong,em,del 這些看起來一樣，但意義不同的標籤們</a></p>\n</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"區塊計算-Box-Model\"><a href=\"#區塊計算-Box-Model\" class=\"headerlink\" title=\"區塊計算 Box Model\"></a>區塊計算 Box Model</h3><ul>\n<li>Box Model 預設 box-sizing: content-box<ul>\n<li>content 內容 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width: 寬度值;height: 高度值;</span><br></pre></td></tr></table></figure></li>\n<li>padding 內距<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding:上 右 下 左;　padding:上下 左右;　</span><br><span class=\"line\">padding:上 左右 下;　padding:四邊同値;</span><br></pre></td></tr></table></figure></li>\n<li>border 邊框<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border: 邊框粗細 邊框顏色 邊框樣式 ;</span><br></pre></td></tr></table></figure></li>\n<li>margin 物件與物件間距離<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin:上 右 下 左;margin:上下 左右;</span><br><span class=\"line\">margin:上 左右 下;margin:四邊同値;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>該物件整體的大小會是content+padding+border，不要以為真的是width; height大小</li>\n<li>然後margin是占空間但不可視的地方。</li>\n</ul>\n<img src=\"/images/post/content-box.png\" width=\"500px\">\n\n<ul>\n<li>可以改變屬性 box-sizing: border-box;</li>\n<li>就會幫你把整體物件大小設定為width+height</li>\n<li>但這樣表示content內容只有width/height-padding-border(看左右/上下設定多少)</li>\n<li>然後margin還是占空間但不可視的地方。</li>\n</ul>\n<img src=\"/images/post/border-box.png\" width=\"500px\">\n\n\n\n<p>範例：可以用開發模式查看它的設定</p>\n<iframe src=\"https://codesandbox.io/embed/box-concept-f37fr-f37fr?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"Box concept-f37fr\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h3 id=\"css-reset\"><a href=\"#css-reset\" class=\"headerlink\" title=\"css reset\"></a>css reset</h3><p>撰寫時會發現元素與視窗有空隙，css reset可以清楚，還有其他一些效果</p>\n<ul>\n<li>React + @emotion/css 套用範例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import reset from &#39;react-style-reset&#39;;</span><br><span class=\"line\">import &#123; injectGlobal &#125; from &#39;@emotion&#x2F;css&#39;;</span><br><span class=\"line\">injectGlobal(reset, &#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h3><h4 id=\"display\"><a href=\"#display\" class=\"headerlink\" title=\"display\"></a>display</h4><h5 id=\"隱藏元素\"><a href=\"#隱藏元素\" class=\"headerlink\" title=\"隱藏元素\"></a>隱藏元素</h5><ul>\n<li>display預設為none</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: none; &#x2F;&#x2F;空間消失</span><br><span class=\"line\">visibility:hidden &#x2F;&#x2F;空間仍存在</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> <a href=\"https://www.w3schools.com/css/css_display_visibility.asp\">w3schools Hide an Element</a></p>\n<h5 id=\"區塊元素\"><a href=\"#區塊元素\" class=\"headerlink\" title=\"區塊元素\"></a>區塊元素</h5><ul>\n<li>display預設為block，區塊元素排列都會另起一行，除非被改變</li>\n<li>可設置寬高 width hight</li>\n<li>默認情况下，其寬度自動填满其父元素寬度，即寬度100%</li>\n<li>高度，行高以及頂和底邊距都可控制；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常見包括 div、p、h1~h6、</span><br><span class=\"line\">ul、ol、li、</span><br><span class=\"line\">dl、dt、dd、</span><br><span class=\"line\">form、table、hr、</span><br><span class=\"line\">blockquote 、</span><br><span class=\"line\">address、menu、pre.....等等</span><br></pre></td></tr></table></figure>\n<h5 id=\"行內元素\"><a href=\"#行內元素\" class=\"headerlink\" title=\"行內元素\"></a>行內元素</h5><ul>\n<li>display預設inline，除非被改變</li>\n<li>設置寬高無效，只能由内容撑起来，行內元素會依照物件內容的大小決定占用的版面</li>\n<li>行内元素会排列在同一行，直到一行排不下，才會換行，其寬度隨元素的内容而變化。</li>\n<li>設置上下margin、padding无效，左右padding 、margin有效<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常見包括</span><br><span class=\"line\">span、em、i、b、strong、</span><br><span class=\"line\">a、img、input、br、select、textarea、q、bdo、</span><br><span class=\"line\">sub、sup...等等</span><br></pre></td></tr></table></figure></li>\n<li>行內不能包含區塊元素</li>\n</ul>\n<p>*可變元素 依上下文決定</p>\n<p>Ref:<a href=\"https://www.jianshu.com/p/9fa96ece88f1\">https://www.jianshu.com/p/9fa96ece88f1</a></p>\n<h5 id=\"行內區塊\"><a href=\"#行內區塊\" class=\"headerlink\" title=\"行內區塊\"></a>行內區塊</h5><ul>\n<li>display：inline-block</li>\n<li>以inline的方式呈現，但同時擁有block的屬性</li>\n</ul>\n<hr>\n<h4 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h4><p>Static：默認值，沒有定位。</p>\n<h5 id=\"固定定位fixed\"><a href=\"#固定定位fixed\" class=\"headerlink\" title=\"固定定位fixed\"></a>固定定位fixed</h5><ul>\n<li>不管滾軸移動，依然在一樣位置</li>\n<li>空間不佔據，會蓋住別人</li>\n<li>固定他在原本寫的位置上</li>\n<li>有寫上右下左就會定位在視窗頂端的相對位置（非自身）</li>\n<li>應用：<ul>\n<li>蓋版廣告（左右上下置中 設立五個 為什麼）</li>\n<li>頂置導覽列top0</li>\n<li>回到上面 bottom 0</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><ul>\n<li>空間會佔據，也會蓋住沒有設定定位的物件</li>\n<li>相對於原本的位置上</li>\n<li>兩個都有定位物件，後面蓋前面</li>\n<li>可以設定z-index 設定優先，預設0</li>\n</ul>\n<h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><ul>\n<li>空間不佔據，資料會在原本資料的位置</li>\n<li>設定完上下左右它會往有定位的父層找</li>\n<li>如果找不到會定位在視窗上，不是body(如果想要定在body上，body需要設定定位，往上還有html,有一點差別 )</li>\n<li>應用在不想與人排列的情況，通常父層會用relative,父層想要有排列</li>\n<li>應用：<ul>\n<li>特賣標籤absolute,父層項目relative</li>\n<li>改版廣告的(X)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h4><hr>\n<h4 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h4><ul>\n<li>父層設定可以控制子層的排列方式<iframe src=\"https://codesandbox.io/embed/flex-base1-xhwn8?fontsize=14&hidenavigation=1&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"flex-base1\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n</li>\n</ul>\n<hr>\n<h4 id=\"關於置中\"><a href=\"#關於置中\" class=\"headerlink\" title=\"關於置中\"></a>關於置中</h4><h5 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h5><p>“margin:0 atuo;”所代表的的意思是水平居中，區塊元素的容器水平置中。<br>關於<br><a href=\"https://www.html.cn/qa/css3/19856.html\">margin:0 atuo;”是什么意思？</a><br><a href=\"https://fredevangigi.pixnet.net/blog/post/57202532\">不要告訴我你懂margin</a></p>\n<p>ＴＢＤ<br>1.align-content<br>2.延伸設定<br>3. default: align-items: stretch; 上下高度自動滿版時有出現空白問題</p>\n<hr>\n<h2 id=\"範例版面與物件\"><a href=\"#範例版面與物件\" class=\"headerlink\" title=\"範例版面與物件\"></a>範例版面與物件</h2><h3 id=\"互動式視窗-Modal-window\"><a href=\"#互動式視窗-Modal-window\" class=\"headerlink\" title=\"互動式視窗 Modal window\"></a>互動式視窗 Modal window</h3><p>原理：製作一置中視窗，然後先隱藏起來，該位置距離上方可以百分比設定．</p>\n<ul>\n<li>margin: 15% auto; / 15% from the top and centered /<br><a href=\"https://www.w3schools.com/howto/howto_css_modals.asp\">w3schools=How TO CSS/JS Modal</a></li>\n</ul>\n<p>*My React版練習<a href=\"https://github.com/minilabmemo/counter-water/commit/fd3a285c515fa8cdea8e94a965c6bcd95eff4996\">Add: Model</a></p>\n<hr>\n<h3 id=\"input-欄位\"><a href=\"#input-欄位\" class=\"headerlink\" title=\"input 欄位\"></a>input 欄位</h3><ul>\n<li><p>一般的輸入數字框，可以看到預設會有上下箭頭出現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;number&quot; value&#x3D;&quot;5&quot;&gt;</span><br></pre></td></tr></table></figure>\n<input type=\"number\" value=\"5\">\n\n<ul>\n<li>如果要隱藏上下箭頭可以這樣寫：<a href=\"https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp\">howto_css_hide_arrow_number</a></li>\n<li>css-in-js 版- <a href=\"https://stackoverflow.com/questions/56352294/hiding-input-spinner-using-styled-component\">Hiding input spinner using styled-component</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>[✍ 持續更新]</p>\n<blockquote>\n<p>練習CSS &amp; HTML 操作相關筆記．</p>\n</blockquote>","more":"<h2 id=\"HTML\"><a href=\"#HTML\" class=\"headerlink\" title=\"HTML\"></a>HTML</h2><h3 id=\"Html-基礎\"><a href=\"#Html-基礎\" class=\"headerlink\" title=\"Html 基礎\"></a>Html 基礎</h3><ul>\n<li>HTML 文件 (HTML document) </li>\n<li>標籤 (tag)<tagname>…</tagname>包圍著語意 (semantic) 內容(Content)區塊稱作 HTML 元素 (HTML element)，不同標籤表達不同語意</li>\n<li>空元素 (Empty Element / Void Element)<br>有些 HTML 元素是不允許有內容的，稱之為空元素。沒有結束標籤<br>常見包括<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;br&gt;換行 &lt;hr&gt; &lt;img&gt;圖片 &lt;input&gt;輸入 &lt;link&gt; &lt;meta&gt;</span><br></pre></td></tr></table></figure></li>\n<li>HTML 標籤中還有屬性 (Attribute)，來提供該標籤的額外資訊</li>\n</ul>\n<h3 id=\"撰寫規則\"><a href=\"#撰寫規則\" class=\"headerlink\" title=\"撰寫規則\"></a>撰寫規則</h3><ul>\n<li>屬性值用單引號雙引號都可以</li>\n<li>標籤與屬性大小寫都可以，常見且建議是固定使用小寫 (lowercase)。</li>\n<li>雙引號間的屬性值不能空白<br>什麼是HTML 標籤Tag - HTML 語法教學Tutorial - Fooish 程式技術<br><a href=\"https://www.fooish.com/html/tag.html\">https://www.fooish.com/html/tag.html</a></li>\n</ul>\n<h3 id=\"語意標籤\"><a href=\"#語意標籤\" class=\"headerlink\" title=\"語意標籤\"></a>語意標籤</h3><p>HTML5中新增了語意化標籤(Semantic Elements)，目的是為了讓標籤(Tag)更具意義，以加強文件的結構化，讓搜尋引擎更清楚了解</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Header 可於body內或是article或是section代表頁首或是首要區塊</span><br><span class=\"line\">Nav 導覽區塊</span><br><span class=\"line\">Main 主要區塊，整頁只有一個</span><br><span class=\"line\">Article 包覆文章</span><br><span class=\"line\">Section 區塊</span><br><span class=\"line\">Div 無意義為包裹區塊排版用</span><br><span class=\"line\">Aside 用來代表主內容的附加內容，未必是側邊欄，廣告等等都可以用</span><br><span class=\"line\">Footer 頁尾</span><br><span class=\"line\">Time 時間</span><br><span class=\"line\">Mark 似螢光筆重點</span><br><span class=\"line\">details 文章的細節</span><br><span class=\"line\">Figure &#x2F;figcaption區塊 引用與標題</span><br><span class=\"line\">&lt;hgroup&gt; 當內容有主標題及次標題等多個標題的狀況下使用。</span><br><span class=\"line\">&lt;cite&gt; 引用其他文獻或作品(例如書籍、歌曲、電影、繪畫、雕塑等）的標題</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;String&gt;  粗體相對於&lt;b&gt;&lt;&#x2F;b&gt;更有強烈意思</span><br><span class=\"line\">&lt;i&gt;&lt;&#x2F;i&gt;italic(斜體)的字首。em 的完整名稱則是 emphasized(強調&#x2F;注重)</span><br><span class=\"line\">s 原文是 strikethrough(刪除線)，del 這個標籤一看就會明白：delete(刪除)。</span><br></pre></td></tr></table></figure>\n<p>好文參考：</p>\n<ul>\n<li><p><a href=\"https://medium.com/@changru.studio/%E5%BF%AB%E9%80%9F%E4%BA%86%E8%A7%A3html%E8%AA%9E%E6%84%8F%E5%8C%96%E6%A8%99%E7%B1%A4-33dd8247d779\">快速了解HTML語意化標籤</a></p>\n</li>\n<li><p><a href=\"https://km.nicetypo.com/doc/ead903b94bb8bf01974d3ccdb91a117b\">[HTML5]b,i,s 跟 strong,em,del 這些看起來一樣，但意義不同的標籤們</a></p>\n</li>\n</ul>\n<h2 id=\"CSS\"><a href=\"#CSS\" class=\"headerlink\" title=\"CSS\"></a>CSS</h2><h3 id=\"區塊計算-Box-Model\"><a href=\"#區塊計算-Box-Model\" class=\"headerlink\" title=\"區塊計算 Box Model\"></a>區塊計算 Box Model</h3><ul>\n<li>Box Model 預設 box-sizing: content-box<ul>\n<li>content 內容 <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width: 寬度值;height: 高度值;</span><br></pre></td></tr></table></figure></li>\n<li>padding 內距<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">padding:上 右 下 左;　padding:上下 左右;　</span><br><span class=\"line\">padding:上 左右 下;　padding:四邊同値;</span><br></pre></td></tr></table></figure></li>\n<li>border 邊框<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">border: 邊框粗細 邊框顏色 邊框樣式 ;</span><br></pre></td></tr></table></figure></li>\n<li>margin 物件與物件間距離<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin:上 右 下 左;margin:上下 左右;</span><br><span class=\"line\">margin:上 左右 下;margin:四邊同値;</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>該物件整體的大小會是content+padding+border，不要以為真的是width; height大小</li>\n<li>然後margin是占空間但不可視的地方。</li>\n</ul>\n<img src=\"/images/post/content-box.png\" width=\"500px\">\n\n<ul>\n<li>可以改變屬性 box-sizing: border-box;</li>\n<li>就會幫你把整體物件大小設定為width+height</li>\n<li>但這樣表示content內容只有width/height-padding-border(看左右/上下設定多少)</li>\n<li>然後margin還是占空間但不可視的地方。</li>\n</ul>\n<img src=\"/images/post/border-box.png\" width=\"500px\">\n\n\n\n<p>範例：可以用開發模式查看它的設定</p>\n<iframe src=\"https://codesandbox.io/embed/box-concept-f37fr-f37fr?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"Box concept-f37fr\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h3 id=\"css-reset\"><a href=\"#css-reset\" class=\"headerlink\" title=\"css reset\"></a>css reset</h3><p>撰寫時會發現元素與視窗有空隙，css reset可以清楚，還有其他一些效果</p>\n<ul>\n<li>React + @emotion/css 套用範例<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import reset from &#39;react-style-reset&#39;;</span><br><span class=\"line\">import &#123; injectGlobal &#125; from &#39;@emotion&#x2F;css&#39;;</span><br><span class=\"line\">injectGlobal(reset, &#123;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"排版\"><a href=\"#排版\" class=\"headerlink\" title=\"排版\"></a>排版</h3><h4 id=\"display\"><a href=\"#display\" class=\"headerlink\" title=\"display\"></a>display</h4><h5 id=\"隱藏元素\"><a href=\"#隱藏元素\" class=\"headerlink\" title=\"隱藏元素\"></a>隱藏元素</h5><ul>\n<li>display預設為none</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">display: none; &#x2F;&#x2F;空間消失</span><br><span class=\"line\">visibility:hidden &#x2F;&#x2F;空間仍存在</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p> <a href=\"https://www.w3schools.com/css/css_display_visibility.asp\">w3schools Hide an Element</a></p>\n<h5 id=\"區塊元素\"><a href=\"#區塊元素\" class=\"headerlink\" title=\"區塊元素\"></a>區塊元素</h5><ul>\n<li>display預設為block，區塊元素排列都會另起一行，除非被改變</li>\n<li>可設置寬高 width hight</li>\n<li>默認情况下，其寬度自動填满其父元素寬度，即寬度100%</li>\n<li>高度，行高以及頂和底邊距都可控制；</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常見包括 div、p、h1~h6、</span><br><span class=\"line\">ul、ol、li、</span><br><span class=\"line\">dl、dt、dd、</span><br><span class=\"line\">form、table、hr、</span><br><span class=\"line\">blockquote 、</span><br><span class=\"line\">address、menu、pre.....等等</span><br></pre></td></tr></table></figure>\n<h5 id=\"行內元素\"><a href=\"#行內元素\" class=\"headerlink\" title=\"行內元素\"></a>行內元素</h5><ul>\n<li>display預設inline，除非被改變</li>\n<li>設置寬高無效，只能由内容撑起来，行內元素會依照物件內容的大小決定占用的版面</li>\n<li>行内元素会排列在同一行，直到一行排不下，才會換行，其寬度隨元素的内容而變化。</li>\n<li>設置上下margin、padding无效，左右padding 、margin有效<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">常見包括</span><br><span class=\"line\">span、em、i、b、strong、</span><br><span class=\"line\">a、img、input、br、select、textarea、q、bdo、</span><br><span class=\"line\">sub、sup...等等</span><br></pre></td></tr></table></figure></li>\n<li>行內不能包含區塊元素</li>\n</ul>\n<p>*可變元素 依上下文決定</p>\n<p>Ref:<a href=\"https://www.jianshu.com/p/9fa96ece88f1\">https://www.jianshu.com/p/9fa96ece88f1</a></p>\n<h5 id=\"行內區塊\"><a href=\"#行內區塊\" class=\"headerlink\" title=\"行內區塊\"></a>行內區塊</h5><ul>\n<li>display：inline-block</li>\n<li>以inline的方式呈現，但同時擁有block的屬性</li>\n</ul>\n<hr>\n<h4 id=\"Position\"><a href=\"#Position\" class=\"headerlink\" title=\"Position\"></a>Position</h4><p>Static：默認值，沒有定位。</p>\n<h5 id=\"固定定位fixed\"><a href=\"#固定定位fixed\" class=\"headerlink\" title=\"固定定位fixed\"></a>固定定位fixed</h5><ul>\n<li>不管滾軸移動，依然在一樣位置</li>\n<li>空間不佔據，會蓋住別人</li>\n<li>固定他在原本寫的位置上</li>\n<li>有寫上右下左就會定位在視窗頂端的相對位置（非自身）</li>\n<li>應用：<ul>\n<li>蓋版廣告（左右上下置中 設立五個 為什麼）</li>\n<li>頂置導覽列top0</li>\n<li>回到上面 bottom 0</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"relative\"><a href=\"#relative\" class=\"headerlink\" title=\"relative\"></a>relative</h5><ul>\n<li>空間會佔據，也會蓋住沒有設定定位的物件</li>\n<li>相對於原本的位置上</li>\n<li>兩個都有定位物件，後面蓋前面</li>\n<li>可以設定z-index 設定優先，預設0</li>\n</ul>\n<h5 id=\"absolute\"><a href=\"#absolute\" class=\"headerlink\" title=\"absolute\"></a>absolute</h5><ul>\n<li>空間不佔據，資料會在原本資料的位置</li>\n<li>設定完上下左右它會往有定位的父層找</li>\n<li>如果找不到會定位在視窗上，不是body(如果想要定在body上，body需要設定定位，往上還有html,有一點差別 )</li>\n<li>應用在不想與人排列的情況，通常父層會用relative,父層想要有排列</li>\n<li>應用：<ul>\n<li>特賣標籤absolute,父層項目relative</li>\n<li>改版廣告的(X)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"float\"><a href=\"#float\" class=\"headerlink\" title=\"float\"></a>float</h4><hr>\n<h4 id=\"Flex\"><a href=\"#Flex\" class=\"headerlink\" title=\"Flex\"></a>Flex</h4><ul>\n<li>父層設定可以控制子層的排列方式<iframe src=\"https://codesandbox.io/embed/flex-base1-xhwn8?fontsize=14&hidenavigation=1&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"flex-base1\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n</li>\n</ul>\n<hr>\n<h4 id=\"關於置中\"><a href=\"#關於置中\" class=\"headerlink\" title=\"關於置中\"></a>關於置中</h4><h5 id=\"margin\"><a href=\"#margin\" class=\"headerlink\" title=\"margin\"></a>margin</h5><p>“margin:0 atuo;”所代表的的意思是水平居中，區塊元素的容器水平置中。<br>關於<br><a href=\"https://www.html.cn/qa/css3/19856.html\">margin:0 atuo;”是什么意思？</a><br><a href=\"https://fredevangigi.pixnet.net/blog/post/57202532\">不要告訴我你懂margin</a></p>\n<p>ＴＢＤ<br>1.align-content<br>2.延伸設定<br>3. default: align-items: stretch; 上下高度自動滿版時有出現空白問題</p>\n<hr>\n<h2 id=\"範例版面與物件\"><a href=\"#範例版面與物件\" class=\"headerlink\" title=\"範例版面與物件\"></a>範例版面與物件</h2><h3 id=\"互動式視窗-Modal-window\"><a href=\"#互動式視窗-Modal-window\" class=\"headerlink\" title=\"互動式視窗 Modal window\"></a>互動式視窗 Modal window</h3><p>原理：製作一置中視窗，然後先隱藏起來，該位置距離上方可以百分比設定．</p>\n<ul>\n<li>margin: 15% auto; / 15% from the top and centered /<br><a href=\"https://www.w3schools.com/howto/howto_css_modals.asp\">w3schools=How TO CSS/JS Modal</a></li>\n</ul>\n<p>*My React版練習<a href=\"https://github.com/minilabmemo/counter-water/commit/fd3a285c515fa8cdea8e94a965c6bcd95eff4996\">Add: Model</a></p>\n<hr>\n<h3 id=\"input-欄位\"><a href=\"#input-欄位\" class=\"headerlink\" title=\"input 欄位\"></a>input 欄位</h3><ul>\n<li><p>一般的輸入數字框，可以看到預設會有上下箭頭出現</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input type&#x3D;&quot;number&quot; value&#x3D;&quot;5&quot;&gt;</span><br></pre></td></tr></table></figure>\n<input type=\"number\" value=\"5\">\n\n<ul>\n<li>如果要隱藏上下箭頭可以這樣寫：<a href=\"https://www.w3schools.com/howto/howto_css_hide_arrow_number.asp\">howto_css_hide_arrow_number</a></li>\n<li>css-in-js 版- <a href=\"https://stackoverflow.com/questions/56352294/hiding-input-spinner-using-styled-component\">Hiding input spinner using styled-component</a></li>\n</ul>\n</li>\n</ul>"},{"title":"[python 02]初學 python 筆記","date":"2021-02-13T07:18:37.000Z","_content":"\n>初學 python 筆記 \n\n\n<!--more-->\n\n\n## python 學習收藏文\n\n[Day - 03] - Python 基礎語法教學 Part 1\nhttps://ithelp.ithome.com.tw/articles/10200505\n\n\n## Python 資料型態\n- 常见的 immutable objects\nNumeric types: int, float, complex\nstring\ntuple\nfrozen set\n參數傳遞行為同 pass-by-value。\n- 常见的 mutable objects:\nlist\ndict\nset\nbyte array\n參數傳遞行為同 pass-by-reference，但是不允許 re-assignment(會指向新的object，跟之前物件無關)。\n\n參考文章: \n- 理解 Python object 的 mutable 和 immutable\nhttp://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html\n\n- Python資料型態，可變與不可變物件\nhttp://changlt.blogspot.com/2017/04/python_29.html\n\n- Python 函式的參數傳遞方式：Passed by assignment\nhttps://blog.hitripod.com/python-function-passed-by-assignment/\n\n- python 並不會因為 data 是可變還是不可變的因素去決定是傳值還是傳參 (很多人都有這種誤解), 因為他都不是, 他自有其特殊的傳遞方式， python 是完完全全的 call by sharing!\nhttp://dokelung.me/category/python/python-evaluation-strategy/\n\n延伸:\nJS的call by sharing [JS基本觀念：call by value 還是reference 又或是 sharing?]\nhttps://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc\n\n## ","source":"_posts/python-note.md","raw":"---\ntitle: \"[python 02]初學 python 筆記\"\ntags:\n  - python\n  - call by sharing\ncategories:\n  - Tech.\n  - back-end\n  - python\ndate: 2021-02-13 15:18:37\n---\n\n>初學 python 筆記 \n\n\n<!--more-->\n\n\n## python 學習收藏文\n\n[Day - 03] - Python 基礎語法教學 Part 1\nhttps://ithelp.ithome.com.tw/articles/10200505\n\n\n## Python 資料型態\n- 常见的 immutable objects\nNumeric types: int, float, complex\nstring\ntuple\nfrozen set\n參數傳遞行為同 pass-by-value。\n- 常见的 mutable objects:\nlist\ndict\nset\nbyte array\n參數傳遞行為同 pass-by-reference，但是不允許 re-assignment(會指向新的object，跟之前物件無關)。\n\n參考文章: \n- 理解 Python object 的 mutable 和 immutable\nhttp://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html\n\n- Python資料型態，可變與不可變物件\nhttp://changlt.blogspot.com/2017/04/python_29.html\n\n- Python 函式的參數傳遞方式：Passed by assignment\nhttps://blog.hitripod.com/python-function-passed-by-assignment/\n\n- python 並不會因為 data 是可變還是不可變的因素去決定是傳值還是傳參 (很多人都有這種誤解), 因為他都不是, 他自有其特殊的傳遞方式， python 是完完全全的 call by sharing!\nhttp://dokelung.me/category/python/python-evaluation-strategy/\n\n延伸:\nJS的call by sharing [JS基本觀念：call by value 還是reference 又或是 sharing?]\nhttps://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc\n\n## ","slug":"python-note","published":1,"updated":"2023-01-22T07:03:26.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbd002kkp2x5gntcxi5","content":"<blockquote>\n<p>初學 python 筆記 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h2 id=\"python-學習收藏文\"><a href=\"#python-學習收藏文\" class=\"headerlink\" title=\"python 學習收藏文\"></a>python 學習收藏文</h2><p>[Day - 03] - Python 基礎語法教學 Part 1<br><a href=\"https://ithelp.ithome.com.tw/articles/10200505\">https://ithelp.ithome.com.tw/articles/10200505</a></p>\n<h2 id=\"Python-資料型態\"><a href=\"#Python-資料型態\" class=\"headerlink\" title=\"Python 資料型態\"></a>Python 資料型態</h2><ul>\n<li>常见的 immutable objects<br>Numeric types: int, float, complex<br>string<br>tuple<br>frozen set<br>參數傳遞行為同 pass-by-value。</li>\n<li>常见的 mutable objects:<br>list<br>dict<br>set<br>byte array<br>參數傳遞行為同 pass-by-reference，但是不允許 re-assignment(會指向新的object，跟之前物件無關)。</li>\n</ul>\n<p>參考文章: </p>\n<ul>\n<li><p>理解 Python object 的 mutable 和 immutable<br><a href=\"http://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html\">http://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html</a></p>\n</li>\n<li><p>Python資料型態，可變與不可變物件<br><a href=\"http://changlt.blogspot.com/2017/04/python_29.html\">http://changlt.blogspot.com/2017/04/python_29.html</a></p>\n</li>\n<li><p>Python 函式的參數傳遞方式：Passed by assignment<br><a href=\"https://blog.hitripod.com/python-function-passed-by-assignment/\">https://blog.hitripod.com/python-function-passed-by-assignment/</a></p>\n</li>\n<li><p>python 並不會因為 data 是可變還是不可變的因素去決定是傳值還是傳參 (很多人都有這種誤解), 因為他都不是, 他自有其特殊的傳遞方式， python 是完完全全的 call by sharing!<br><a href=\"http://dokelung.me/category/python/python-evaluation-strategy/\">http://dokelung.me/category/python/python-evaluation-strategy/</a></p>\n</li>\n</ul>\n<p>延伸:<br>JS的call by sharing [JS基本觀念：call by value 還是reference 又或是 sharing?]<br><a href=\"https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc\">https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc</a></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2>","site":{"data":{}},"excerpt":"<blockquote>\n<p>初學 python 筆記 </p>\n</blockquote>","more":"<h2 id=\"python-學習收藏文\"><a href=\"#python-學習收藏文\" class=\"headerlink\" title=\"python 學習收藏文\"></a>python 學習收藏文</h2><p>[Day - 03] - Python 基礎語法教學 Part 1<br><a href=\"https://ithelp.ithome.com.tw/articles/10200505\">https://ithelp.ithome.com.tw/articles/10200505</a></p>\n<h2 id=\"Python-資料型態\"><a href=\"#Python-資料型態\" class=\"headerlink\" title=\"Python 資料型態\"></a>Python 資料型態</h2><ul>\n<li>常见的 immutable objects<br>Numeric types: int, float, complex<br>string<br>tuple<br>frozen set<br>參數傳遞行為同 pass-by-value。</li>\n<li>常见的 mutable objects:<br>list<br>dict<br>set<br>byte array<br>參數傳遞行為同 pass-by-reference，但是不允許 re-assignment(會指向新的object，跟之前物件無關)。</li>\n</ul>\n<p>參考文章: </p>\n<ul>\n<li><p>理解 Python object 的 mutable 和 immutable<br><a href=\"http://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html\">http://wsfdl.com/python/2013/08/14/%E7%90%86%E8%A7%A3Python%E7%9A%84mutable%E5%92%8Cimmutable.html</a></p>\n</li>\n<li><p>Python資料型態，可變與不可變物件<br><a href=\"http://changlt.blogspot.com/2017/04/python_29.html\">http://changlt.blogspot.com/2017/04/python_29.html</a></p>\n</li>\n<li><p>Python 函式的參數傳遞方式：Passed by assignment<br><a href=\"https://blog.hitripod.com/python-function-passed-by-assignment/\">https://blog.hitripod.com/python-function-passed-by-assignment/</a></p>\n</li>\n<li><p>python 並不會因為 data 是可變還是不可變的因素去決定是傳值還是傳參 (很多人都有這種誤解), 因為他都不是, 他自有其特殊的傳遞方式， python 是完完全全的 call by sharing!<br><a href=\"http://dokelung.me/category/python/python-evaluation-strategy/\">http://dokelung.me/category/python/python-evaluation-strategy/</a></p>\n</li>\n</ul>\n<p>延伸:<br>JS的call by sharing [JS基本觀念：call by value 還是reference 又或是 sharing?]<br><a href=\"https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc\">https://medium.com/@mengchiang000/js%E5%9F%BA%E6%9C%AC%E8%A7%80%E5%BF%B5-call-by-value-%E9%82%84%E6%98%AFreference-%E5%8F%88%E6%88%96%E6%98%AF-sharing-22a87ca478fc</a></p>\n<h2 id><a href=\"#\" class=\"headerlink\" title></a></h2>"},{"title":"[python 01]安裝與執行python","date":"2021-02-10T08:42:58.000Z","_content":"\n>純紀錄python與在vscode快速執行python \n\n\n<!--more-->\n\n#### python\nPython 的安裝有分兩種：一種到Python官網下載後安裝即可，另一種便是使用 Anaconda 安裝，Anaconda 會幫你管理 Python 的環境及函式庫，是一個 all-in-one 的 Python 開發環境，很適合初學者。\n\nPython 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\n\n安裝完就會有Anaconda-Navigator\n應用中也會有Jupyter，可以在網頁上執行 Python 程式碼還有Spyder等等，你也可以從中看到安裝\n\npip的基本功能就是安裝套件The Python Package Installer （下面再詳細介紹）\n>pip --version\npip 20.2.4 from D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pip (python 3.8)\n\n\nref:[Python教學第0章-Anaconda 完整安裝教學及搭建 vscode 開發環境](https://www.woodowlab.com/python-tutorial-0-anaconda/)\n\n#### vscode\nvscode\n1.plugin 安裝python\n2.新增檔案xxx.py\n```\nprint(\"Hello world! Python\")\nprint(\"By Eyelash\")\n```\n這時就可以對他按下Run，就會在終端機執行了。\n*如果沒裝1的話第二步也會跳出建議喔\n\n\n#### pip\n安裝模組\n$ pip install 模組名\n移除模組\n$ pip uninstall 模組名\n搜尋模組\n$ pip search 模組名\n開發時將已安裝模組名稱和版本號存成列表，以便下次安裝使用\n$ pip freeze > requirements.txt\n根據 requirements.txt 列表安裝模組\n$ pip install -r requirements.txt\n\nRef:\nhttps://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/","source":"_posts/python-vscode.md","raw":"---\ntitle: \"[python 01]安裝與執行python\"\ntags:\n  - python\n  - vscode\ncategories:\n  - Tech.\n  - back-end\n  - python\ndate: 2021-02-10 16:42:58\n---\n\n>純紀錄python與在vscode快速執行python \n\n\n<!--more-->\n\n#### python\nPython 的安裝有分兩種：一種到Python官網下載後安裝即可，另一種便是使用 Anaconda 安裝，Anaconda 會幫你管理 Python 的環境及函式庫，是一個 all-in-one 的 Python 開發環境，很適合初學者。\n\nPython 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32\n\n安裝完就會有Anaconda-Navigator\n應用中也會有Jupyter，可以在網頁上執行 Python 程式碼還有Spyder等等，你也可以從中看到安裝\n\npip的基本功能就是安裝套件The Python Package Installer （下面再詳細介紹）\n>pip --version\npip 20.2.4 from D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pip (python 3.8)\n\n\nref:[Python教學第0章-Anaconda 完整安裝教學及搭建 vscode 開發環境](https://www.woodowlab.com/python-tutorial-0-anaconda/)\n\n#### vscode\nvscode\n1.plugin 安裝python\n2.新增檔案xxx.py\n```\nprint(\"Hello world! Python\")\nprint(\"By Eyelash\")\n```\n這時就可以對他按下Run，就會在終端機執行了。\n*如果沒裝1的話第二步也會跳出建議喔\n\n\n#### pip\n安裝模組\n$ pip install 模組名\n移除模組\n$ pip uninstall 模組名\n搜尋模組\n$ pip search 模組名\n開發時將已安裝模組名稱和版本號存成列表，以便下次安裝使用\n$ pip freeze > requirements.txt\n根據 requirements.txt 列表安裝模組\n$ pip install -r requirements.txt\n\nRef:\nhttps://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/","slug":"python-vscode","published":1,"updated":"2023-01-22T07:03:26.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbe002nkp2x96869jed","content":"<blockquote>\n<p>純紀錄python與在vscode快速執行python </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>Python 的安裝有分兩種：一種到Python官網下載後安裝即可，另一種便是使用 Anaconda 安裝，Anaconda 會幫你管理 Python 的環境及函式庫，是一個 all-in-one 的 Python 開發環境，很適合初學者。</p>\n<p>Python 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32</p>\n<p>安裝完就會有Anaconda-Navigator<br>應用中也會有Jupyter，可以在網頁上執行 Python 程式碼還有Spyder等等，你也可以從中看到安裝</p>\n<p>pip的基本功能就是安裝套件The Python Package Installer （下面再詳細介紹）</p>\n<blockquote>\n<p>pip –version<br>pip 20.2.4 from D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pip (python 3.8)</p>\n</blockquote>\n<p>ref:<a href=\"https://www.woodowlab.com/python-tutorial-0-anaconda/\">Python教學第0章-Anaconda 完整安裝教學及搭建 vscode 開發環境</a></p>\n<h4 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h4><p>vscode<br>1.plugin 安裝python<br>2.新增檔案xxx.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;Hello world! Python&quot;)</span><br><span class=\"line\">print(&quot;By Eyelash&quot;)</span><br></pre></td></tr></table></figure>\n<p>這時就可以對他按下Run，就會在終端機執行了。<br>*如果沒裝1的話第二步也會跳出建議喔</p>\n<h4 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h4><p>安裝模組<br>$ pip install 模組名<br>移除模組<br>$ pip uninstall 模組名<br>搜尋模組<br>$ pip search 模組名<br>開發時將已安裝模組名稱和版本號存成列表，以便下次安裝使用<br>$ pip freeze &gt; requirements.txt<br>根據 requirements.txt 列表安裝模組<br>$ pip install -r requirements.txt</p>\n<p>Ref:<br><a href=\"https://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/\">https://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>純紀錄python與在vscode快速執行python </p>\n</blockquote>","more":"<h4 id=\"python\"><a href=\"#python\" class=\"headerlink\" title=\"python\"></a>python</h4><p>Python 的安裝有分兩種：一種到Python官網下載後安裝即可，另一種便是使用 Anaconda 安裝，Anaconda 會幫你管理 Python 的環境及函式庫，是一個 all-in-one 的 Python 開發環境，很適合初學者。</p>\n<p>Python 3.8.5 (default, Sep  3 2020, 21:29:08) [MSC v.1916 64 bit (AMD64)] :: Anaconda, Inc. on win32</p>\n<p>安裝完就會有Anaconda-Navigator<br>應用中也會有Jupyter，可以在網頁上執行 Python 程式碼還有Spyder等等，你也可以從中看到安裝</p>\n<p>pip的基本功能就是安裝套件The Python Package Installer （下面再詳細介紹）</p>\n<blockquote>\n<p>pip –version<br>pip 20.2.4 from D:\\ProgramData\\Anaconda3\\lib\\site-packages\\pip (python 3.8)</p>\n</blockquote>\n<p>ref:<a href=\"https://www.woodowlab.com/python-tutorial-0-anaconda/\">Python教學第0章-Anaconda 完整安裝教學及搭建 vscode 開發環境</a></p>\n<h4 id=\"vscode\"><a href=\"#vscode\" class=\"headerlink\" title=\"vscode\"></a>vscode</h4><p>vscode<br>1.plugin 安裝python<br>2.新增檔案xxx.py</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;Hello world! Python&quot;)</span><br><span class=\"line\">print(&quot;By Eyelash&quot;)</span><br></pre></td></tr></table></figure>\n<p>這時就可以對他按下Run，就會在終端機執行了。<br>*如果沒裝1的話第二步也會跳出建議喔</p>\n<h4 id=\"pip\"><a href=\"#pip\" class=\"headerlink\" title=\"pip\"></a>pip</h4><p>安裝模組<br>$ pip install 模組名<br>移除模組<br>$ pip uninstall 模組名<br>搜尋模組<br>$ pip search 模組名<br>開發時將已安裝模組名稱和版本號存成列表，以便下次安裝使用<br>$ pip freeze &gt; requirements.txt<br>根據 requirements.txt 列表安裝模組<br>$ pip install -r requirements.txt</p>\n<p>Ref:<br><a href=\"https://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/\">https://blog.techbridge.cc/2017/06/03/python-web-flask101-tutorial-introduction-and-environment-setup/</a></p>"},{"title":"[React][✍練習]套用 css-in-js (Emotion 庫)撰寫 CSS","date":"2021-04-18T13:21:19.000Z","_content":"[✍練習ing]\n\n> 練習React JS寫法與 css-in-js( Emotion 庫) 撰寫 CSS\n\n<!--more-->\n\n# 一般要在 React 中撰寫 CSS 有幾種做法\n\n## 1.撰寫在.CSS 檔案,再 import 套用。\n- 把css寫在不同檔案中\n```jsx\nimport \"./styles.css\";\n<div className=\"App\">   可定義 className\n```\n不便性：會需要考慮CSS優先度問題\n## 2.直接在對應地方用style={JS寫法} 撰寫\n- 直接用 Inline-style 在屬性中加入style\n```jsx\n<h2 style ={{color:'red', backgroundColor: \"#3f51b5\"}}>JS寫法</h2>\n裡面是 JS 寫法，值需加''，且-需改成駱駝式寫法(不能含-字元)\n```\n不便性：會需要轉成ＪＳ寫法，有插件工具可以幫忙轉\n\n## 3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦\n  而 css-in-js 庫的主要有: styled-components, emotion, glamorous。\n\n\n# 練習用emotion庫撰寫CSS\n  - Emotion 是一個旨在使用 JavaScript 編寫 CSS 樣式的庫 - 加上兩個反引號，之間就可以直接撰寫 CSS ，有styled 寫法，本篇主要用這個練習看看。 \n  - styled 寫法\n    要建立 < div> 標籤樣式時，使用 styled.div；如果要建立的是 < button> 則是使用 styled.button 以此類推。\n\n## 套用emotion庫撰寫\n\n基礎使用方法：\n1. 安裝 npm install --save emotion\n2. 引入用className屬性套用\n```jsx\nimport { css } from \"emotion\";\nconst myStyle = css`\n  color: rebeccapurple;\n`\n <div className=\"myStyle \">myStyle樣式</div>\n\n```\n更多範例可以看NPM上的emotion庫介紹[emotion](https://www.npmjs.com/package/emotion)\n\n\n### 套用@emotion/styled\n基礎使用方法：\n1. 引入npm i @emotion/styled\n2. 撰寫標籤tag\n```jsx\nconst Container = styled.div` //外面\n  background-color: skyblue;\n`;\n...\nreturn (\n    <Container  >\n     </Container >\n  );\n    \n```\n- 變數修改方法\n``` jsx\nlet displayNone = \"block\"\n\nconst Modal = styled.div`\ndisplay: ${displayNone}; \n  `;\n```\n\n### 套用@emotion/core庫撰寫\n官方推薦＠＠ 但使用上有一些限制\n\n基礎使用方法：\n1. 引入npm i @emotion/core\n2. 引入後用css屬性套用\n  ```jsx\n/** @jsx jsx */ import { css, jsx } from \"@emotion/core\"; \n//在無法配置babel配置（create-react-app，codesandbox等）的項目中\n一定要加前述/** @jsx jsx */ 才有效果喔！！！ 之前漏了查好久＠＠\n\n定義常數， CSS 區塊要用css`` 包起來\n  const TextRed = css`\n    color: red;\n  `;\n\n然後在要套用的地方加上css={xxx}\n  <h2 css={TextRed}>emotion css 寫法</h2>\n\n\n```\n更多介紹範例： [emotion Introduction](https://emotion.sh/docs/introduction \"emotion Introduction\") \n\n\n------\n## 練習區✍\n持續練習其他進階套用法並更新在範例檔案中 ex: 多重套用，階層樣式，標籤樣式...\n\n\n*可側邊開啟程式碼 \n（如有更好的寫法介紹還請多多指教，謝謝🙏） \n\n<iframe src=\"https://codesandbox.io/embed/emotion-css-nqey4?fontsize=14&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"emotion CSS\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n# 開發插件 in vscode\nvscode中有一些針對css-in-js的插件可以幫助開發效率．\n## Css-in-js\n可以透過指令將 CSS 選取後切換 css & css-in-js 寫法，不用再自己改半天啦！！\n\n## vscode-styled-components\n可以自動完成在css-in-js區塊裡面的css補全提示．\n\n\n----\n\n# 網路參考文章\n\n| 連結  | 摘要與大致內容 |\n| ----- | ----------|\n| [【Day 10】CSS && Inline-style](https://ithelp.ithome.com.tw/articles/10215415 \"【Day 10】CSS && Inline-style\")  | React CSS && Inline-style 介紹，JS 物件寫法。 |\n|[https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element](https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element)|多重classnames寫法|\n| [谈一谈在 React 项目中使用 css-in-js 方案](https://juejin.im/post/6844903993047531533 \"谈一谈在React项目中使用css-in-js方案\") | 鉴于 emotion 已经支持了 styled 模式，可以优先选择 emotion。內涵 emotion 用法示例(進階 待看 ☐👈) |\n| [[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用](https://ithelp.ithome.com.tw/articles/10223071 \"[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用\") | 使用 emotion 撰寫 styled components  |\n | [介紹撰寫 React CSS 的神套件 Styled Components](https://medium.com/@shihKai/%E4%BB%8B%E7%B4%B9%E6%92%B0%E5%AF%ABreact-css%E7%9A%84%E7%A5%9E%E5%A5%97%E4%BB%B6styled-components-77455c849198 \"介紹撰寫React CSS的神套件Styled Components\") | Styled Components sample |\n[emotion Composition](https://emotion.sh/docs/composition)|套用兩個樣式寫法  |\nhttps://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library | 解釋要在import前加上/ ** @jsx jsx * /的原因|\n|https://emotion.sh/docs/css-prop#jsx-pragma |在文件頂部設置jsx編譯指示才可以使用css prop。尤其在無法配置babel配置（create-react-app，codesandbox等）的項目中。|\n[change-style-of-material-ui-textfield](https://stackoverflow.com/questions/61414356/change-style-of-material-ui-textfield-on-focus-react)|更改material-ui樣式的發問 \n[Why you shouldn't use @emotion/core](https://vriad.com/essays/emotion-core-vs-vanilla-emotion)|有一篇文章分析不應使用emotion/core的原因\n\n\n\n\n","source":"_posts/react-css.md","raw":"---\ntitle: \"[React][✍練習]套用 css-in-js (Emotion 庫)撰寫 CSS\"\ntags:\n  - react\n  - css\n  - css-in-js\n  - ing\n\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2021-04-18 21:21:19\n---\n[✍練習ing]\n\n> 練習React JS寫法與 css-in-js( Emotion 庫) 撰寫 CSS\n\n<!--more-->\n\n# 一般要在 React 中撰寫 CSS 有幾種做法\n\n## 1.撰寫在.CSS 檔案,再 import 套用。\n- 把css寫在不同檔案中\n```jsx\nimport \"./styles.css\";\n<div className=\"App\">   可定義 className\n```\n不便性：會需要考慮CSS優先度問題\n## 2.直接在對應地方用style={JS寫法} 撰寫\n- 直接用 Inline-style 在屬性中加入style\n```jsx\n<h2 style ={{color:'red', backgroundColor: \"#3f51b5\"}}>JS寫法</h2>\n裡面是 JS 寫法，值需加''，且-需改成駱駝式寫法(不能含-字元)\n```\n不便性：會需要轉成ＪＳ寫法，有插件工具可以幫忙轉\n\n## 3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦\n  而 css-in-js 庫的主要有: styled-components, emotion, glamorous。\n\n\n# 練習用emotion庫撰寫CSS\n  - Emotion 是一個旨在使用 JavaScript 編寫 CSS 樣式的庫 - 加上兩個反引號，之間就可以直接撰寫 CSS ，有styled 寫法，本篇主要用這個練習看看。 \n  - styled 寫法\n    要建立 < div> 標籤樣式時，使用 styled.div；如果要建立的是 < button> 則是使用 styled.button 以此類推。\n\n## 套用emotion庫撰寫\n\n基礎使用方法：\n1. 安裝 npm install --save emotion\n2. 引入用className屬性套用\n```jsx\nimport { css } from \"emotion\";\nconst myStyle = css`\n  color: rebeccapurple;\n`\n <div className=\"myStyle \">myStyle樣式</div>\n\n```\n更多範例可以看NPM上的emotion庫介紹[emotion](https://www.npmjs.com/package/emotion)\n\n\n### 套用@emotion/styled\n基礎使用方法：\n1. 引入npm i @emotion/styled\n2. 撰寫標籤tag\n```jsx\nconst Container = styled.div` //外面\n  background-color: skyblue;\n`;\n...\nreturn (\n    <Container  >\n     </Container >\n  );\n    \n```\n- 變數修改方法\n``` jsx\nlet displayNone = \"block\"\n\nconst Modal = styled.div`\ndisplay: ${displayNone}; \n  `;\n```\n\n### 套用@emotion/core庫撰寫\n官方推薦＠＠ 但使用上有一些限制\n\n基礎使用方法：\n1. 引入npm i @emotion/core\n2. 引入後用css屬性套用\n  ```jsx\n/** @jsx jsx */ import { css, jsx } from \"@emotion/core\"; \n//在無法配置babel配置（create-react-app，codesandbox等）的項目中\n一定要加前述/** @jsx jsx */ 才有效果喔！！！ 之前漏了查好久＠＠\n\n定義常數， CSS 區塊要用css`` 包起來\n  const TextRed = css`\n    color: red;\n  `;\n\n然後在要套用的地方加上css={xxx}\n  <h2 css={TextRed}>emotion css 寫法</h2>\n\n\n```\n更多介紹範例： [emotion Introduction](https://emotion.sh/docs/introduction \"emotion Introduction\") \n\n\n------\n## 練習區✍\n持續練習其他進階套用法並更新在範例檔案中 ex: 多重套用，階層樣式，標籤樣式...\n\n\n*可側邊開啟程式碼 \n（如有更好的寫法介紹還請多多指教，謝謝🙏） \n\n<iframe src=\"https://codesandbox.io/embed/emotion-css-nqey4?fontsize=14&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"emotion CSS\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n# 開發插件 in vscode\nvscode中有一些針對css-in-js的插件可以幫助開發效率．\n## Css-in-js\n可以透過指令將 CSS 選取後切換 css & css-in-js 寫法，不用再自己改半天啦！！\n\n## vscode-styled-components\n可以自動完成在css-in-js區塊裡面的css補全提示．\n\n\n----\n\n# 網路參考文章\n\n| 連結  | 摘要與大致內容 |\n| ----- | ----------|\n| [【Day 10】CSS && Inline-style](https://ithelp.ithome.com.tw/articles/10215415 \"【Day 10】CSS && Inline-style\")  | React CSS && Inline-style 介紹，JS 物件寫法。 |\n|[https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element](https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element)|多重classnames寫法|\n| [谈一谈在 React 项目中使用 css-in-js 方案](https://juejin.im/post/6844903993047531533 \"谈一谈在React项目中使用css-in-js方案\") | 鉴于 emotion 已经支持了 styled 模式，可以优先选择 emotion。內涵 emotion 用法示例(進階 待看 ☐👈) |\n| [[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用](https://ithelp.ithome.com.tw/articles/10223071 \"[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用\") | 使用 emotion 撰寫 styled components  |\n | [介紹撰寫 React CSS 的神套件 Styled Components](https://medium.com/@shihKai/%E4%BB%8B%E7%B4%B9%E6%92%B0%E5%AF%ABreact-css%E7%9A%84%E7%A5%9E%E5%A5%97%E4%BB%B6styled-components-77455c849198 \"介紹撰寫React CSS的神套件Styled Components\") | Styled Components sample |\n[emotion Composition](https://emotion.sh/docs/composition)|套用兩個樣式寫法  |\nhttps://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library | 解釋要在import前加上/ ** @jsx jsx * /的原因|\n|https://emotion.sh/docs/css-prop#jsx-pragma |在文件頂部設置jsx編譯指示才可以使用css prop。尤其在無法配置babel配置（create-react-app，codesandbox等）的項目中。|\n[change-style-of-material-ui-textfield](https://stackoverflow.com/questions/61414356/change-style-of-material-ui-textfield-on-focus-react)|更改material-ui樣式的發問 \n[Why you shouldn't use @emotion/core](https://vriad.com/essays/emotion-core-vs-vanilla-emotion)|有一篇文章分析不應使用emotion/core的原因\n\n\n\n\n","slug":"react-css","published":1,"updated":"2022-05-01T07:09:56.194Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbe002qkp2xhxg15t42","content":"<p>[✍練習ing]</p>\n<blockquote>\n<p>練習React JS寫法與 css-in-js( Emotion 庫) 撰寫 CSS</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"一般要在-React-中撰寫-CSS-有幾種做法\"><a href=\"#一般要在-React-中撰寫-CSS-有幾種做法\" class=\"headerlink\" title=\"一般要在 React 中撰寫 CSS 有幾種做法\"></a>一般要在 React 中撰寫 CSS 有幾種做法</h1><h2 id=\"1-撰寫在-CSS-檔案-再-import-套用。\"><a href=\"#1-撰寫在-CSS-檔案-再-import-套用。\" class=\"headerlink\" title=\"1.撰寫在.CSS 檔案,再 import 套用。\"></a>1.撰寫在.CSS 檔案,再 import 套用。</h2><ul>\n<li>把css寫在不同檔案中<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br><span class=\"line\">&lt;div className=<span class=\"string\">&quot;App&quot;</span>&gt;   可定義 className</span><br></pre></td></tr></table></figure>\n不便性：會需要考慮CSS優先度問題<h2 id=\"2-直接在對應地方用style-JS寫法-撰寫\"><a href=\"#2-直接在對應地方用style-JS寫法-撰寫\" class=\"headerlink\" title=\"2.直接在對應地方用style={JS寫法} 撰寫\"></a>2.直接在對應地方用style={JS寫法} 撰寫</h2></li>\n<li>直接用 Inline-style 在屬性中加入style<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 style =&#123;&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&quot;#3f51b5&quot;</span>&#125;&#125;&gt;JS寫法&lt;/h2&gt;</span><br><span class=\"line\">裡面是 JS 寫法，值需加<span class=\"string\">&#x27;&#x27;</span>，且-需改成駱駝式寫法(不能含-字元)</span><br></pre></td></tr></table></figure>\n不便性：會需要轉成ＪＳ寫法，有插件工具可以幫忙轉</li>\n</ul>\n<h2 id=\"3-套用css-in-js-庫-直接撰寫-CSS，不用再改-JS-寫法啦\"><a href=\"#3-套用css-in-js-庫-直接撰寫-CSS，不用再改-JS-寫法啦\" class=\"headerlink\" title=\"3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦\"></a>3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦</h2><p>  而 css-in-js 庫的主要有: styled-components, emotion, glamorous。</p>\n<h1 id=\"練習用emotion庫撰寫CSS\"><a href=\"#練習用emotion庫撰寫CSS\" class=\"headerlink\" title=\"練習用emotion庫撰寫CSS\"></a>練習用emotion庫撰寫CSS</h1><ul>\n<li>Emotion 是一個旨在使用 JavaScript 編寫 CSS 樣式的庫 - 加上兩個反引號，之間就可以直接撰寫 CSS ，有styled 寫法，本篇主要用這個練習看看。 </li>\n<li>styled 寫法<br>要建立 &lt; div&gt; 標籤樣式時，使用 styled.div；如果要建立的是 &lt; button&gt; 則是使用 styled.button 以此類推。</li>\n</ul>\n<h2 id=\"套用emotion庫撰寫\"><a href=\"#套用emotion庫撰寫\" class=\"headerlink\" title=\"套用emotion庫撰寫\"></a>套用emotion庫撰寫</h2><p>基礎使用方法：</p>\n<ol>\n<li>安裝 npm install –save emotion</li>\n<li>引入用className屬性套用<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; css &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;emotion&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myStyle = css`</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span></span><br><span class=\"line\"><span class=\"css\">`</span></span><br><span class=\"line\"> &lt;div className=<span class=\"string\">&quot;myStyle &quot;</span>&gt;myStyle樣式&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n更多範例可以看NPM上的emotion庫介紹<a href=\"https://www.npmjs.com/package/emotion\">emotion</a></li>\n</ol>\n<h3 id=\"套用-emotion-styled\"><a href=\"#套用-emotion-styled\" class=\"headerlink\" title=\"套用@emotion/styled\"></a>套用@emotion/styled</h3><p>基礎使用方法：</p>\n<ol>\n<li>引入npm i @emotion/styled</li>\n<li>撰寫標籤tag<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Container = styled.div<span class=\"string\">` //外面</span></span><br><span class=\"line\"><span class=\"string\">  background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Container  &gt;</span><br><span class=\"line\">     &lt;/Container &gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>變數修改方法<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> displayNone = <span class=\"string\">&quot;block&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Modal = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">display: <span class=\"subst\">$&#123;displayNone&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"套用-emotion-core庫撰寫\"><a href=\"#套用-emotion-core庫撰寫\" class=\"headerlink\" title=\"套用@emotion/core庫撰寫\"></a>套用@emotion/core庫撰寫</h3>官方推薦＠＠ 但使用上有一些限制</li>\n</ul>\n<p>基礎使用方法：</p>\n<ol>\n<li>引入npm i @emotion/core</li>\n<li>引入後用css屬性套用<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@jsx </span>jsx */</span> <span class=\"keyword\">import</span> &#123; css, jsx &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@emotion/core&quot;</span>; </span><br><span class=\"line\"><span class=\"comment\">//在無法配置babel配置（create-react-app，codesandbox等）的項目中</span></span><br><span class=\"line\">一定要加前述<span class=\"comment\">/** <span class=\"doctag\">@jsx </span>jsx */</span> 才有效果喔！！！ 之前漏了查好久＠＠</span><br><span class=\"line\"></span><br><span class=\"line\">定義常數， CSS 區塊要用css`<span class=\"css\">`</span> 包起來</span><br><span class=\"line\">  <span class=\"keyword\">const</span> TextRed = css`</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span></span><br><span class=\"line\"><span class=\"css\">  `</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">然後在要套用的地方加上css=&#123;xxx&#125;</span><br><span class=\"line\">  &lt;h2 css=&#123;TextRed&#125;&gt;emotion css 寫法&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n更多介紹範例： <a href=\"https://emotion.sh/docs/introduction\" title=\"emotion Introduction\">emotion Introduction</a> </li>\n</ol>\n<hr>\n<h2 id=\"練習區✍\"><a href=\"#練習區✍\" class=\"headerlink\" title=\"練習區✍\"></a>練習區✍</h2><p>持續練習其他進階套用法並更新在範例檔案中 ex: 多重套用，階層樣式，標籤樣式…</p>\n<p>*可側邊開啟程式碼<br>（如有更好的寫法介紹還請多多指教，謝謝🙏） </p>\n<iframe src=\"https://codesandbox.io/embed/emotion-css-nqey4?fontsize=14&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"emotion CSS\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h1 id=\"開發插件-in-vscode\"><a href=\"#開發插件-in-vscode\" class=\"headerlink\" title=\"開發插件 in vscode\"></a>開發插件 in vscode</h1><p>vscode中有一些針對css-in-js的插件可以幫助開發效率．</p>\n<h2 id=\"Css-in-js\"><a href=\"#Css-in-js\" class=\"headerlink\" title=\"Css-in-js\"></a>Css-in-js</h2><p>可以透過指令將 CSS 選取後切換 css &amp; css-in-js 寫法，不用再自己改半天啦！！</p>\n<h2 id=\"vscode-styled-components\"><a href=\"#vscode-styled-components\" class=\"headerlink\" title=\"vscode-styled-components\"></a>vscode-styled-components</h2><p>可以自動完成在css-in-js區塊裡面的css補全提示．</p>\n<hr>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><table>\n<thead>\n<tr>\n<th>連結</th>\n<th>摘要與大致內容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://ithelp.ithome.com.tw/articles/10215415\" title=\"【Day 10】CSS &amp;&amp; Inline-style\">【Day 10】CSS &amp;&amp; Inline-style</a></td>\n<td>React CSS &amp;&amp; Inline-style 介紹，JS 物件寫法。</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element\">https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element</a></td>\n<td>多重classnames寫法</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/6844903993047531533\" title=\"谈一谈在React项目中使用css-in-js方案\">谈一谈在 React 项目中使用 css-in-js 方案</a></td>\n<td>鉴于 emotion 已经支持了 styled 模式，可以优先选择 emotion。內涵 emotion 用法示例(進階 待看 ☐👈)</td>\n</tr>\n<tr>\n<td><a href=\"https://ithelp.ithome.com.tw/articles/10223071\" title=\"[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用\">[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用</a></td>\n<td>使用 emotion 撰寫 styled components</td>\n</tr>\n<tr>\n<td><a href=\"https://medium.com/@shihKai/%E4%BB%8B%E7%B4%B9%E6%92%B0%E5%AF%ABreact-css%E7%9A%84%E7%A5%9E%E5%A5%97%E4%BB%B6styled-components-77455c849198\" title=\"介紹撰寫React CSS的神套件Styled Components\">介紹撰寫 React CSS 的神套件 Styled Components</a></td>\n<td>Styled Components sample</td>\n</tr>\n<tr>\n<td><a href=\"https://emotion.sh/docs/composition\">emotion Composition</a></td>\n<td>套用兩個樣式寫法</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library\">https://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library</a></td>\n<td>解釋要在import前加上/ ** @jsx jsx * /的原因</td>\n</tr>\n<tr>\n<td><a href=\"https://emotion.sh/docs/css-prop#jsx-pragma\">https://emotion.sh/docs/css-prop#jsx-pragma</a></td>\n<td>在文件頂部設置jsx編譯指示才可以使用css prop。尤其在無法配置babel配置（create-react-app，codesandbox等）的項目中。</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/61414356/change-style-of-material-ui-textfield-on-focus-react\">change-style-of-material-ui-textfield</a></td>\n<td>更改material-ui樣式的發問</td>\n</tr>\n<tr>\n<td><a href=\"https://vriad.com/essays/emotion-core-vs-vanilla-emotion\">Why you shouldn’t use @emotion/core</a></td>\n<td>有一篇文章分析不應使用emotion/core的原因</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<p>[✍練習ing]</p>\n<blockquote>\n<p>練習React JS寫法與 css-in-js( Emotion 庫) 撰寫 CSS</p>\n</blockquote>","more":"<h1 id=\"一般要在-React-中撰寫-CSS-有幾種做法\"><a href=\"#一般要在-React-中撰寫-CSS-有幾種做法\" class=\"headerlink\" title=\"一般要在 React 中撰寫 CSS 有幾種做法\"></a>一般要在 React 中撰寫 CSS 有幾種做法</h1><h2 id=\"1-撰寫在-CSS-檔案-再-import-套用。\"><a href=\"#1-撰寫在-CSS-檔案-再-import-套用。\" class=\"headerlink\" title=\"1.撰寫在.CSS 檔案,再 import 套用。\"></a>1.撰寫在.CSS 檔案,再 import 套用。</h2><ul>\n<li>把css寫在不同檔案中<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&quot;./styles.css&quot;</span>;</span><br><span class=\"line\">&lt;div className=<span class=\"string\">&quot;App&quot;</span>&gt;   可定義 className</span><br></pre></td></tr></table></figure>\n不便性：會需要考慮CSS優先度問題<h2 id=\"2-直接在對應地方用style-JS寫法-撰寫\"><a href=\"#2-直接在對應地方用style-JS寫法-撰寫\" class=\"headerlink\" title=\"2.直接在對應地方用style={JS寫法} 撰寫\"></a>2.直接在對應地方用style={JS寫法} 撰寫</h2></li>\n<li>直接用 Inline-style 在屬性中加入style<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 style =&#123;&#123;<span class=\"attr\">color</span>:<span class=\"string\">&#x27;red&#x27;</span>, <span class=\"attr\">backgroundColor</span>: <span class=\"string\">&quot;#3f51b5&quot;</span>&#125;&#125;&gt;JS寫法&lt;/h2&gt;</span><br><span class=\"line\">裡面是 JS 寫法，值需加<span class=\"string\">&#x27;&#x27;</span>，且-需改成駱駝式寫法(不能含-字元)</span><br></pre></td></tr></table></figure>\n不便性：會需要轉成ＪＳ寫法，有插件工具可以幫忙轉</li>\n</ul>\n<h2 id=\"3-套用css-in-js-庫-直接撰寫-CSS，不用再改-JS-寫法啦\"><a href=\"#3-套用css-in-js-庫-直接撰寫-CSS，不用再改-JS-寫法啦\" class=\"headerlink\" title=\"3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦\"></a>3.套用css-in-js 庫 直接撰寫 CSS，不用再改 JS 寫法啦</h2><p>  而 css-in-js 庫的主要有: styled-components, emotion, glamorous。</p>\n<h1 id=\"練習用emotion庫撰寫CSS\"><a href=\"#練習用emotion庫撰寫CSS\" class=\"headerlink\" title=\"練習用emotion庫撰寫CSS\"></a>練習用emotion庫撰寫CSS</h1><ul>\n<li>Emotion 是一個旨在使用 JavaScript 編寫 CSS 樣式的庫 - 加上兩個反引號，之間就可以直接撰寫 CSS ，有styled 寫法，本篇主要用這個練習看看。 </li>\n<li>styled 寫法<br>要建立 &lt; div&gt; 標籤樣式時，使用 styled.div；如果要建立的是 &lt; button&gt; 則是使用 styled.button 以此類推。</li>\n</ul>\n<h2 id=\"套用emotion庫撰寫\"><a href=\"#套用emotion庫撰寫\" class=\"headerlink\" title=\"套用emotion庫撰寫\"></a>套用emotion庫撰寫</h2><p>基礎使用方法：</p>\n<ol>\n<li>安裝 npm install –save emotion</li>\n<li>引入用className屬性套用<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; css &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;emotion&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">const</span> myStyle = css`</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">rebeccapurple</span>;</span></span><br><span class=\"line\"><span class=\"css\">`</span></span><br><span class=\"line\"> &lt;div className=<span class=\"string\">&quot;myStyle &quot;</span>&gt;myStyle樣式&lt;/div&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n更多範例可以看NPM上的emotion庫介紹<a href=\"https://www.npmjs.com/package/emotion\">emotion</a></li>\n</ol>\n<h3 id=\"套用-emotion-styled\"><a href=\"#套用-emotion-styled\" class=\"headerlink\" title=\"套用@emotion/styled\"></a>套用@emotion/styled</h3><p>基礎使用方法：</p>\n<ol>\n<li>引入npm i @emotion/styled</li>\n<li>撰寫標籤tag<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Container = styled.div<span class=\"string\">` //外面</span></span><br><span class=\"line\"><span class=\"string\">  background-color: skyblue;</span></span><br><span class=\"line\"><span class=\"string\">`</span>;</span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;Container  &gt;</span><br><span class=\"line\">     &lt;/Container &gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">    </span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>變數修改方法<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> displayNone = <span class=\"string\">&quot;block&quot;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Modal = styled.div<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">display: <span class=\"subst\">$&#123;displayNone&#125;</span>; </span></span><br><span class=\"line\"><span class=\"string\">  `</span>;</span><br></pre></td></tr></table></figure>\n<h3 id=\"套用-emotion-core庫撰寫\"><a href=\"#套用-emotion-core庫撰寫\" class=\"headerlink\" title=\"套用@emotion/core庫撰寫\"></a>套用@emotion/core庫撰寫</h3>官方推薦＠＠ 但使用上有一些限制</li>\n</ul>\n<p>基礎使用方法：</p>\n<ol>\n<li>引入npm i @emotion/core</li>\n<li>引入後用css屬性套用<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/** <span class=\"doctag\">@jsx </span>jsx */</span> <span class=\"keyword\">import</span> &#123; css, jsx &#125; <span class=\"keyword\">from</span> <span class=\"string\">&quot;@emotion/core&quot;</span>; </span><br><span class=\"line\"><span class=\"comment\">//在無法配置babel配置（create-react-app，codesandbox等）的項目中</span></span><br><span class=\"line\">一定要加前述<span class=\"comment\">/** <span class=\"doctag\">@jsx </span>jsx */</span> 才有效果喔！！！ 之前漏了查好久＠＠</span><br><span class=\"line\"></span><br><span class=\"line\">定義常數， CSS 區塊要用css`<span class=\"css\">`</span> 包起來</span><br><span class=\"line\">  <span class=\"keyword\">const</span> TextRed = css`</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-tag\">red</span>;</span></span><br><span class=\"line\"><span class=\"css\">  `</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">然後在要套用的地方加上css=&#123;xxx&#125;</span><br><span class=\"line\">  &lt;h2 css=&#123;TextRed&#125;&gt;emotion css 寫法&lt;/h2&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n更多介紹範例： <a href=\"https://emotion.sh/docs/introduction\" title=\"emotion Introduction\">emotion Introduction</a> </li>\n</ol>\n<hr>\n<h2 id=\"練習區✍\"><a href=\"#練習區✍\" class=\"headerlink\" title=\"練習區✍\"></a>練習區✍</h2><p>持續練習其他進階套用法並更新在範例檔案中 ex: 多重套用，階層樣式，標籤樣式…</p>\n<p>*可側邊開啟程式碼<br>（如有更好的寫法介紹還請多多指教，謝謝🙏） </p>\n<iframe src=\"https://codesandbox.io/embed/emotion-css-nqey4?fontsize=14&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"emotion CSS\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n<h1 id=\"開發插件-in-vscode\"><a href=\"#開發插件-in-vscode\" class=\"headerlink\" title=\"開發插件 in vscode\"></a>開發插件 in vscode</h1><p>vscode中有一些針對css-in-js的插件可以幫助開發效率．</p>\n<h2 id=\"Css-in-js\"><a href=\"#Css-in-js\" class=\"headerlink\" title=\"Css-in-js\"></a>Css-in-js</h2><p>可以透過指令將 CSS 選取後切換 css &amp; css-in-js 寫法，不用再自己改半天啦！！</p>\n<h2 id=\"vscode-styled-components\"><a href=\"#vscode-styled-components\" class=\"headerlink\" title=\"vscode-styled-components\"></a>vscode-styled-components</h2><p>可以自動完成在css-in-js區塊裡面的css補全提示．</p>\n<hr>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><table>\n<thead>\n<tr>\n<th>連結</th>\n<th>摘要與大致內容</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://ithelp.ithome.com.tw/articles/10215415\" title=\"【Day 10】CSS &amp;&amp; Inline-style\">【Day 10】CSS &amp;&amp; Inline-style</a></td>\n<td>React CSS &amp;&amp; Inline-style 介紹，JS 物件寫法。</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element\">https://github.com/rtsao/csjs/wiki/How-to-apply-multiple-classnames-to-an-element</a></td>\n<td>多重classnames寫法</td>\n</tr>\n<tr>\n<td><a href=\"https://juejin.im/post/6844903993047531533\" title=\"谈一谈在React项目中使用css-in-js方案\">谈一谈在 React 项目中使用 css-in-js 方案</a></td>\n<td>鉴于 emotion 已经支持了 styled 模式，可以优先选择 emotion。內涵 emotion 用法示例(進階 待看 ☐👈)</td>\n</tr>\n<tr>\n<td><a href=\"https://ithelp.ithome.com.tw/articles/10223071\" title=\"[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用\">[Day 14 - 即時天氣] 把 CSS 寫在 JavaScript 中！？ - CSS in JS 的使用</a></td>\n<td>使用 emotion 撰寫 styled components</td>\n</tr>\n<tr>\n<td><a href=\"https://medium.com/@shihKai/%E4%BB%8B%E7%B4%B9%E6%92%B0%E5%AF%ABreact-css%E7%9A%84%E7%A5%9E%E5%A5%97%E4%BB%B6styled-components-77455c849198\" title=\"介紹撰寫React CSS的神套件Styled Components\">介紹撰寫 React CSS 的神套件 Styled Components</a></td>\n<td>Styled Components sample</td>\n</tr>\n<tr>\n<td><a href=\"https://emotion.sh/docs/composition\">emotion Composition</a></td>\n<td>套用兩個樣式寫法</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library\">https://stackoverflow.com/questions/53803466/what-does-the-comment-jsx-jsx-do-in-the-emotion-css-in-js-library</a></td>\n<td>解釋要在import前加上/ ** @jsx jsx * /的原因</td>\n</tr>\n<tr>\n<td><a href=\"https://emotion.sh/docs/css-prop#jsx-pragma\">https://emotion.sh/docs/css-prop#jsx-pragma</a></td>\n<td>在文件頂部設置jsx編譯指示才可以使用css prop。尤其在無法配置babel配置（create-react-app，codesandbox等）的項目中。</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/61414356/change-style-of-material-ui-textfield-on-focus-react\">change-style-of-material-ui-textfield</a></td>\n<td>更改material-ui樣式的發問</td>\n</tr>\n<tr>\n<td><a href=\"https://vriad.com/essays/emotion-core-vs-vanilla-emotion\">Why you shouldn’t use @emotion/core</a></td>\n<td>有一篇文章分析不應使用emotion/core的原因</td>\n</tr>\n</tbody></table>"},{"title":"[✍練習][🚧進行中][react] 使用ramda整理資料","date":"2020-10-01T08:20:06.000Z","_content":"\n> ramda 一款實用的 JavaScript 函數编程库\n\n\n\n<!--more-->\n\n## 安裝 ramda\n\n\\$ npm install ramda\n\n## 使用\n\nimport \\* as R from \"ramda\";\n\n### 過濾資料\n\n```\nconst datas = [\n  {\n    name: \"Cupcake\",\n    pri: 1,\n    status: \"OPEN\",\n    type: \"blog\",\n    protein: 4.3\n  },\n  {\n    name: \"Donut\",\n    pri: 2,\n    status: \"OPEN\",\n    type: \"go\",\n    protein: 4.9\n  },]\n\n找出所有datas.name=\"Cupcake\"的資料\nlet f = R.filter(R.propEq(\"name\", \"Cupcake\"), datas);\n\n\n```\n\n## 延伸用法介紹\n\n### JavaScript 的 map() function\nArray.prototype.map()map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。\n[Array.prototype.map()](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n### react 列表與 Key\n含index 輸出介紹範例\n[react lists-and-keys](https://zh-hant.reactjs.org/docs/lists-and-keys.html)\n\n👇👇👇未完待續 您可以拉到底部先看參考文章👇👇👇\n\n---\n\n### 練習區 ✍\n\n- 持續練習並更新\n\n\n\n<iframe src=\"https://codesandbox.io/embed/reactramda-qvjp4?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react_ramda\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n>note class_name %} ## 網路參考文章 \n\n[官方文檔](https://ramdajs.com/)\n[中文官方文黨](https://ramda.cn/)\n[Display JSON Data in React JS](https://www.golangprograms.com/display-json-data-in-reactjs.html)\n[Ramda,从开始到重构](http://quanweili.com/2016/12/18/ramda-beginning-to-refactor.html)\n","source":"_posts/react-ramda.md","raw":"---\ntitle: '[✍練習][🚧進行中][react] 使用ramda整理資料'\ntags:\n  - react\n  - ramda\n  - map\n  - ing\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2020-10-01 16:20:06\n---\n\n> ramda 一款實用的 JavaScript 函數编程库\n\n\n\n<!--more-->\n\n## 安裝 ramda\n\n\\$ npm install ramda\n\n## 使用\n\nimport \\* as R from \"ramda\";\n\n### 過濾資料\n\n```\nconst datas = [\n  {\n    name: \"Cupcake\",\n    pri: 1,\n    status: \"OPEN\",\n    type: \"blog\",\n    protein: 4.3\n  },\n  {\n    name: \"Donut\",\n    pri: 2,\n    status: \"OPEN\",\n    type: \"go\",\n    protein: 4.9\n  },]\n\n找出所有datas.name=\"Cupcake\"的資料\nlet f = R.filter(R.propEq(\"name\", \"Cupcake\"), datas);\n\n\n```\n\n## 延伸用法介紹\n\n### JavaScript 的 map() function\nArray.prototype.map()map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。\n[Array.prototype.map()](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map)\n\n### react 列表與 Key\n含index 輸出介紹範例\n[react lists-and-keys](https://zh-hant.reactjs.org/docs/lists-and-keys.html)\n\n👇👇👇未完待續 您可以拉到底部先看參考文章👇👇👇\n\n---\n\n### 練習區 ✍\n\n- 持續練習並更新\n\n\n\n<iframe src=\"https://codesandbox.io/embed/reactramda-qvjp4?fontsize=14&hidenavigation=1&theme=dark\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"react_ramda\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n>note class_name %} ## 網路參考文章 \n\n[官方文檔](https://ramdajs.com/)\n[中文官方文黨](https://ramda.cn/)\n[Display JSON Data in React JS](https://www.golangprograms.com/display-json-data-in-reactjs.html)\n[Ramda,从开始到重构](http://quanweili.com/2016/12/18/ramda-beginning-to-refactor.html)\n","slug":"react-ramda","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbf002tkp2x61ba4igr","content":"<blockquote>\n<p>ramda 一款實用的 JavaScript 函數编程库</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"安裝-ramda\"><a href=\"#安裝-ramda\" class=\"headerlink\" title=\"安裝 ramda\"></a>安裝 ramda</h2><p>$ npm install ramda</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>import * as R from “ramda”;</p>\n<h3 id=\"過濾資料\"><a href=\"#過濾資料\" class=\"headerlink\" title=\"過濾資料\"></a>過濾資料</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const datas &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &quot;Cupcake&quot;,</span><br><span class=\"line\">    pri: 1,</span><br><span class=\"line\">    status: &quot;OPEN&quot;,</span><br><span class=\"line\">    type: &quot;blog&quot;,</span><br><span class=\"line\">    protein: 4.3</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &quot;Donut&quot;,</span><br><span class=\"line\">    pri: 2,</span><br><span class=\"line\">    status: &quot;OPEN&quot;,</span><br><span class=\"line\">    type: &quot;go&quot;,</span><br><span class=\"line\">    protein: 4.9</span><br><span class=\"line\">  &#125;,]</span><br><span class=\"line\"></span><br><span class=\"line\">找出所有datas.name&#x3D;&quot;Cupcake&quot;的資料</span><br><span class=\"line\">let f &#x3D; R.filter(R.propEq(&quot;name&quot;, &quot;Cupcake&quot;), datas);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"延伸用法介紹\"><a href=\"#延伸用法介紹\" class=\"headerlink\" title=\"延伸用法介紹\"></a>延伸用法介紹</h2><h3 id=\"JavaScript-的-map-function\"><a href=\"#JavaScript-的-map-function\" class=\"headerlink\" title=\"JavaScript 的 map() function\"></a>JavaScript 的 map() function</h3><p>Array.prototype.map()map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map()</a></p>\n<h3 id=\"react-列表與-Key\"><a href=\"#react-列表與-Key\" class=\"headerlink\" title=\"react 列表與 Key\"></a>react 列表與 Key</h3><p>含index 輸出介紹範例<br><a href=\"https://zh-hant.reactjs.org/docs/lists-and-keys.html\">react lists-and-keys</a></p>\n<p>👇👇👇未完待續 您可以拉到底部先看參考文章👇👇👇</p>\n<hr>\n<h3 id=\"練習區-✍\"><a href=\"#練習區-✍\" class=\"headerlink\" title=\"練習區 ✍\"></a>練習區 ✍</h3><ul>\n<li>持續練習並更新</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/reactramda-qvjp4?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"react_ramda\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<p><a href=\"https://ramdajs.com/\">官方文檔</a><br><a href=\"https://ramda.cn/\">中文官方文黨</a><br><a href=\"https://www.golangprograms.com/display-json-data-in-reactjs.html\">Display JSON Data in React JS</a><br><a href=\"http://quanweili.com/2016/12/18/ramda-beginning-to-refactor.html\">Ramda,从开始到重构</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>ramda 一款實用的 JavaScript 函數编程库</p>\n</blockquote>","more":"<h2 id=\"安裝-ramda\"><a href=\"#安裝-ramda\" class=\"headerlink\" title=\"安裝 ramda\"></a>安裝 ramda</h2><p>$ npm install ramda</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>import * as R from “ramda”;</p>\n<h3 id=\"過濾資料\"><a href=\"#過濾資料\" class=\"headerlink\" title=\"過濾資料\"></a>過濾資料</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const datas &#x3D; [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &quot;Cupcake&quot;,</span><br><span class=\"line\">    pri: 1,</span><br><span class=\"line\">    status: &quot;OPEN&quot;,</span><br><span class=\"line\">    type: &quot;blog&quot;,</span><br><span class=\"line\">    protein: 4.3</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">    name: &quot;Donut&quot;,</span><br><span class=\"line\">    pri: 2,</span><br><span class=\"line\">    status: &quot;OPEN&quot;,</span><br><span class=\"line\">    type: &quot;go&quot;,</span><br><span class=\"line\">    protein: 4.9</span><br><span class=\"line\">  &#125;,]</span><br><span class=\"line\"></span><br><span class=\"line\">找出所有datas.name&#x3D;&quot;Cupcake&quot;的資料</span><br><span class=\"line\">let f &#x3D; R.filter(R.propEq(&quot;name&quot;, &quot;Cupcake&quot;), datas);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"延伸用法介紹\"><a href=\"#延伸用法介紹\" class=\"headerlink\" title=\"延伸用法介紹\"></a>延伸用法介紹</h2><h3 id=\"JavaScript-的-map-function\"><a href=\"#JavaScript-的-map-function\" class=\"headerlink\" title=\"JavaScript 的 map() function\"></a>JavaScript 的 map() function</h3><p>Array.prototype.map()map() 方法會建立一個新的陣列，其內容為原陣列的每一個元素經由回呼函式運算後所回傳的結果之集合。<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">Array.prototype.map()</a></p>\n<h3 id=\"react-列表與-Key\"><a href=\"#react-列表與-Key\" class=\"headerlink\" title=\"react 列表與 Key\"></a>react 列表與 Key</h3><p>含index 輸出介紹範例<br><a href=\"https://zh-hant.reactjs.org/docs/lists-and-keys.html\">react lists-and-keys</a></p>\n<p>👇👇👇未完待續 您可以拉到底部先看參考文章👇👇👇</p>\n<hr>\n<h3 id=\"練習區-✍\"><a href=\"#練習區-✍\" class=\"headerlink\" title=\"練習區 ✍\"></a>練習區 ✍</h3><ul>\n<li>持續練習並更新</li>\n</ul>\n<iframe src=\"https://codesandbox.io/embed/reactramda-qvjp4?fontsize=14&hidenavigation=1&theme=dark\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"react_ramda\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<p><a href=\"https://ramdajs.com/\">官方文檔</a><br><a href=\"https://ramda.cn/\">中文官方文黨</a><br><a href=\"https://www.golangprograms.com/display-json-data-in-reactjs.html\">Display JSON Data in React JS</a><br><a href=\"http://quanweili.com/2016/12/18/ramda-beginning-to-refactor.html\">Ramda,从开始到重构</a></p>"},{"title":"[React][✍練習][🚧進行中] 使用recharts進行圖表繪製","date":"2020-11-14T14:17:59.000Z","_content":"\n>note info %}練習 Reactc 畫圖套件 recharts\n\n<!--more-->\n\n### Reactc 畫圖套件 recharts\n\n#### 導入\n\n```\n $ npm install recharts\n```\n\n#### 使用\n\n```\nimport { LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';\nfunction RenderLineChart() {\n  const data = [\n    { name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\n    { name: 'Page B', uv: 800, pv: 1200, amt: 2400 },\n    { name: 'Page C', uv: 900, pv: 3000, amt: 2400 },\n  ];\n  return (\n    <LineChart width={400} height={250} data={data}>\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n      <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#3f51b5\" />\n      <Line type=\"monotone\" dataKey=\"amt\" stroke=\"#666666\" />\n    </LineChart>\n  );\n}\n\n//在對應要放入的位置放入\n<RenderLineChart />\n```\n\n>note class_name %} ## 網路參考文章 \n\n[recharts](https://recharts.org/en-US)\n","source":"_posts/react-recharts.md","raw":"---\ntitle: \"[React][✍練習][🚧進行中] 使用recharts進行圖表繪製\"\ntags:\n  - react\n  - recharts\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2020-11-14 22:17:59\n---\n\n>note info %}練習 Reactc 畫圖套件 recharts\n\n<!--more-->\n\n### Reactc 畫圖套件 recharts\n\n#### 導入\n\n```\n $ npm install recharts\n```\n\n#### 使用\n\n```\nimport { LineChart, Line, XAxis, YAxis, Tooltip } from 'recharts';\nfunction RenderLineChart() {\n  const data = [\n    { name: 'Page A', uv: 400, pv: 2400, amt: 2400 },\n    { name: 'Page B', uv: 800, pv: 1200, amt: 2400 },\n    { name: 'Page C', uv: 900, pv: 3000, amt: 2400 },\n  ];\n  return (\n    <LineChart width={400} height={250} data={data}>\n      <XAxis dataKey=\"name\" />\n      <YAxis />\n      <Tooltip />\n      <Line type=\"monotone\" dataKey=\"uv\" stroke=\"#8884d8\" />\n      <Line type=\"monotone\" dataKey=\"pv\" stroke=\"#3f51b5\" />\n      <Line type=\"monotone\" dataKey=\"amt\" stroke=\"#666666\" />\n    </LineChart>\n  );\n}\n\n//在對應要放入的位置放入\n<RenderLineChart />\n```\n\n>note class_name %} ## 網路參考文章 \n\n[recharts](https://recharts.org/en-US)\n","slug":"react-recharts","published":1,"updated":"2023-01-22T07:05:18.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbg002xkp2x23yy0ucn","content":"<blockquote>\n<p>note info %}練習 Reactc 畫圖套件 recharts</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h3 id=\"Reactc-畫圖套件-recharts\"><a href=\"#Reactc-畫圖套件-recharts\" class=\"headerlink\" title=\"Reactc 畫圖套件 recharts\"></a>Reactc 畫圖套件 recharts</h3><h4 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install recharts</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; LineChart, Line, XAxis, YAxis, Tooltip &#125; from &#39;recharts&#39;;</span><br><span class=\"line\">function RenderLineChart() &#123;</span><br><span class=\"line\">  const data &#x3D; [</span><br><span class=\"line\">    &#123; name: &#39;Page A&#39;, uv: 400, pv: 2400, amt: 2400 &#125;,</span><br><span class=\"line\">    &#123; name: &#39;Page B&#39;, uv: 800, pv: 1200, amt: 2400 &#125;,</span><br><span class=\"line\">    &#123; name: &#39;Page C&#39;, uv: 900, pv: 3000, amt: 2400 &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;LineChart width&#x3D;&#123;400&#125; height&#x3D;&#123;250&#125; data&#x3D;&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;XAxis dataKey&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;YAxis &#x2F;&gt;</span><br><span class=\"line\">      &lt;Tooltip &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;uv&quot; stroke&#x3D;&quot;#8884d8&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;pv&quot; stroke&#x3D;&quot;#3f51b5&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;amt&quot; stroke&#x3D;&quot;#666666&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LineChart&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;在對應要放入的位置放入</span><br><span class=\"line\">&lt;RenderLineChart &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<p><a href=\"https://recharts.org/en-US\">recharts</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>note info %}練習 Reactc 畫圖套件 recharts</p>\n</blockquote>","more":"<h3 id=\"Reactc-畫圖套件-recharts\"><a href=\"#Reactc-畫圖套件-recharts\" class=\"headerlink\" title=\"Reactc 畫圖套件 recharts\"></a>Reactc 畫圖套件 recharts</h3><h4 id=\"導入\"><a href=\"#導入\" class=\"headerlink\" title=\"導入\"></a>導入</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install recharts</span><br></pre></td></tr></table></figure>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#123; LineChart, Line, XAxis, YAxis, Tooltip &#125; from &#39;recharts&#39;;</span><br><span class=\"line\">function RenderLineChart() &#123;</span><br><span class=\"line\">  const data &#x3D; [</span><br><span class=\"line\">    &#123; name: &#39;Page A&#39;, uv: 400, pv: 2400, amt: 2400 &#125;,</span><br><span class=\"line\">    &#123; name: &#39;Page B&#39;, uv: 800, pv: 1200, amt: 2400 &#125;,</span><br><span class=\"line\">    &#123; name: &#39;Page C&#39;, uv: 900, pv: 3000, amt: 2400 &#125;,</span><br><span class=\"line\">  ];</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;LineChart width&#x3D;&#123;400&#125; height&#x3D;&#123;250&#125; data&#x3D;&#123;data&#125;&gt;</span><br><span class=\"line\">      &lt;XAxis dataKey&#x3D;&quot;name&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;YAxis &#x2F;&gt;</span><br><span class=\"line\">      &lt;Tooltip &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;uv&quot; stroke&#x3D;&quot;#8884d8&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;pv&quot; stroke&#x3D;&quot;#3f51b5&quot; &#x2F;&gt;</span><br><span class=\"line\">      &lt;Line type&#x3D;&quot;monotone&quot; dataKey&#x3D;&quot;amt&quot; stroke&#x3D;&quot;#666666&quot; &#x2F;&gt;</span><br><span class=\"line\">    &lt;&#x2F;LineChart&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;在對應要放入的位置放入</span><br><span class=\"line\">&lt;RenderLineChart &#x2F;&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<p><a href=\"https://recharts.org/en-US\">recharts</a></p>"},{"title":"[React][✍作品集範例][🚧進行中]做to-do list頁面","date":"2020-10-02T15:26:02.000Z","_content":"\n> 練習用 React 做 to-do list 頁面\n\n- 功能：\n  - 可自由新增代辦任務/選擇優先度/預設類型/日期\n  - 新增列表後預設為OPEN，可更改為進行中（inprogress）->完成（Done)\n  - 列表可以依Tab顯示不同狀態\n  - 選取後可以刪除，或是右上角有全部清空按鈕\n\n[✍ 修改 ing]\n\n<!--more-->\n\n本篇用到套件與關鍵技術：\n\n- Material-ui table ＆新增修改資料\n- Material-ui tab\n- Material-ui Icon\n- Material-ui\n- 可輸入下拉選項框 + class 切換動畫\n- ramba for filter json 整理資料\n\n<div style=\"display:flex\">\n  <img  src=\"/images/post/todo.gif\" width=\"800px\" />\n  </div>\n\n- 線上 CodeSandBox\n<iframe src=\"https://codesandbox.io/embed/elastic-brown-t7it8?autoresize=1&fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"elastic-brown-t7it8\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n","source":"_posts/react-todo.md","raw":"---\ntitle: \"[React][✍作品集範例][🚧進行中]做to-do list頁面\"\ntags:\n  - react\n  - Material-ui\n  - 作品集範例\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2020-10-02 23:26:02\n---\n\n> 練習用 React 做 to-do list 頁面\n\n- 功能：\n  - 可自由新增代辦任務/選擇優先度/預設類型/日期\n  - 新增列表後預設為OPEN，可更改為進行中（inprogress）->完成（Done)\n  - 列表可以依Tab顯示不同狀態\n  - 選取後可以刪除，或是右上角有全部清空按鈕\n\n[✍ 修改 ing]\n\n<!--more-->\n\n本篇用到套件與關鍵技術：\n\n- Material-ui table ＆新增修改資料\n- Material-ui tab\n- Material-ui Icon\n- Material-ui\n- 可輸入下拉選項框 + class 切換動畫\n- ramba for filter json 整理資料\n\n<div style=\"display:flex\">\n  <img  src=\"/images/post/todo.gif\" width=\"800px\" />\n  </div>\n\n- 線上 CodeSandBox\n<iframe src=\"https://codesandbox.io/embed/elastic-brown-t7it8?autoresize=1&fontsize=14&hidenavigation=1&theme=dark&view=preview\"\n     style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\"\n     title=\"elastic-brown-t7it8\"\n     allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\"\n     sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"\n   ></iframe>\n\n\n","slug":"react-todo","published":1,"updated":"2022-05-01T07:09:56.195Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbi0031kp2x9ag78cdo","content":"<blockquote>\n<p>練習用 React 做 to-do list 頁面</p>\n</blockquote>\n<ul>\n<li>功能：<ul>\n<li>可自由新增代辦任務/選擇優先度/預設類型/日期</li>\n<li>新增列表後預設為OPEN，可更改為進行中（inprogress）-&gt;完成（Done)</li>\n<li>列表可以依Tab顯示不同狀態</li>\n<li>選取後可以刪除，或是右上角有全部清空按鈕</li>\n</ul>\n</li>\n</ul>\n<p>[✍ 修改 ing]</p>\n<a id=\"more\"></a>\n\n<p>本篇用到套件與關鍵技術：</p>\n<ul>\n<li>Material-ui table ＆新增修改資料</li>\n<li>Material-ui tab</li>\n<li>Material-ui Icon</li>\n<li>Material-ui</li>\n<li>可輸入下拉選項框 + class 切換動畫</li>\n<li>ramba for filter json 整理資料</li>\n</ul>\n<div style=\"display:flex\">\n  <img src=\"/images/post/todo.gif\" width=\"800px\">\n  </div>\n\n<ul>\n<li>線上 CodeSandBox<iframe src=\"https://codesandbox.io/embed/elastic-brown-t7it8?autoresize=1&fontsize=14&hidenavigation=1&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"elastic-brown-t7it8\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>練習用 React 做 to-do list 頁面</p>\n</blockquote>\n<ul>\n<li>功能：<ul>\n<li>可自由新增代辦任務/選擇優先度/預設類型/日期</li>\n<li>新增列表後預設為OPEN，可更改為進行中（inprogress）-&gt;完成（Done)</li>\n<li>列表可以依Tab顯示不同狀態</li>\n<li>選取後可以刪除，或是右上角有全部清空按鈕</li>\n</ul>\n</li>\n</ul>\n<p>[✍ 修改 ing]</p>","more":"<p>本篇用到套件與關鍵技術：</p>\n<ul>\n<li>Material-ui table ＆新增修改資料</li>\n<li>Material-ui tab</li>\n<li>Material-ui Icon</li>\n<li>Material-ui</li>\n<li>可輸入下拉選項框 + class 切換動畫</li>\n<li>ramba for filter json 整理資料</li>\n</ul>\n<div style=\"display:flex\">\n  <img src=\"/images/post/todo.gif\" width=\"800px\">\n  </div>\n\n<ul>\n<li>線上 CodeSandBox<iframe src=\"https://codesandbox.io/embed/elastic-brown-t7it8?autoresize=1&fontsize=14&hidenavigation=1&theme=dark&view=preview\" style=\"width:100%; height:500px; border:0; border-radius: 4px; overflow:hidden;\" title=\"elastic-brown-t7it8\" allow=\"accelerometer; ambient-light-sensor; camera; encrypted-media; geolocation; gyroscope; hid; microphone; midi; payment; usb; vr; xr-spatial-tracking\" sandbox=\"allow-forms allow-modals allow-popups allow-presentation allow-same-origin allow-scripts\"></iframe>\n\n\n</li>\n</ul>"},{"title":"[React 01] 初始開發環境設定","date":"2020-05-15T23:42:53.000Z","_content":"\n\n>快速安裝 React 專案與建置開發環境，創建React App是創建單頁React應用程序的官方支持方式。 它提供了無需配置的現代化構建設置。 \n\n\n\n<!--more-->\n\n\n#### 安裝node.js (npm)\n- Node.js是能執行JavaScript 的執行環境，讓JS可以在伺服器(瀏覽器以外)運作\n- npm（全稱 Node Package Manager，即「node包管理器」）是Node.js預設的、用JavaScript編寫的軟體套件管理系統\n\n#### 使用 npm 安裝create-react-app\n```bash\nnpm install -g create-react-app\n/usr/local/bin/create-react-app -> /usr/local/lib/node_modules/create-react-app/index.js\n+ create-react-app@3.4.1\n~ create-react-app --version\n3.4.1\n```\n-  -g 代表全局安裝\n- create-react-app 是適合學習 React 的環境及單頁（single-page）應用程式，不需再安装或配置 Webpack 或 Babel 等工具， 它們是預先配置好並隐藏的\n-  create-react-app --version 確認版本的指令- \n\n\n#### 使用create-react-app 建立專案\n```bash\n～create-react-app 01-create-react-app\nCreating a new React app in /Users/xxx/front/01-create-react-app.\n```\n\n#### 啟動專案\n```bash\nnpm start\n```\n就會看到一個網頁介面啟動囉！！！！！！\n\n*註：當重新下載專案時需要先下npm install後才能npm start\n*在本地可以看到node_modules的資料夾\n\n#### create-react-app 內容\n架構\n```\nREADME.md               \npackage.json //和設定打包工具(webpack)有關\nnode_modules            \npublic\npackage-lock.json       \nsrc\n```\n\n- public/index.html\n基本的HTML架構，內有\n```html\n\"<div id=\"root\"></div>\"\n```\n\n- 而在/src/index.js 則有渲染DOM的程式碼\n```\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n#### 完成開發生成靜態與部署\n```\nnpm run build\n```\n當編譯結束時，專案目錄底下會出現build資料夾，裡面的檔案就是所需要的靜態檔案(可以點開index.html試試看)，其他檔案在部署時不用上傳。\n\n* 實作直接打開ＨＴＭＬ或是用live server都會一片空白？？ 但實際起python web server可以看到 (待釐清)\n\n#### vscode 外掛\n- ESlint 插件 -> 一個Javascript Linter，是一種靜態代碼分析工具，用於識別在JavaScript代碼中發現的有問題的模式，可以定義和加載自定義規則。ESLint涵蓋了代碼質量和編碼風格問題。\n- JS JSX Snippets  插件  ->程式碼快速鍵\n\n------------\n#### 延伸閱讀 [wait]\n[有看沒懂的npx方式](https://www.itread01.com/content/1544755994.html \"有看沒懂的npx方式\")\n\n","source":"_posts/react01-create-react-app.md","raw":"---\ntitle: \"[React 01] 初始開發環境設定\"\ntags:\n  - react\n  - vscode\n  - lint\n  - npm\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2020-05-16T15:42:53+08:00\n---\n\n\n>快速安裝 React 專案與建置開發環境，創建React App是創建單頁React應用程序的官方支持方式。 它提供了無需配置的現代化構建設置。 \n\n\n\n<!--more-->\n\n\n#### 安裝node.js (npm)\n- Node.js是能執行JavaScript 的執行環境，讓JS可以在伺服器(瀏覽器以外)運作\n- npm（全稱 Node Package Manager，即「node包管理器」）是Node.js預設的、用JavaScript編寫的軟體套件管理系統\n\n#### 使用 npm 安裝create-react-app\n```bash\nnpm install -g create-react-app\n/usr/local/bin/create-react-app -> /usr/local/lib/node_modules/create-react-app/index.js\n+ create-react-app@3.4.1\n~ create-react-app --version\n3.4.1\n```\n-  -g 代表全局安裝\n- create-react-app 是適合學習 React 的環境及單頁（single-page）應用程式，不需再安装或配置 Webpack 或 Babel 等工具， 它們是預先配置好並隐藏的\n-  create-react-app --version 確認版本的指令- \n\n\n#### 使用create-react-app 建立專案\n```bash\n～create-react-app 01-create-react-app\nCreating a new React app in /Users/xxx/front/01-create-react-app.\n```\n\n#### 啟動專案\n```bash\nnpm start\n```\n就會看到一個網頁介面啟動囉！！！！！！\n\n*註：當重新下載專案時需要先下npm install後才能npm start\n*在本地可以看到node_modules的資料夾\n\n#### create-react-app 內容\n架構\n```\nREADME.md               \npackage.json //和設定打包工具(webpack)有關\nnode_modules            \npublic\npackage-lock.json       \nsrc\n```\n\n- public/index.html\n基本的HTML架構，內有\n```html\n\"<div id=\"root\"></div>\"\n```\n\n- 而在/src/index.js 則有渲染DOM的程式碼\n```\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n```\n\n#### 完成開發生成靜態與部署\n```\nnpm run build\n```\n當編譯結束時，專案目錄底下會出現build資料夾，裡面的檔案就是所需要的靜態檔案(可以點開index.html試試看)，其他檔案在部署時不用上傳。\n\n* 實作直接打開ＨＴＭＬ或是用live server都會一片空白？？ 但實際起python web server可以看到 (待釐清)\n\n#### vscode 外掛\n- ESlint 插件 -> 一個Javascript Linter，是一種靜態代碼分析工具，用於識別在JavaScript代碼中發現的有問題的模式，可以定義和加載自定義規則。ESLint涵蓋了代碼質量和編碼風格問題。\n- JS JSX Snippets  插件  ->程式碼快速鍵\n\n------------\n#### 延伸閱讀 [wait]\n[有看沒懂的npx方式](https://www.itread01.com/content/1544755994.html \"有看沒懂的npx方式\")\n\n","slug":"react01-create-react-app","published":1,"updated":"2023-01-22T07:03:26.043Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbj0034kp2x3f8l9jbp","content":"<blockquote>\n<p>快速安裝 React 專案與建置開發環境，創建React App是創建單頁React應用程序的官方支持方式。 它提供了無需配置的現代化構建設置。 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n\n<h4 id=\"安裝node-js-npm\"><a href=\"#安裝node-js-npm\" class=\"headerlink\" title=\"安裝node.js (npm)\"></a>安裝node.js (npm)</h4><ul>\n<li>Node.js是能執行JavaScript 的執行環境，讓JS可以在伺服器(瀏覽器以外)運作</li>\n<li>npm（全稱 Node Package Manager，即「node包管理器」）是Node.js預設的、用JavaScript編寫的軟體套件管理系統</li>\n</ul>\n<h4 id=\"使用-npm-安裝create-react-app\"><a href=\"#使用-npm-安裝create-react-app\" class=\"headerlink\" title=\"使用 npm 安裝create-react-app\"></a>使用 npm 安裝create-react-app</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/create-react-app -&gt; /usr/<span class=\"built_in\">local</span>/lib/node_modules/create-react-app/index.js</span><br><span class=\"line\">+ create-react-app@3.4.1</span><br><span class=\"line\">~ create-react-app --version</span><br><span class=\"line\">3.4.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li> -g 代表全局安裝</li>\n<li>create-react-app 是適合學習 React 的環境及單頁（single-page）應用程式，不需再安装或配置 Webpack 或 Babel 等工具， 它們是預先配置好並隐藏的</li>\n<li> create-react-app –version 確認版本的指令- </li>\n</ul>\n<h4 id=\"使用create-react-app-建立專案\"><a href=\"#使用create-react-app-建立專案\" class=\"headerlink\" title=\"使用create-react-app 建立專案\"></a>使用create-react-app 建立專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～create-react-app 01-create-react-app</span><br><span class=\"line\">Creating a new React app <span class=\"keyword\">in</span> /Users/xxx/front/01-create-react-app.</span><br></pre></td></tr></table></figure>\n<h4 id=\"啟動專案\"><a href=\"#啟動專案\" class=\"headerlink\" title=\"啟動專案\"></a>啟動專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>就會看到一個網頁介面啟動囉！！！！！！</p>\n<p>*註：當重新下載專案時需要先下npm install後才能npm start<br>*在本地可以看到node_modules的資料夾</p>\n<h4 id=\"create-react-app-內容\"><a href=\"#create-react-app-內容\" class=\"headerlink\" title=\"create-react-app 內容\"></a>create-react-app 內容</h4><p>架構</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">README.md               </span><br><span class=\"line\">package.json &#x2F;&#x2F;和設定打包工具(webpack)有關</span><br><span class=\"line\">node_modules            </span><br><span class=\"line\">public</span><br><span class=\"line\">package-lock.json       </span><br><span class=\"line\">src</span><br></pre></td></tr></table></figure>\n<ul>\n<li>public/index.html<br>基本的HTML架構，內有<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure></li>\n<li>而在/src/index.js 則有渲染DOM的程式碼<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;App &#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;React.StrictMode&gt;,</span><br><span class=\"line\">  document.getElementById(&#39;root&#39;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"完成開發生成靜態與部署\"><a href=\"#完成開發生成靜態與部署\" class=\"headerlink\" title=\"完成開發生成靜態與部署\"></a>完成開發生成靜態與部署</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n當編譯結束時，專案目錄底下會出現build資料夾，裡面的檔案就是所需要的靜態檔案(可以點開index.html試試看)，其他檔案在部署時不用上傳。</li>\n</ul>\n<ul>\n<li>實作直接打開ＨＴＭＬ或是用live server都會一片空白？？ 但實際起python web server可以看到 (待釐清)</li>\n</ul>\n<h4 id=\"vscode-外掛\"><a href=\"#vscode-外掛\" class=\"headerlink\" title=\"vscode 外掛\"></a>vscode 外掛</h4><ul>\n<li>ESlint 插件 -&gt; 一個Javascript Linter，是一種靜態代碼分析工具，用於識別在JavaScript代碼中發現的有問題的模式，可以定義和加載自定義規則。ESLint涵蓋了代碼質量和編碼風格問題。</li>\n<li>JS JSX Snippets  插件  -&gt;程式碼快速鍵</li>\n</ul>\n<hr>\n<h4 id=\"延伸閱讀-wait\"><a href=\"#延伸閱讀-wait\" class=\"headerlink\" title=\"延伸閱讀 [wait]\"></a>延伸閱讀 [wait]</h4><p><a href=\"https://www.itread01.com/content/1544755994.html\" title=\"有看沒懂的npx方式\">有看沒懂的npx方式</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>快速安裝 React 專案與建置開發環境，創建React App是創建單頁React應用程序的官方支持方式。 它提供了無需配置的現代化構建設置。 </p>\n</blockquote>","more":"<h4 id=\"安裝node-js-npm\"><a href=\"#安裝node-js-npm\" class=\"headerlink\" title=\"安裝node.js (npm)\"></a>安裝node.js (npm)</h4><ul>\n<li>Node.js是能執行JavaScript 的執行環境，讓JS可以在伺服器(瀏覽器以外)運作</li>\n<li>npm（全稱 Node Package Manager，即「node包管理器」）是Node.js預設的、用JavaScript編寫的軟體套件管理系統</li>\n</ul>\n<h4 id=\"使用-npm-安裝create-react-app\"><a href=\"#使用-npm-安裝create-react-app\" class=\"headerlink\" title=\"使用 npm 安裝create-react-app\"></a>使用 npm 安裝create-react-app</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g create-react-app</span><br><span class=\"line\">/usr/<span class=\"built_in\">local</span>/bin/create-react-app -&gt; /usr/<span class=\"built_in\">local</span>/lib/node_modules/create-react-app/index.js</span><br><span class=\"line\">+ create-react-app@3.4.1</span><br><span class=\"line\">~ create-react-app --version</span><br><span class=\"line\">3.4.1</span><br></pre></td></tr></table></figure>\n<ul>\n<li> -g 代表全局安裝</li>\n<li>create-react-app 是適合學習 React 的環境及單頁（single-page）應用程式，不需再安装或配置 Webpack 或 Babel 等工具， 它們是預先配置好並隐藏的</li>\n<li> create-react-app –version 確認版本的指令- </li>\n</ul>\n<h4 id=\"使用create-react-app-建立專案\"><a href=\"#使用create-react-app-建立專案\" class=\"headerlink\" title=\"使用create-react-app 建立專案\"></a>使用create-react-app 建立專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">～create-react-app 01-create-react-app</span><br><span class=\"line\">Creating a new React app <span class=\"keyword\">in</span> /Users/xxx/front/01-create-react-app.</span><br></pre></td></tr></table></figure>\n<h4 id=\"啟動專案\"><a href=\"#啟動專案\" class=\"headerlink\" title=\"啟動專案\"></a>啟動專案</h4><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm start</span><br></pre></td></tr></table></figure>\n<p>就會看到一個網頁介面啟動囉！！！！！！</p>\n<p>*註：當重新下載專案時需要先下npm install後才能npm start<br>*在本地可以看到node_modules的資料夾</p>\n<h4 id=\"create-react-app-內容\"><a href=\"#create-react-app-內容\" class=\"headerlink\" title=\"create-react-app 內容\"></a>create-react-app 內容</h4><p>架構</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">README.md               </span><br><span class=\"line\">package.json &#x2F;&#x2F;和設定打包工具(webpack)有關</span><br><span class=\"line\">node_modules            </span><br><span class=\"line\">public</span><br><span class=\"line\">package-lock.json       </span><br><span class=\"line\">src</span><br></pre></td></tr></table></figure>\n<ul>\n<li>public/index.html<br>基本的HTML架構，內有<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;<span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;root&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span>&quot;</span><br></pre></td></tr></table></figure></li>\n<li>而在/src/index.js 則有渲染DOM的程式碼<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;App &#x2F;&gt;</span><br><span class=\"line\">  &lt;&#x2F;React.StrictMode&gt;,</span><br><span class=\"line\">  document.getElementById(&#39;root&#39;)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h4 id=\"完成開發生成靜態與部署\"><a href=\"#完成開發生成靜態與部署\" class=\"headerlink\" title=\"完成開發生成靜態與部署\"></a>完成開發生成靜態與部署</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm run build</span><br></pre></td></tr></table></figure>\n當編譯結束時，專案目錄底下會出現build資料夾，裡面的檔案就是所需要的靜態檔案(可以點開index.html試試看)，其他檔案在部署時不用上傳。</li>\n</ul>\n<ul>\n<li>實作直接打開ＨＴＭＬ或是用live server都會一片空白？？ 但實際起python web server可以看到 (待釐清)</li>\n</ul>\n<h4 id=\"vscode-外掛\"><a href=\"#vscode-外掛\" class=\"headerlink\" title=\"vscode 外掛\"></a>vscode 外掛</h4><ul>\n<li>ESlint 插件 -&gt; 一個Javascript Linter，是一種靜態代碼分析工具，用於識別在JavaScript代碼中發現的有問題的模式，可以定義和加載自定義規則。ESLint涵蓋了代碼質量和編碼風格問題。</li>\n<li>JS JSX Snippets  插件  -&gt;程式碼快速鍵</li>\n</ul>\n<hr>\n<h4 id=\"延伸閱讀-wait\"><a href=\"#延伸閱讀-wait\" class=\"headerlink\" title=\"延伸閱讀 [wait]\"></a>延伸閱讀 [wait]</h4><p><a href=\"https://www.itread01.com/content/1544755994.html\" title=\"有看沒懂的npx方式\">有看沒懂的npx方式</a></p>"},{"title":"[React 02] react JSX 基本語法","date":"2020-05-30T02:32:15.000Z","_content":"\n>上一篇已建立一個基本專案，開始可以對index.js做一些改寫練習，並使用JSX語法 \n\n\n<!--more-->\n\n# JSX \n看起來是html與ＪＳ混合使用，比較接近 JavaScript 而不是 HTML，ＪＳＸ允許你使用 JavaScript 所有的功能。\n- Ref :https://zh-hant.reactjs.org/docs/introducing-jsx.html\n\n## html 區域\n剛剛產生的public/index.html，含有基本HTML範本id=\"root\"的div區塊<br>\n```\n\"<div id=\"root\"></div>\"\n```\n------------\n\n\n## React 中的 JSX 區域\n接著看一下src/index.js裡的程式碼\n\n### 基本範例: 直接撰寫html\n```javascript\nReactDOM.render(<App />, document.getElementById('root'));\n\n或是改成\nReactDOM.render(\n  <h1> Hello world!</h1>,\ndocument.getElementById('root'));\n```\n解說：\n- 由 React DOM 函式將元素渲染 ROOT 這個DOM 節點中\n- 而將 html當參數傳遞是使用一種Javascript語法: JSX\n```\nconst name = 'Josh Perez'; //一般javascript\nconst element = <h1>Hello, {name}</h1>;//混和的html與字串 特殊JSX語法\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n```\n\n#### 關於Babel\n 是JavaScript 前處理器，編譯器，主要能轉換JSX與ES6成各瀏覽器支持的ＪＳ\n```\nconst element = (\n  <h1 className=\"text\">\n    Hello, World!\n  </h1>\n);\n```\nBabel 將 JSX 編譯為呼叫 React.createElement() 的程式。\n```\nconst element = React.createElement(\n  'h1',\n  {className: 'text'},\n  'Hello, World!'\n);\n```\n------------\n### 範例: 在html中可以用{JS} 表達式崁入變數\n\n```javascript\n//js函式宣告或是變數宣告區\nconst styleRed = { color: 'red' };\nconst pic=()=>{ //html語法可以當作參數傳遞\n  return (\n  <div><img src=\"https://picsum.photos/200/200?image=229\" alt=\"\" class=\"circle-profile\"/></div>);\n}\nvar arr = [\n        <h1>REACT學習</h1>,\n        <h2>如何使用JSX！</h2>,\n];\n\nReactDOM.render(\n<React.StrictMode>\n   <h1 style = { styleRed } > Hello, world! </h1>\n   <div>{ pic()} </div> {/*註解這樣寫*/}\n   <div>{arr}</div>,{/*可以放入數組*/}\n </React.StrictMode>,\n    document.getElementById('root')\n);\n\n- 可在 html 標籤中利用 {} 寫 javascript 表示式\n- 其中style = {{ color: 'red' }} 這樣的表示也可以。\n```\n\n\n### 範例: 帶入屬性命名與Event\n```javascript\nconst getValue=(event)=>{\n  console.log(event.target.value)\n}\nReactDOM.render(\n<React.StrictMode>\n    <h1 className = \"title\" > Hello, world! </h1>\n\t <button value onClick={getValue}>按下以取得數值 </button>\n    <button value={true} onClick={getValue}>按下以取得數值 </button>\n</React.StrictMode>,\n    document.getElementById('root')\n);\n```\n- 駱駝式命名\n\t- class 要用 className 然後可以在 style.css中更改樣式\n\t- onclick 也要改onClick{函數名稱} 駱駝式命名\n\t- 實測命名打錯 console 會出現報 Warning: Invalid DOM property `class`. Did you mean `className`?\n- 輸入類的元件button/input/textarea互動事件觸發時，函式只會接收到一個event類別的參數，並不能傳遞其他參數\n- 布林=true 的屬性值可以不寫\n\n### 範例 JSX引入Inline-style\n```\nexport default function App() {\n  return (\n    <div className=\"App\" style={{\n      color: 'blue',fontSize:'19px'\n    }}>\n    </div>\n  );\n}\n\n```\n- 在style內的是ＪＳ物件也可以把他們只給一個const變數\n- 內容與css不同的是必須是小寫駱駝且去除'-'\n- 這種寫法的缺點是不行用hover等特殊效果，需利用其他模組化stylr寫法\n\n\n\n\n\n# 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- [【React.js入門 - 06】 JSX](https://ithelp.ithome.com.tw/articles/10216468)\n- [React篇: JSX語法撰寫指引](https://eyesofkids.gitbooks.io/react-basic-zh-tw/content/day18_deeper_jsx/ \"React篇: JSX語法撰寫指引\")","source":"_posts/react02-jsx.md","raw":"---\ntitle: \"[React 02] react JSX 基本語法\"\ntags:\n  - react\n  - JSX\n  - Babel\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2020-05-30T18:32:15+08:00\n---\n\n>上一篇已建立一個基本專案，開始可以對index.js做一些改寫練習，並使用JSX語法 \n\n\n<!--more-->\n\n# JSX \n看起來是html與ＪＳ混合使用，比較接近 JavaScript 而不是 HTML，ＪＳＸ允許你使用 JavaScript 所有的功能。\n- Ref :https://zh-hant.reactjs.org/docs/introducing-jsx.html\n\n## html 區域\n剛剛產生的public/index.html，含有基本HTML範本id=\"root\"的div區塊<br>\n```\n\"<div id=\"root\"></div>\"\n```\n------------\n\n\n## React 中的 JSX 區域\n接著看一下src/index.js裡的程式碼\n\n### 基本範例: 直接撰寫html\n```javascript\nReactDOM.render(<App />, document.getElementById('root'));\n\n或是改成\nReactDOM.render(\n  <h1> Hello world!</h1>,\ndocument.getElementById('root'));\n```\n解說：\n- 由 React DOM 函式將元素渲染 ROOT 這個DOM 節點中\n- 而將 html當參數傳遞是使用一種Javascript語法: JSX\n```\nconst name = 'Josh Perez'; //一般javascript\nconst element = <h1>Hello, {name}</h1>;//混和的html與字串 特殊JSX語法\n\nReactDOM.render(\n  element,\n  document.getElementById('root')\n);\n\n```\n\n#### 關於Babel\n 是JavaScript 前處理器，編譯器，主要能轉換JSX與ES6成各瀏覽器支持的ＪＳ\n```\nconst element = (\n  <h1 className=\"text\">\n    Hello, World!\n  </h1>\n);\n```\nBabel 將 JSX 編譯為呼叫 React.createElement() 的程式。\n```\nconst element = React.createElement(\n  'h1',\n  {className: 'text'},\n  'Hello, World!'\n);\n```\n------------\n### 範例: 在html中可以用{JS} 表達式崁入變數\n\n```javascript\n//js函式宣告或是變數宣告區\nconst styleRed = { color: 'red' };\nconst pic=()=>{ //html語法可以當作參數傳遞\n  return (\n  <div><img src=\"https://picsum.photos/200/200?image=229\" alt=\"\" class=\"circle-profile\"/></div>);\n}\nvar arr = [\n        <h1>REACT學習</h1>,\n        <h2>如何使用JSX！</h2>,\n];\n\nReactDOM.render(\n<React.StrictMode>\n   <h1 style = { styleRed } > Hello, world! </h1>\n   <div>{ pic()} </div> {/*註解這樣寫*/}\n   <div>{arr}</div>,{/*可以放入數組*/}\n </React.StrictMode>,\n    document.getElementById('root')\n);\n\n- 可在 html 標籤中利用 {} 寫 javascript 表示式\n- 其中style = {{ color: 'red' }} 這樣的表示也可以。\n```\n\n\n### 範例: 帶入屬性命名與Event\n```javascript\nconst getValue=(event)=>{\n  console.log(event.target.value)\n}\nReactDOM.render(\n<React.StrictMode>\n    <h1 className = \"title\" > Hello, world! </h1>\n\t <button value onClick={getValue}>按下以取得數值 </button>\n    <button value={true} onClick={getValue}>按下以取得數值 </button>\n</React.StrictMode>,\n    document.getElementById('root')\n);\n```\n- 駱駝式命名\n\t- class 要用 className 然後可以在 style.css中更改樣式\n\t- onclick 也要改onClick{函數名稱} 駱駝式命名\n\t- 實測命名打錯 console 會出現報 Warning: Invalid DOM property `class`. Did you mean `className`?\n- 輸入類的元件button/input/textarea互動事件觸發時，函式只會接收到一個event類別的參數，並不能傳遞其他參數\n- 布林=true 的屬性值可以不寫\n\n### 範例 JSX引入Inline-style\n```\nexport default function App() {\n  return (\n    <div className=\"App\" style={{\n      color: 'blue',fontSize:'19px'\n    }}>\n    </div>\n  );\n}\n\n```\n- 在style內的是ＪＳ物件也可以把他們只給一個const變數\n- 內容與css不同的是必須是小寫駱駝且去除'-'\n- 這種寫法的缺點是不行用hover等特殊效果，需利用其他模組化stylr寫法\n\n\n\n\n\n# 網路參考文章\n>note warning %} <span style=\"font-size: 9px;\">\n學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇\n</span>\n- [【React.js入門 - 06】 JSX](https://ithelp.ithome.com.tw/articles/10216468)\n- [React篇: JSX語法撰寫指引](https://eyesofkids.gitbooks.io/react-basic-zh-tw/content/day18_deeper_jsx/ \"React篇: JSX語法撰寫指引\")","slug":"react02-jsx","published":1,"updated":"2023-01-22T07:05:18.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbk0036kp2x9umv4180","content":"<blockquote>\n<p>上一篇已建立一個基本專案，開始可以對index.js做一些改寫練習，並使用JSX語法 </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h1 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h1><p>看起來是html與ＪＳ混合使用，比較接近 JavaScript 而不是 HTML，ＪＳＸ允許你使用 JavaScript 所有的功能。</p>\n<ul>\n<li>Ref :<a href=\"https://zh-hant.reactjs.org/docs/introducing-jsx.html\">https://zh-hant.reactjs.org/docs/introducing-jsx.html</a></li>\n</ul>\n<h2 id=\"html-區域\"><a href=\"#html-區域\" class=\"headerlink\" title=\"html 區域\"></a>html 區域</h2><p>剛剛產生的public/index.html，含有基本HTML範本id=”root”的div區塊<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"React-中的-JSX-區域\"><a href=\"#React-中的-JSX-區域\" class=\"headerlink\" title=\"React 中的 JSX 區域\"></a>React 中的 JSX 區域</h2><p>接著看一下src/index.js裡的程式碼</p>\n<h3 id=\"基本範例-直接撰寫html\"><a href=\"#基本範例-直接撰寫html\" class=\"headerlink\" title=\"基本範例: 直接撰寫html\"></a>基本範例: 直接撰寫html</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">或是改成</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt; Hello world!&lt;/h1&gt;,</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p>解說：</p>\n<ul>\n<li>由 React DOM 函式將元素渲染 ROOT 這個DOM 節點中</li>\n<li>而將 html當參數傳遞是使用一種Javascript語法: JSX<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name &#x3D; &#39;Josh Perez&#39;; &#x2F;&#x2F;一般javascript</span><br><span class=\"line\">const element &#x3D; &lt;h1&gt;Hello, &#123;name&#125;&lt;&#x2F;h1&gt;;&#x2F;&#x2F;混和的html與字串 特殊JSX語法</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  document.getElementById(&#39;root&#39;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"關於Babel\"><a href=\"#關於Babel\" class=\"headerlink\" title=\"關於Babel\"></a>關於Babel</h4>是JavaScript 前處理器，編譯器，主要能轉換JSX與ES6成各瀏覽器支持的ＪＳ<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const element &#x3D; (</span><br><span class=\"line\">  &lt;h1 className&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">    Hello, World!</span><br><span class=\"line\">  &lt;&#x2F;h1&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\nBabel 將 JSX 編譯為呼叫 React.createElement() 的程式。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const element &#x3D; React.createElement(</span><br><span class=\"line\">  &#39;h1&#39;,</span><br><span class=\"line\">  &#123;className: &#39;text&#39;&#125;,</span><br><span class=\"line\">  &#39;Hello, World!&#39;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"範例-在html中可以用-JS-表達式崁入變數\"><a href=\"#範例-在html中可以用-JS-表達式崁入變數\" class=\"headerlink\" title=\"範例: 在html中可以用{JS} 表達式崁入變數\"></a>範例: 在html中可以用{JS} 表達式崁入變數</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js函式宣告或是變數宣告區</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleRed = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pic=<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//html語法可以當作參數傳遞</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://picsum.photos/200/200?image=229&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;circle-profile&quot;</span>/&gt;</span></span>&lt;/div&gt;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">        &lt;h1&gt;REACT學習&lt;/h1&gt;,</span><br><span class=\"line\">        &lt;h2&gt;如何使用JSX！&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">&lt;React.StrictMode&gt;</span><br><span class=\"line\">   &lt;h1 style = &#123; styleRed &#125; &gt; Hello, world! &lt;/h1&gt;</span><br><span class=\"line\">   &lt;div&gt;&#123; pic()&#125; &lt;<span class=\"regexp\">/div&gt; &#123;/</span>*註解這樣寫*/&#125;</span><br><span class=\"line\">   &lt;div&gt;&#123;arr&#125;&lt;<span class=\"regexp\">/div&gt;,&#123;/</span>*可以放入數組*/&#125;</span><br><span class=\"line\"> &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">- 可在 html 標籤中利用 &#123;&#125; 寫 javascript 表示式</span><br><span class=\"line\">- 其中style = &#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125;&#125; 這樣的表示也可以。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例-帶入屬性命名與Event\"><a href=\"#範例-帶入屬性命名與Event\" class=\"headerlink\" title=\"範例: 帶入屬性命名與Event\"></a>範例: 帶入屬性命名與Event</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getValue=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.target.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">&lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;h1 className = <span class=\"string\">&quot;title&quot;</span> &gt; Hello, world! &lt;/h1&gt;</span><br><span class=\"line\">\t &lt;button value onClick=&#123;getValue&#125;&gt;按下以取得數值 &lt;/button&gt;</span><br><span class=\"line\">    &lt;button value=&#123;<span class=\"literal\">true</span>&#125; onClick=&#123;getValue&#125;&gt;按下以取得數值 &lt;/button&gt;</span><br><span class=\"line\">&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>駱駝式命名<ul>\n<li>class 要用 className 然後可以在 style.css中更改樣式</li>\n<li>onclick 也要改onClick{函數名稱} 駱駝式命名</li>\n<li>實測命名打錯 console 會出現報 Warning: Invalid DOM property <code>class</code>. Did you mean <code>className</code>?</li>\n</ul>\n</li>\n<li>輸入類的元件button/input/textarea互動事件觸發時，函式只會接收到一個event類別的參數，並不能傳遞其他參數</li>\n<li>布林=true 的屬性值可以不寫</li>\n</ul>\n<h3 id=\"範例-JSX引入Inline-style\"><a href=\"#範例-JSX引入Inline-style\" class=\"headerlink\" title=\"範例 JSX引入Inline-style\"></a>範例 JSX引入Inline-style</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&quot;App&quot; style&#x3D;&#123;&#123;</span><br><span class=\"line\">      color: &#39;blue&#39;,fontSize:&#39;19px&#39;</span><br><span class=\"line\">    &#125;&#125;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在style內的是ＪＳ物件也可以把他們只給一個const變數</li>\n<li>內容與css不同的是必須是小寫駱駝且去除’-‘</li>\n<li>這種寫法的缺點是不行用hover等特殊效果，需利用其他模組化stylr寫法</li>\n</ul>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10216468\">【React.js入門 - 06】 JSX</a></li>\n<li><a href=\"https://eyesofkids.gitbooks.io/react-basic-zh-tw/content/day18_deeper_jsx/\" title=\"React篇: JSX語法撰寫指引\">React篇: JSX語法撰寫指引</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>上一篇已建立一個基本專案，開始可以對index.js做一些改寫練習，並使用JSX語法 </p>\n</blockquote>","more":"<h1 id=\"JSX\"><a href=\"#JSX\" class=\"headerlink\" title=\"JSX\"></a>JSX</h1><p>看起來是html與ＪＳ混合使用，比較接近 JavaScript 而不是 HTML，ＪＳＸ允許你使用 JavaScript 所有的功能。</p>\n<ul>\n<li>Ref :<a href=\"https://zh-hant.reactjs.org/docs/introducing-jsx.html\">https://zh-hant.reactjs.org/docs/introducing-jsx.html</a></li>\n</ul>\n<h2 id=\"html-區域\"><a href=\"#html-區域\" class=\"headerlink\" title=\"html 區域\"></a>html 區域</h2><p>剛剛產生的public/index.html，含有基本HTML範本id=”root”的div區塊<br></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&lt;div id&#x3D;&quot;root&quot;&gt;&lt;&#x2F;div&gt;&quot;</span><br></pre></td></tr></table></figure>\n<hr>\n<h2 id=\"React-中的-JSX-區域\"><a href=\"#React-中的-JSX-區域\" class=\"headerlink\" title=\"React 中的 JSX 區域\"></a>React 中的 JSX 區域</h2><p>接著看一下src/index.js裡的程式碼</p>\n<h3 id=\"基本範例-直接撰寫html\"><a href=\"#基本範例-直接撰寫html\" class=\"headerlink\" title=\"基本範例: 直接撰寫html\"></a>基本範例: 直接撰寫html</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ReactDOM.render(<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">App</span> /&gt;</span></span>, <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">或是改成</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;h1&gt; Hello world!&lt;/h1&gt;,</span><br><span class=\"line\"><span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>));</span><br></pre></td></tr></table></figure>\n<p>解說：</p>\n<ul>\n<li>由 React DOM 函式將元素渲染 ROOT 這個DOM 節點中</li>\n<li>而將 html當參數傳遞是使用一種Javascript語法: JSX<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const name &#x3D; &#39;Josh Perez&#39;; &#x2F;&#x2F;一般javascript</span><br><span class=\"line\">const element &#x3D; &lt;h1&gt;Hello, &#123;name&#125;&lt;&#x2F;h1&gt;;&#x2F;&#x2F;混和的html與字串 特殊JSX語法</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  element,</span><br><span class=\"line\">  document.getElementById(&#39;root&#39;)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"關於Babel\"><a href=\"#關於Babel\" class=\"headerlink\" title=\"關於Babel\"></a>關於Babel</h4>是JavaScript 前處理器，編譯器，主要能轉換JSX與ES6成各瀏覽器支持的ＪＳ<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const element &#x3D; (</span><br><span class=\"line\">  &lt;h1 className&#x3D;&quot;text&quot;&gt;</span><br><span class=\"line\">    Hello, World!</span><br><span class=\"line\">  &lt;&#x2F;h1&gt;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\nBabel 將 JSX 編譯為呼叫 React.createElement() 的程式。<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const element &#x3D; React.createElement(</span><br><span class=\"line\">  &#39;h1&#39;,</span><br><span class=\"line\">  &#123;className: &#39;text&#39;&#125;,</span><br><span class=\"line\">  &#39;Hello, World!&#39;</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"範例-在html中可以用-JS-表達式崁入變數\"><a href=\"#範例-在html中可以用-JS-表達式崁入變數\" class=\"headerlink\" title=\"範例: 在html中可以用{JS} 表達式崁入變數\"></a>範例: 在html中可以用{JS} 表達式崁入變數</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//js函式宣告或是變數宣告區</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> styleRed = &#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> pic=<span class=\"function\">()=&gt;</span>&#123; <span class=\"comment\">//html語法可以當作參數傳遞</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">  &lt;div&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://picsum.photos/200/200?image=229&quot;</span> <span class=\"attr\">alt</span>=<span class=\"string\">&quot;&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;circle-profile&quot;</span>/&gt;</span></span>&lt;/div&gt;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [</span><br><span class=\"line\">        &lt;h1&gt;REACT學習&lt;/h1&gt;,</span><br><span class=\"line\">        &lt;h2&gt;如何使用JSX！&lt;/h2&gt;,</span><br><span class=\"line\">];</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">&lt;React.StrictMode&gt;</span><br><span class=\"line\">   &lt;h1 style = &#123; styleRed &#125; &gt; Hello, world! &lt;/h1&gt;</span><br><span class=\"line\">   &lt;div&gt;&#123; pic()&#125; &lt;<span class=\"regexp\">/div&gt; &#123;/</span>*註解這樣寫*/&#125;</span><br><span class=\"line\">   &lt;div&gt;&#123;arr&#125;&lt;<span class=\"regexp\">/div&gt;,&#123;/</span>*可以放入數組*/&#125;</span><br><span class=\"line\"> &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">- 可在 html 標籤中利用 &#123;&#125; 寫 javascript 表示式</span><br><span class=\"line\">- 其中style = &#123;&#123; <span class=\"attr\">color</span>: <span class=\"string\">&#x27;red&#x27;</span> &#125;&#125; 這樣的表示也可以。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"範例-帶入屬性命名與Event\"><a href=\"#範例-帶入屬性命名與Event\" class=\"headerlink\" title=\"範例: 帶入屬性命名與Event\"></a>範例: 帶入屬性命名與Event</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> getValue=<span class=\"function\">(<span class=\"params\">event</span>)=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(event.target.value)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">&lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;h1 className = <span class=\"string\">&quot;title&quot;</span> &gt; Hello, world! &lt;/h1&gt;</span><br><span class=\"line\">\t &lt;button value onClick=&#123;getValue&#125;&gt;按下以取得數值 &lt;/button&gt;</span><br><span class=\"line\">    &lt;button value=&#123;<span class=\"literal\">true</span>&#125; onClick=&#123;getValue&#125;&gt;按下以取得數值 &lt;/button&gt;</span><br><span class=\"line\">&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;root&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>駱駝式命名<ul>\n<li>class 要用 className 然後可以在 style.css中更改樣式</li>\n<li>onclick 也要改onClick{函數名稱} 駱駝式命名</li>\n<li>實測命名打錯 console 會出現報 Warning: Invalid DOM property <code>class</code>. Did you mean <code>className</code>?</li>\n</ul>\n</li>\n<li>輸入類的元件button/input/textarea互動事件觸發時，函式只會接收到一個event類別的參數，並不能傳遞其他參數</li>\n<li>布林=true 的屬性值可以不寫</li>\n</ul>\n<h3 id=\"範例-JSX引入Inline-style\"><a href=\"#範例-JSX引入Inline-style\" class=\"headerlink\" title=\"範例 JSX引入Inline-style\"></a>範例 JSX引入Inline-style</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default function App() &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div className&#x3D;&quot;App&quot; style&#x3D;&#123;&#123;</span><br><span class=\"line\">      color: &#39;blue&#39;,fontSize:&#39;19px&#39;</span><br><span class=\"line\">    &#125;&#125;&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>在style內的是ＪＳ物件也可以把他們只給一個const變數</li>\n<li>內容與css不同的是必須是小寫駱駝且去除’-‘</li>\n<li>這種寫法的缺點是不行用hover等特殊效果，需利用其他模組化stylr寫法</li>\n</ul>\n<h1 id=\"網路參考文章\"><a href=\"#網路參考文章\" class=\"headerlink\" title=\"網路參考文章\"></a>網路參考文章</h1><blockquote>\n<p>note warning %} <span style=\"font-size: 9px;\"><br>學習路上感謝網路大神們，如果你發現了我，可以查看參考文章了解更多概念👇👇👇<br></span></p>\n</blockquote>\n<ul>\n<li><a href=\"https://ithelp.ithome.com.tw/articles/10216468\">【React.js入門 - 06】 JSX</a></li>\n<li><a href=\"https://eyesofkids.gitbooks.io/react-basic-zh-tw/content/day18_deeper_jsx/\" title=\"React篇: JSX語法撰寫指引\">React篇: JSX語法撰寫指引</a></li>\n</ul>"},{"title":"[React 03] React 組件、函式與生命週期","date":"2021-02-27T12:40:59.000Z","_content":"\n>整理react學習“個人筆記” \n\n本文內容：\n- React component (組件)語法\n- props 是什麼\n  - ES6箭頭函式組件\n- State的用法\n- 生命週期\n\n\n### React component (組件)語法\n- component 就像是 JavaScript 的 function\n- ReactDOM.render 中{函式名稱}變成了<函式名稱/> see:[Render Element](https://zh-hant.reactjs.org/docs/rendering-elements.html)\n- Component 命名首字必須大寫，大寫駝峰的方式，否則 React 會把它當作一般的 HTML 元素處理，並跳出Warning提示，看到大寫駝峰命名變數時，可以知道是 React 組件而非一般函式。\n- 其他 HTML 屬性、CSS 樣式屬性或一般的函式來說，則會遵行 JavaScript 以小寫駝峰來命名變數的慣例，例如在 className、maxLength、backgroundColor 等等。\n\n----\n\n### props 是什麼\n- component 就像是 JavaScript 的 function，它接收任意的參數（稱之為「props」）並且回傳畫面的 React element。\n- props 通常是不可變的(唯獨Immutable)，不能修改自己的\n\nRef:[Components 與 Props] (https://zh-hant.reactjs.org/docs/components-and-props.html)\n<!--more-->\n\n\n\n#### function component vs class component\n接著看看兩種寫法轉換 Function 成 Class ：\n\n##### 使用function 來做 component\n- 如果需要向component傳参数，可以使用 props 對象，\n- 用return (html)\n\n\n````javascript function component\n\nfunction HelloName(props) {\n\treturn <h1>Hello {props.name}!</h1>;\n}\nReactDOM.render(\n <React.StrictMode>\n\t <HelloName name=\"May\"/>\n\t</React.StrictMode>,\n\tdocument.getElementById('example')\n);\n````\n\n##### 使用ES6 class來做 component\n- 也可以使用ES6  class來 來定義 \n- 繼承React.Component且在用render(){}包一層\n- props 要改用 this.props\n- 用render(){return html}\n\n````javascript class來 component\nclass HelloName extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\nReactDOM.render(\n <React.StrictMode>\n\t<HelloName name=\"May\" />;,\n\t</React.StrictMode>,\n\tdocument.getElementById('example')\n);\n````\n\n\n\n組件裡面可以再包組件，透過這樣可以重新利用\n範例練習: [USER info](https://codesandbox.io/s/usercard-vh0e4 \"USER info\")\n\n\n\n#### React組件 ES6箭頭函式組件 寫法\n接著看看`箭頭函式語法`可以簡潔,少打很多字元\n- const App: () => JSX.Element //大寫駱駝命名\n- 縮寫：如果裡面只有return 可以去掉{}與return，但通常會有一些變數存在，個人習慣保留．\n- 箭頭函式不可以使用於建構式，可以見[[JS 01] javascript 新手上路與概念筆記](https://minilabmemo.github.io/2021/02/20/js-start-01/)\n- 使用插件快速鍵 rafc - ReactArrowFunctionComponent\n[紀錄](https://github.com/minilabmemo/counter-water/commit/aea85efa5f2e4a1f073cd7c89f96a458b00ab24c)\n```\nconst Hello = () => {\n  return ( <div>hello</div> )\n}\n```\n\n------\n\n\n\n### State的用法\nProps 是唯讀的(Immutable)，State 類似於 prop，但它是私有且由 component 完全控制的。當state被改變時，會進入re-render的update程序，更新畫面\n\n#### class(setState) vs function(useState)\n\n##### 1. 使用class來改state（setState）\n- 使用 ES6 class來 來定義 \n- 繼承React.Component且在用render(){}包一層\n- props 要改用 this.props\n- 如果想要更改props ，要改用setState\n- [根據React 與 bind this](https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d)\n- 範例練習:透過一個新的按鈕去改變時間 [Refresh Time](https://codesandbox.io/s/refreshtime-ju4pv?file=/src/index.js \"Refresh Time\")\n\n\n````javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n    // this.changeTime=this.changeTime.bind(this);\n  }\n\n  // changeTime(){\n  //   this.setState({date: new Date()})\n\n  // }\n  //根據React 與 bind this\n\n  //以上可以簡化 改箭頭含式寫法\n  changeTime = () => {\n    this.setState({ date: new Date() });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>现在是 {this.state.date.toLocaleTimeString()}.</h2>\n        <button onClick={this.changeTime}>刷新 </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clock />,\n  </React.StrictMode>,\n  rootElement\n);\n\n\n````\n\n#### 2.使用function component更改state（用useState）\n- 沒有內部狀態（State），是 Stateless Components。\n- 沒有 Lifecycle Hooks 和 refs。\n- 如果想要更改props 要改用useState，useState-是一個基礎的Hook，是可以在function component中使用設定state，而不需要轉換成class。\n> hook意思是“鈎子”，在音樂上，指的是一首歌曲中最能鈎人的部分。Hook 是 React 16.8 增加的新功能。讓你不必寫 class 就能使用 state 以及其他 React 的功能。使用hook可以更簡化且被推崇使用。\n\n- useState它回傳了一對值：目前的 state 跟一個可以更新 state 的 function。\n- 範例改寫練習 [Refresh_Time_useState](https://codesandbox.io/s/refreshtimeusestate-xns3c?file=/src/index.js \"Refresh_Time_useState\")\n\n```javascript\n//1.加上useState引入\nimport React, { useState } from 'react';\nimport ReactDOM from \"react-dom\";\n\nconst Clock=()=>{\n  // 2.宣告一個 state 變數，命名date。\n  // 傳入 useState() 的參數就是 state 起始值\n  const [date, changeTime] = useState(new Date());\n// 3-1 return中直接寫上state變數-在 function 中可以直接使用 state\n// 3-2 當使用者點擊，我們就呼叫 函式 並傳入新的值。\n  return(\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>现在是 {date.toLocaleTimeString()}.</h2>\n        <button onClick={()=>{changeTime(new Date())}}>刷新 </button>\n      </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Clock/>\n  </React.StrictMode>,\n  rootElement\n);\n\n```\n\n\n----\n\n#### （延伸說明）hooks 與 Function Component\n\n[使用 State Hook](https://zh-hant.reactjs.org/docs/hooks-state.html)\n\n- 用 Function Component 代替 Stateless Component 的说法，原因是：自从 Hooks 出现，函数式组件功能在不断丰富，函数式组件不再需要强调其无状态特性，因此叫 Function Component 更为恰当。\n\n- 從[精读《Function VS Class 组件》](https://zhuanlan.zhihu.com/p/59558396)\n中可以看的使用class component,會因為使用this問題而需要修復，要follow class結構與巢狀太過雜亂，再者，而function component沒有this,如果希望拿到稳定的 props，使用 Function Component 是更好的選擇。而\n- Function Component + Hooks 可以实现 Class Component 做不到的 capture props、capture value，而且 `React 官方也推荐 新的代码使用 Hooks 编写`。\n\n\n-----\n\n### 生命週期\n元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n*註：原本想要一樣比較一下class 原本的用法，但還是直接介紹function component(useEffect)更簡潔．\n\n#### useEffect hook\n\n```\nuseEffect(() => {\n    /*  componentDidMount 和  componentDidUpdate */\n    return () => {\n      /* componentWillUnmount */   //在 component unmount 時，React 會執行清除。\n    };\n    \n}, [dependencies參數]); /* 是用來限定當哪些變數被改變時useEffect要觸發 */\n\n```\n\nRef:\n- [官方-hooks-effect](https://zh-hant.reactjs.org/docs/hooks-effect.html) 重點：\n  - 內有使用class與hook 的範例對比說明\n  - 很多待細讀 ＴＢＤ\n  - 我們建議使用 exhaustive-deps 規則作為我們 eslint-plugin-react-hooks package 的一部分。當不正確地指定依賴時，它會發出警告，並提出修改建議。\n\n----\n\n### 網路參考範例:\n\n[React State(状态)](https://www.runoob.com/react/react-state.html \"React State(状态)\") @runoob基礎與線上範例\n**[State 和生命週期](https://zh-hant.reactjs.org/docs/state-and-lifecycle.html \"State 和生命週期\") @React中文React解說\n[【React.js入門 - 11】 開始進入class component](https://ithelp.ithome.com.tw/articles/10219057 \"【React.js入門 - 11】 開始進入class component\") @IT邦幫忙的系列文\n[React 與 bind this ](https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d \"React 與 bind this \") @medium\n\n\n[React hook](https://zh-hant.reactjs.org/docs/hooks-intro.html) @React 中文解說Hook系列\n[使用 State Hook](https://zh-hant.reactjs.org/docs/hooks-state.html \"使用 State Hook\") @React 中文解說State Hook中寫法對比\n","source":"_posts/react03-component-props.md","raw":"---\ntitle: \"[React 03] React 組件、函式與生命週期\"\ntags:\n  - react\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - react\ndate: 2021-02-27 20:40:59\n---\n\n>整理react學習“個人筆記” \n\n本文內容：\n- React component (組件)語法\n- props 是什麼\n  - ES6箭頭函式組件\n- State的用法\n- 生命週期\n\n\n### React component (組件)語法\n- component 就像是 JavaScript 的 function\n- ReactDOM.render 中{函式名稱}變成了<函式名稱/> see:[Render Element](https://zh-hant.reactjs.org/docs/rendering-elements.html)\n- Component 命名首字必須大寫，大寫駝峰的方式，否則 React 會把它當作一般的 HTML 元素處理，並跳出Warning提示，看到大寫駝峰命名變數時，可以知道是 React 組件而非一般函式。\n- 其他 HTML 屬性、CSS 樣式屬性或一般的函式來說，則會遵行 JavaScript 以小寫駝峰來命名變數的慣例，例如在 className、maxLength、backgroundColor 等等。\n\n----\n\n### props 是什麼\n- component 就像是 JavaScript 的 function，它接收任意的參數（稱之為「props」）並且回傳畫面的 React element。\n- props 通常是不可變的(唯獨Immutable)，不能修改自己的\n\nRef:[Components 與 Props] (https://zh-hant.reactjs.org/docs/components-and-props.html)\n<!--more-->\n\n\n\n#### function component vs class component\n接著看看兩種寫法轉換 Function 成 Class ：\n\n##### 使用function 來做 component\n- 如果需要向component傳参数，可以使用 props 對象，\n- 用return (html)\n\n\n````javascript function component\n\nfunction HelloName(props) {\n\treturn <h1>Hello {props.name}!</h1>;\n}\nReactDOM.render(\n <React.StrictMode>\n\t <HelloName name=\"May\"/>\n\t</React.StrictMode>,\n\tdocument.getElementById('example')\n);\n````\n\n##### 使用ES6 class來做 component\n- 也可以使用ES6  class來 來定義 \n- 繼承React.Component且在用render(){}包一層\n- props 要改用 this.props\n- 用render(){return html}\n\n````javascript class來 component\nclass HelloName extends React.Component {\n  render() {\n    return <h1>Hello, {this.props.name}</h1>;\n  }\n}\n\nReactDOM.render(\n <React.StrictMode>\n\t<HelloName name=\"May\" />;,\n\t</React.StrictMode>,\n\tdocument.getElementById('example')\n);\n````\n\n\n\n組件裡面可以再包組件，透過這樣可以重新利用\n範例練習: [USER info](https://codesandbox.io/s/usercard-vh0e4 \"USER info\")\n\n\n\n#### React組件 ES6箭頭函式組件 寫法\n接著看看`箭頭函式語法`可以簡潔,少打很多字元\n- const App: () => JSX.Element //大寫駱駝命名\n- 縮寫：如果裡面只有return 可以去掉{}與return，但通常會有一些變數存在，個人習慣保留．\n- 箭頭函式不可以使用於建構式，可以見[[JS 01] javascript 新手上路與概念筆記](https://minilabmemo.github.io/2021/02/20/js-start-01/)\n- 使用插件快速鍵 rafc - ReactArrowFunctionComponent\n[紀錄](https://github.com/minilabmemo/counter-water/commit/aea85efa5f2e4a1f073cd7c89f96a458b00ab24c)\n```\nconst Hello = () => {\n  return ( <div>hello</div> )\n}\n```\n\n------\n\n\n\n### State的用法\nProps 是唯讀的(Immutable)，State 類似於 prop，但它是私有且由 component 完全控制的。當state被改變時，會進入re-render的update程序，更新畫面\n\n#### class(setState) vs function(useState)\n\n##### 1. 使用class來改state（setState）\n- 使用 ES6 class來 來定義 \n- 繼承React.Component且在用render(){}包一層\n- props 要改用 this.props\n- 如果想要更改props ，要改用setState\n- [根據React 與 bind this](https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d)\n- 範例練習:透過一個新的按鈕去改變時間 [Refresh Time](https://codesandbox.io/s/refreshtime-ju4pv?file=/src/index.js \"Refresh Time\")\n\n\n````javascript\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nclass Clock extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { date: new Date() };\n    // this.changeTime=this.changeTime.bind(this);\n  }\n\n  // changeTime(){\n  //   this.setState({date: new Date()})\n\n  // }\n  //根據React 與 bind this\n\n  //以上可以簡化 改箭頭含式寫法\n  changeTime = () => {\n    this.setState({ date: new Date() });\n  };\n\n  render() {\n    return (\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>现在是 {this.state.date.toLocaleTimeString()}.</h2>\n        <button onClick={this.changeTime}>刷新 </button>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <Clock />,\n  </React.StrictMode>,\n  rootElement\n);\n\n\n````\n\n#### 2.使用function component更改state（用useState）\n- 沒有內部狀態（State），是 Stateless Components。\n- 沒有 Lifecycle Hooks 和 refs。\n- 如果想要更改props 要改用useState，useState-是一個基礎的Hook，是可以在function component中使用設定state，而不需要轉換成class。\n> hook意思是“鈎子”，在音樂上，指的是一首歌曲中最能鈎人的部分。Hook 是 React 16.8 增加的新功能。讓你不必寫 class 就能使用 state 以及其他 React 的功能。使用hook可以更簡化且被推崇使用。\n\n- useState它回傳了一對值：目前的 state 跟一個可以更新 state 的 function。\n- 範例改寫練習 [Refresh_Time_useState](https://codesandbox.io/s/refreshtimeusestate-xns3c?file=/src/index.js \"Refresh_Time_useState\")\n\n```javascript\n//1.加上useState引入\nimport React, { useState } from 'react';\nimport ReactDOM from \"react-dom\";\n\nconst Clock=()=>{\n  // 2.宣告一個 state 變數，命名date。\n  // 傳入 useState() 的參數就是 state 起始值\n  const [date, changeTime] = useState(new Date());\n// 3-1 return中直接寫上state變數-在 function 中可以直接使用 state\n// 3-2 當使用者點擊，我們就呼叫 函式 並傳入新的值。\n  return(\n      <div>\n        <h1>Hello, world!</h1>\n        <h2>现在是 {date.toLocaleTimeString()}.</h2>\n        <button onClick={()=>{changeTime(new Date())}}>刷新 </button>\n      </div>\n  );\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <React.StrictMode>\n    <Clock/>\n  </React.StrictMode>,\n  rootElement\n);\n\n```\n\n\n----\n\n#### （延伸說明）hooks 與 Function Component\n\n[使用 State Hook](https://zh-hant.reactjs.org/docs/hooks-state.html)\n\n- 用 Function Component 代替 Stateless Component 的说法，原因是：自从 Hooks 出现，函数式组件功能在不断丰富，函数式组件不再需要强调其无状态特性，因此叫 Function Component 更为恰当。\n\n- 從[精读《Function VS Class 组件》](https://zhuanlan.zhihu.com/p/59558396)\n中可以看的使用class component,會因為使用this問題而需要修復，要follow class結構與巢狀太過雜亂，再者，而function component沒有this,如果希望拿到稳定的 props，使用 Function Component 是更好的選擇。而\n- Function Component + Hooks 可以实现 Class Component 做不到的 capture props、capture value，而且 `React 官方也推荐 新的代码使用 Hooks 编写`。\n\n\n-----\n\n### 生命週期\n元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)\n*註：原本想要一樣比較一下class 原本的用法，但還是直接介紹function component(useEffect)更簡潔．\n\n#### useEffect hook\n\n```\nuseEffect(() => {\n    /*  componentDidMount 和  componentDidUpdate */\n    return () => {\n      /* componentWillUnmount */   //在 component unmount 時，React 會執行清除。\n    };\n    \n}, [dependencies參數]); /* 是用來限定當哪些變數被改變時useEffect要觸發 */\n\n```\n\nRef:\n- [官方-hooks-effect](https://zh-hant.reactjs.org/docs/hooks-effect.html) 重點：\n  - 內有使用class與hook 的範例對比說明\n  - 很多待細讀 ＴＢＤ\n  - 我們建議使用 exhaustive-deps 規則作為我們 eslint-plugin-react-hooks package 的一部分。當不正確地指定依賴時，它會發出警告，並提出修改建議。\n\n----\n\n### 網路參考範例:\n\n[React State(状态)](https://www.runoob.com/react/react-state.html \"React State(状态)\") @runoob基礎與線上範例\n**[State 和生命週期](https://zh-hant.reactjs.org/docs/state-and-lifecycle.html \"State 和生命週期\") @React中文React解說\n[【React.js入門 - 11】 開始進入class component](https://ithelp.ithome.com.tw/articles/10219057 \"【React.js入門 - 11】 開始進入class component\") @IT邦幫忙的系列文\n[React 與 bind this ](https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d \"React 與 bind this \") @medium\n\n\n[React hook](https://zh-hant.reactjs.org/docs/hooks-intro.html) @React 中文解說Hook系列\n[使用 State Hook](https://zh-hant.reactjs.org/docs/hooks-state.html \"使用 State Hook\") @React 中文解說State Hook中寫法對比\n","slug":"react03-component-props","published":1,"updated":"2023-01-22T07:03:26.105Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbl003akp2xbocg5l7m","content":"<blockquote>\n<p>整理react學習“個人筆記” </p>\n</blockquote>\n<p>本文內容：</p>\n<ul>\n<li>React component (組件)語法</li>\n<li>props 是什麼<ul>\n<li>ES6箭頭函式組件</li>\n</ul>\n</li>\n<li>State的用法</li>\n<li>生命週期</li>\n</ul>\n<h3 id=\"React-component-組件-語法\"><a href=\"#React-component-組件-語法\" class=\"headerlink\" title=\"React component (組件)語法\"></a>React component (組件)語法</h3><ul>\n<li>component 就像是 JavaScript 的 function</li>\n<li>ReactDOM.render 中{函式名稱}變成了&lt;函式名稱/&gt; see:<a href=\"https://zh-hant.reactjs.org/docs/rendering-elements.html\">Render Element</a></li>\n<li>Component 命名首字必須大寫，大寫駝峰的方式，否則 React 會把它當作一般的 HTML 元素處理，並跳出Warning提示，看到大寫駝峰命名變數時，可以知道是 React 組件而非一般函式。</li>\n<li>其他 HTML 屬性、CSS 樣式屬性或一般的函式來說，則會遵行 JavaScript 以小寫駝峰來命名變數的慣例，例如在 className、maxLength、backgroundColor 等等。</li>\n</ul>\n<hr>\n<h3 id=\"props-是什麼\"><a href=\"#props-是什麼\" class=\"headerlink\" title=\"props 是什麼\"></a>props 是什麼</h3><ul>\n<li>component 就像是 JavaScript 的 function，它接收任意的參數（稱之為「props」）並且回傳畫面的 React element。</li>\n<li>props 通常是不可變的(唯獨Immutable)，不能修改自己的</li>\n</ul>\n<p>Ref:[Components 與 Props] (<a href=\"https://zh-hant.reactjs.org/docs/components-and-props.html\">https://zh-hant.reactjs.org/docs/components-and-props.html</a>)</p>\n<a id=\"more\"></a>\n\n\n\n<h4 id=\"function-component-vs-class-component\"><a href=\"#function-component-vs-class-component\" class=\"headerlink\" title=\"function component vs class component\"></a>function component vs class component</h4><p>接著看看兩種寫法轉換 Function 成 Class ：</p>\n<h5 id=\"使用function-來做-component\"><a href=\"#使用function-來做-component\" class=\"headerlink\" title=\"使用function 來做 component\"></a>使用function 來做 component</h5><ul>\n<li>如果需要向component傳参数，可以使用 props 對象，</li>\n<li>用return (html)</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption><span>function component</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloName</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello &#123;props.name&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\"> &lt;React.StrictMode&gt;</span><br><span class=\"line\">\t &lt;HelloName name=<span class=\"string\">&quot;May&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;example&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用ES6-class來做-component\"><a href=\"#使用ES6-class來做-component\" class=\"headerlink\" title=\"使用ES6 class來做 component\"></a>使用ES6 class來做 component</h5><ul>\n<li>也可以使用ES6  class來 來定義 </li>\n<li>繼承React.Component且在用render(){}包一層</li>\n<li>props 要改用 this.props</li>\n<li>用render(){return html}</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption><span>class來 component</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloName</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\"> &lt;React.StrictMode&gt;</span><br><span class=\"line\">\t&lt;HelloName name=<span class=\"string\">&quot;May&quot;</span> /&gt;;,</span><br><span class=\"line\">\t&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;example&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<p>組件裡面可以再包組件，透過這樣可以重新利用<br>範例練習: <a href=\"https://codesandbox.io/s/usercard-vh0e4\" title=\"USER info\">USER info</a></p>\n<h4 id=\"React組件-ES6箭頭函式組件-寫法\"><a href=\"#React組件-ES6箭頭函式組件-寫法\" class=\"headerlink\" title=\"React組件 ES6箭頭函式組件 寫法\"></a>React組件 ES6箭頭函式組件 寫法</h4><p>接著看看<code>箭頭函式語法</code>可以簡潔,少打很多字元</p>\n<ul>\n<li>const App: () =&gt; JSX.Element //大寫駱駝命名</li>\n<li>縮寫：如果裡面只有return 可以去掉{}與return，但通常會有一些變數存在，個人習慣保留．</li>\n<li>箭頭函式不可以使用於建構式，可以見<a href=\"https://minilabmemo.github.io/2021/02/20/js-start-01/\">[JS 01] javascript 新手上路與概念筆記</a></li>\n<li>使用插件快速鍵 rafc - ReactArrowFunctionComponent<br><a href=\"https://github.com/minilabmemo/counter-water/commit/aea85efa5f2e4a1f073cd7c89f96a458b00ab24c\">紀錄</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Hello &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return ( &lt;div&gt;hello&lt;&#x2F;div&gt; )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"State的用法\"><a href=\"#State的用法\" class=\"headerlink\" title=\"State的用法\"></a>State的用法</h3><p>Props 是唯讀的(Immutable)，State 類似於 prop，但它是私有且由 component 完全控制的。當state被改變時，會進入re-render的update程序，更新畫面</p>\n<h4 id=\"class-setState-vs-function-useState\"><a href=\"#class-setState-vs-function-useState\" class=\"headerlink\" title=\"class(setState) vs function(useState)\"></a>class(setState) vs function(useState)</h4><h5 id=\"1-使用class來改state（setState）\"><a href=\"#1-使用class來改state（setState）\" class=\"headerlink\" title=\"1. 使用class來改state（setState）\"></a>1. 使用class來改state（setState）</h5><ul>\n<li>使用 ES6 class來 來定義 </li>\n<li>繼承React.Component且在用render(){}包一層</li>\n<li>props 要改用 this.props</li>\n<li>如果想要更改props ，要改用setState</li>\n<li><a href=\"https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d\">根據React 與 bind this</a></li>\n<li>範例練習:透過一個新的按鈕去改變時間 <a href=\"https://codesandbox.io/s/refreshtime-ju4pv?file=/src/index.js\" title=\"Refresh Time\">Refresh Time</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// this.changeTime=this.changeTime.bind(this);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// changeTime()&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.setState(&#123;date: new Date()&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//根據React 與 bind this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//以上可以簡化 改箭頭含式寫法</span></span><br><span class=\"line\">  changeTime = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h2&gt;现在是 &#123;<span class=\"built_in\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"built_in\">this</span>.changeTime&#125;&gt;刷新 &lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Clock /&gt;,</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用function-component更改state（用useState）\"><a href=\"#2-使用function-component更改state（用useState）\" class=\"headerlink\" title=\"2.使用function component更改state（用useState）\"></a>2.使用function component更改state（用useState）</h4><ul>\n<li><p>沒有內部狀態（State），是 Stateless Components。</p>\n</li>\n<li><p>沒有 Lifecycle Hooks 和 refs。</p>\n</li>\n<li><p>如果想要更改props 要改用useState，useState-是一個基礎的Hook，是可以在function component中使用設定state，而不需要轉換成class。</p>\n<blockquote>\n<p>hook意思是“鈎子”，在音樂上，指的是一首歌曲中最能鈎人的部分。Hook 是 React 16.8 增加的新功能。讓你不必寫 class 就能使用 state 以及其他 React 的功能。使用hook可以更簡化且被推崇使用。</p>\n</blockquote>\n</li>\n<li><p>useState它回傳了一對值：目前的 state 跟一個可以更新 state 的 function。</p>\n</li>\n<li><p>範例改寫練習 <a href=\"https://codesandbox.io/s/refreshtimeusestate-xns3c?file=/src/index.js\" title=\"Refresh_Time_useState\">Refresh_Time_useState</a></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.加上useState引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 2.宣告一個 state 變數，命名date。</span></span><br><span class=\"line\">  <span class=\"comment\">// 傳入 useState() 的參數就是 state 起始值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [date, changeTime] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// 3-1 return中直接寫上state變數-在 function 中可以直接使用 state</span></span><br><span class=\"line\"><span class=\"comment\">// 3-2 當使用者點擊，我們就呼叫 函式 並傳入新的值。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h2&gt;现在是 &#123;date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"function\">()=&gt;</span>&#123;changeTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#125;&#125;&gt;刷新 &lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Clock/&gt;</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"（延伸說明）hooks-與-Function-Component\"><a href=\"#（延伸說明）hooks-與-Function-Component\" class=\"headerlink\" title=\"（延伸說明）hooks 與 Function Component\"></a>（延伸說明）hooks 與 Function Component</h4><p><a href=\"https://zh-hant.reactjs.org/docs/hooks-state.html\">使用 State Hook</a></p>\n<ul>\n<li><p>用 Function Component 代替 Stateless Component 的说法，原因是：自从 Hooks 出现，函数式组件功能在不断丰富，函数式组件不再需要强调其无状态特性，因此叫 Function Component 更为恰当。</p>\n</li>\n<li><p>從<a href=\"https://zhuanlan.zhihu.com/p/59558396\">精读《Function VS Class 组件》</a><br>中可以看的使用class component,會因為使用this問題而需要修復，要follow class結構與巢狀太過雜亂，再者，而function component沒有this,如果希望拿到稳定的 props，使用 Function Component 是更好的選擇。而</p>\n</li>\n<li><p>Function Component + Hooks 可以实现 Class Component 做不到的 capture props、capture value，而且 <code>React 官方也推荐 新的代码使用 Hooks 编写</code>。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"生命週期\"><a href=\"#生命週期\" class=\"headerlink\" title=\"生命週期\"></a>生命週期</h3><p>元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)<br>*註：原本想要一樣比較一下class 原本的用法，但還是直接介紹function component(useEffect)更簡潔．</p>\n<h4 id=\"useEffect-hook\"><a href=\"#useEffect-hook\" class=\"headerlink\" title=\"useEffect hook\"></a>useEffect hook</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;*  componentDidMount 和  componentDidUpdate *&#x2F;</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;* componentWillUnmount *&#x2F;   &#x2F;&#x2F;在 component unmount 時，React 會執行清除。</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;, [dependencies參數]); &#x2F;* 是用來限定當哪些變數被改變時useEffect要觸發 *&#x2F;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Ref:</p>\n<ul>\n<li><a href=\"https://zh-hant.reactjs.org/docs/hooks-effect.html\">官方-hooks-effect</a> 重點：<ul>\n<li>內有使用class與hook 的範例對比說明</li>\n<li>很多待細讀 ＴＢＤ</li>\n<li>我們建議使用 exhaustive-deps 規則作為我們 eslint-plugin-react-hooks package 的一部分。當不正確地指定依賴時，它會發出警告，並提出修改建議。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"網路參考範例\"><a href=\"#網路參考範例\" class=\"headerlink\" title=\"網路參考範例:\"></a>網路參考範例:</h3><p><a href=\"https://www.runoob.com/react/react-state.html\" title=\"React State(状态)\">React State(状态)</a> @runoob基礎與線上範例<br>**<a href=\"https://zh-hant.reactjs.org/docs/state-and-lifecycle.html\" title=\"State 和生命週期\">State 和生命週期</a> @React中文React解說<br><a href=\"https://ithelp.ithome.com.tw/articles/10219057\" title=\"【React.js入門 - 11】 開始進入class component\">【React.js入門 - 11】 開始進入class component</a> @IT邦幫忙的系列文<br><a href=\"https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d\" title=\"React 與 bind this \">React 與 bind this </a> @medium</p>\n<p><a href=\"https://zh-hant.reactjs.org/docs/hooks-intro.html\">React hook</a> @React 中文解說Hook系列<br><a href=\"https://zh-hant.reactjs.org/docs/hooks-state.html\" title=\"使用 State Hook\">使用 State Hook</a> @React 中文解說State Hook中寫法對比</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>整理react學習“個人筆記” </p>\n</blockquote>\n<p>本文內容：</p>\n<ul>\n<li>React component (組件)語法</li>\n<li>props 是什麼<ul>\n<li>ES6箭頭函式組件</li>\n</ul>\n</li>\n<li>State的用法</li>\n<li>生命週期</li>\n</ul>\n<h3 id=\"React-component-組件-語法\"><a href=\"#React-component-組件-語法\" class=\"headerlink\" title=\"React component (組件)語法\"></a>React component (組件)語法</h3><ul>\n<li>component 就像是 JavaScript 的 function</li>\n<li>ReactDOM.render 中{函式名稱}變成了&lt;函式名稱/&gt; see:<a href=\"https://zh-hant.reactjs.org/docs/rendering-elements.html\">Render Element</a></li>\n<li>Component 命名首字必須大寫，大寫駝峰的方式，否則 React 會把它當作一般的 HTML 元素處理，並跳出Warning提示，看到大寫駝峰命名變數時，可以知道是 React 組件而非一般函式。</li>\n<li>其他 HTML 屬性、CSS 樣式屬性或一般的函式來說，則會遵行 JavaScript 以小寫駝峰來命名變數的慣例，例如在 className、maxLength、backgroundColor 等等。</li>\n</ul>\n<hr>\n<h3 id=\"props-是什麼\"><a href=\"#props-是什麼\" class=\"headerlink\" title=\"props 是什麼\"></a>props 是什麼</h3><ul>\n<li>component 就像是 JavaScript 的 function，它接收任意的參數（稱之為「props」）並且回傳畫面的 React element。</li>\n<li>props 通常是不可變的(唯獨Immutable)，不能修改自己的</li>\n</ul>\n<p>Ref:[Components 與 Props] (<a href=\"https://zh-hant.reactjs.org/docs/components-and-props.html\">https://zh-hant.reactjs.org/docs/components-and-props.html</a>)</p>","more":"<h4 id=\"function-component-vs-class-component\"><a href=\"#function-component-vs-class-component\" class=\"headerlink\" title=\"function component vs class component\"></a>function component vs class component</h4><p>接著看看兩種寫法轉換 Function 成 Class ：</p>\n<h5 id=\"使用function-來做-component\"><a href=\"#使用function-來做-component\" class=\"headerlink\" title=\"使用function 來做 component\"></a>使用function 來做 component</h5><ul>\n<li>如果需要向component傳参数，可以使用 props 對象，</li>\n<li>用return (html)</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption><span>function component</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">HelloName</span>(<span class=\"params\">props</span>) </span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello &#123;props.name&#125;!<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\"> &lt;React.StrictMode&gt;</span><br><span class=\"line\">\t &lt;HelloName name=<span class=\"string\">&quot;May&quot;</span>/&gt;</span><br><span class=\"line\">\t&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;example&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n<h5 id=\"使用ES6-class來做-component\"><a href=\"#使用ES6-class來做-component\" class=\"headerlink\" title=\"使用ES6 class來做 component\"></a>使用ES6 class來做 component</h5><ul>\n<li>也可以使用ES6  class來 來定義 </li>\n<li>繼承React.Component且在用render(){}包一層</li>\n<li>props 要改用 this.props</li>\n<li>用render(){return html}</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption><span>class來 component</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">HelloName</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">h1</span>&gt;</span>Hello, &#123;this.props.name&#125;<span class=\"tag\">&lt;/<span class=\"name\">h1</span>&gt;</span></span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\"> &lt;React.StrictMode&gt;</span><br><span class=\"line\">\t&lt;HelloName name=<span class=\"string\">&quot;May&quot;</span> /&gt;;,</span><br><span class=\"line\">\t&lt;/React.StrictMode&gt;,</span><br><span class=\"line\">\t<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;example&#x27;</span>)</span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n\n<p>組件裡面可以再包組件，透過這樣可以重新利用<br>範例練習: <a href=\"https://codesandbox.io/s/usercard-vh0e4\" title=\"USER info\">USER info</a></p>\n<h4 id=\"React組件-ES6箭頭函式組件-寫法\"><a href=\"#React組件-ES6箭頭函式組件-寫法\" class=\"headerlink\" title=\"React組件 ES6箭頭函式組件 寫法\"></a>React組件 ES6箭頭函式組件 寫法</h4><p>接著看看<code>箭頭函式語法</code>可以簡潔,少打很多字元</p>\n<ul>\n<li>const App: () =&gt; JSX.Element //大寫駱駝命名</li>\n<li>縮寫：如果裡面只有return 可以去掉{}與return，但通常會有一些變數存在，個人習慣保留．</li>\n<li>箭頭函式不可以使用於建構式，可以見<a href=\"https://minilabmemo.github.io/2021/02/20/js-start-01/\">[JS 01] javascript 新手上路與概念筆記</a></li>\n<li>使用插件快速鍵 rafc - ReactArrowFunctionComponent<br><a href=\"https://github.com/minilabmemo/counter-water/commit/aea85efa5f2e4a1f073cd7c89f96a458b00ab24c\">紀錄</a><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Hello &#x3D; () &#x3D;&gt; &#123;</span><br><span class=\"line\">  return ( &lt;div&gt;hello&lt;&#x2F;div&gt; )</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"State的用法\"><a href=\"#State的用法\" class=\"headerlink\" title=\"State的用法\"></a>State的用法</h3><p>Props 是唯讀的(Immutable)，State 類似於 prop，但它是私有且由 component 完全控制的。當state被改變時，會進入re-render的update程序，更新畫面</p>\n<h4 id=\"class-setState-vs-function-useState\"><a href=\"#class-setState-vs-function-useState\" class=\"headerlink\" title=\"class(setState) vs function(useState)\"></a>class(setState) vs function(useState)</h4><h5 id=\"1-使用class來改state（setState）\"><a href=\"#1-使用class來改state（setState）\" class=\"headerlink\" title=\"1. 使用class來改state（setState）\"></a>1. 使用class來改state（setState）</h5><ul>\n<li>使用 ES6 class來 來定義 </li>\n<li>繼承React.Component且在用render(){}包一層</li>\n<li>props 要改用 this.props</li>\n<li>如果想要更改props ，要改用setState</li>\n<li><a href=\"https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d\">根據React 與 bind this</a></li>\n<li>範例練習:透過一個新的按鈕去改變時間 <a href=\"https://codesandbox.io/s/refreshtime-ju4pv?file=/src/index.js\" title=\"Refresh Time\">Refresh Time</a></li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">&quot;react&quot;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">import</span> App <span class=\"keyword\">from</span> <span class=\"string\">&quot;./App&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Clock</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">props</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(props);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.state = &#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;;</span><br><span class=\"line\">    <span class=\"comment\">// this.changeTime=this.changeTime.bind(this);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// changeTime()&#123;</span></span><br><span class=\"line\">  <span class=\"comment\">//   this.setState(&#123;date: new Date()&#125;)</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// &#125;</span></span><br><span class=\"line\">  <span class=\"comment\">//根據React 與 bind this</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">//以上可以簡化 改箭頭含式寫法</span></span><br><span class=\"line\">  changeTime = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.setState(&#123; <span class=\"attr\">date</span>: <span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>() &#125;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">render</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h2&gt;现在是 &#123;<span class=\"built_in\">this</span>.state.date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"built_in\">this</span>.changeTime&#125;&gt;刷新 &lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Clock /&gt;,</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"2-使用function-component更改state（用useState）\"><a href=\"#2-使用function-component更改state（用useState）\" class=\"headerlink\" title=\"2.使用function component更改state（用useState）\"></a>2.使用function component更改state（用useState）</h4><ul>\n<li><p>沒有內部狀態（State），是 Stateless Components。</p>\n</li>\n<li><p>沒有 Lifecycle Hooks 和 refs。</p>\n</li>\n<li><p>如果想要更改props 要改用useState，useState-是一個基礎的Hook，是可以在function component中使用設定state，而不需要轉換成class。</p>\n<blockquote>\n<p>hook意思是“鈎子”，在音樂上，指的是一首歌曲中最能鈎人的部分。Hook 是 React 16.8 增加的新功能。讓你不必寫 class 就能使用 state 以及其他 React 的功能。使用hook可以更簡化且被推崇使用。</p>\n</blockquote>\n</li>\n<li><p>useState它回傳了一對值：目前的 state 跟一個可以更新 state 的 function。</p>\n</li>\n<li><p>範例改寫練習 <a href=\"https://codesandbox.io/s/refreshtimeusestate-xns3c?file=/src/index.js\" title=\"Refresh_Time_useState\">Refresh_Time_useState</a></p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//1.加上useState引入</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState &#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;react&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> ReactDOM <span class=\"keyword\">from</span> <span class=\"string\">&quot;react-dom&quot;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> Clock=<span class=\"function\">()=&gt;</span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 2.宣告一個 state 變數，命名date。</span></span><br><span class=\"line\">  <span class=\"comment\">// 傳入 useState() 的參數就是 state 起始值</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> [date, changeTime] = useState(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"><span class=\"comment\">// 3-1 return中直接寫上state變數-在 function 中可以直接使用 state</span></span><br><span class=\"line\"><span class=\"comment\">// 3-2 當使用者點擊，我們就呼叫 函式 並傳入新的值。</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span>(</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;h1&gt;Hello, world!&lt;/h1&gt;</span><br><span class=\"line\">        &lt;h2&gt;现在是 &#123;date.toLocaleTimeString()&#125;.&lt;/h2&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;<span class=\"function\">()=&gt;</span>&#123;changeTime(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>())&#125;&#125;&gt;刷新 &lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> rootElement = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&quot;root&quot;</span>);</span><br><span class=\"line\">ReactDOM.render(</span><br><span class=\"line\">  &lt;React.StrictMode&gt;</span><br><span class=\"line\">    &lt;Clock/&gt;</span><br><span class=\"line\">  &lt;/React.StrictMode&gt;,</span><br><span class=\"line\">  rootElement</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"（延伸說明）hooks-與-Function-Component\"><a href=\"#（延伸說明）hooks-與-Function-Component\" class=\"headerlink\" title=\"（延伸說明）hooks 與 Function Component\"></a>（延伸說明）hooks 與 Function Component</h4><p><a href=\"https://zh-hant.reactjs.org/docs/hooks-state.html\">使用 State Hook</a></p>\n<ul>\n<li><p>用 Function Component 代替 Stateless Component 的说法，原因是：自从 Hooks 出现，函数式组件功能在不断丰富，函数式组件不再需要强调其无状态特性，因此叫 Function Component 更为恰当。</p>\n</li>\n<li><p>從<a href=\"https://zhuanlan.zhihu.com/p/59558396\">精读《Function VS Class 组件》</a><br>中可以看的使用class component,會因為使用this問題而需要修復，要follow class結構與巢狀太過雜亂，再者，而function component沒有this,如果希望拿到稳定的 props，使用 Function Component 是更好的選擇。而</p>\n</li>\n<li><p>Function Component + Hooks 可以实现 Class Component 做不到的 capture props、capture value，而且 <code>React 官方也推荐 新的代码使用 Hooks 编写</code>。</p>\n</li>\n</ul>\n<hr>\n<h3 id=\"生命週期\"><a href=\"#生命週期\" class=\"headerlink\" title=\"生命週期\"></a>生命週期</h3><p>元件被安裝時(Mount)、元件被更新時(Update)、元件被移除時(Unmount)<br>*註：原本想要一樣比較一下class 原本的用法，但還是直接介紹function component(useEffect)更簡潔．</p>\n<h4 id=\"useEffect-hook\"><a href=\"#useEffect-hook\" class=\"headerlink\" title=\"useEffect hook\"></a>useEffect hook</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() &#x3D;&gt; &#123;</span><br><span class=\"line\">    &#x2F;*  componentDidMount 和  componentDidUpdate *&#x2F;</span><br><span class=\"line\">    return () &#x3D;&gt; &#123;</span><br><span class=\"line\">      &#x2F;* componentWillUnmount *&#x2F;   &#x2F;&#x2F;在 component unmount 時，React 會執行清除。</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    </span><br><span class=\"line\">&#125;, [dependencies參數]); &#x2F;* 是用來限定當哪些變數被改變時useEffect要觸發 *&#x2F;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>Ref:</p>\n<ul>\n<li><a href=\"https://zh-hant.reactjs.org/docs/hooks-effect.html\">官方-hooks-effect</a> 重點：<ul>\n<li>內有使用class與hook 的範例對比說明</li>\n<li>很多待細讀 ＴＢＤ</li>\n<li>我們建議使用 exhaustive-deps 規則作為我們 eslint-plugin-react-hooks package 的一部分。當不正確地指定依賴時，它會發出警告，並提出修改建議。</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h3 id=\"網路參考範例\"><a href=\"#網路參考範例\" class=\"headerlink\" title=\"網路參考範例:\"></a>網路參考範例:</h3><p><a href=\"https://www.runoob.com/react/react-state.html\" title=\"React State(状态)\">React State(状态)</a> @runoob基礎與線上範例<br>**<a href=\"https://zh-hant.reactjs.org/docs/state-and-lifecycle.html\" title=\"State 和生命週期\">State 和生命週期</a> @React中文React解說<br><a href=\"https://ithelp.ithome.com.tw/articles/10219057\" title=\"【React.js入門 - 11】 開始進入class component\">【React.js入門 - 11】 開始進入class component</a> @IT邦幫忙的系列文<br><a href=\"https://medium.com/reactmaker/react-%E8%88%87-bind-this-%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BF%83%E5%BE%97-323c8d3d395d\" title=\"React 與 bind this \">React 與 bind this </a> @medium</p>\n<p><a href=\"https://zh-hant.reactjs.org/docs/hooks-intro.html\">React hook</a> @React 中文解說Hook系列<br><a href=\"https://zh-hant.reactjs.org/docs/hooks-state.html\" title=\"使用 State Hook\">使用 State Hook</a> @React 中文解說State Hook中寫法對比</p>"},{"title":"[✍持續更新中] [vscode] 使用與插件分享","date":"2020-09-18T10:37:37.000Z","_content":"\n>cq %}\n\n# 什麼是 vscode\n\n>endcq %}\n\n <blockquote class=\"blockquote-center\">\n Visual Studio Code（簡稱vscode）是一個由微軟開發，同時支援Windows 、 Linux和macOS等操作系統的免費程式碼編輯器，它支援測試，並內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全、代碼片段和代碼重構等。 （維基百科）</blockquote>\n\n> 本篇記錄自身常用設定與插件紀錄．[✍持續更新中]\n<!--more-->\n\n## 開啟命令面板\n\nF1 或 Ctrl+Shift+P 開啟命令面板，再輸入想使用什麼內容，結合後續說明使用．\n\n## Git 版本控制\n\n其實在 vscode 中操作 Git 真的非常方便，以下動作都是自己摸索就找到對應功能了，\n直接紀錄幾個常用動作．\n\n- commit change File\n  切換到 git 頁籤->會出現你有更動過的檔案，點擊可以看到差異點\n  ->按下+ 可以新增至 change 列表->上方輸入 commit Message->上方有一個勾勾按下及 commit\n\n- 上傳 change File Push\n  點擊左下角分支圖右方會有上傳按鈕\n\n- 新增 branch\n  點擊左下角分支圖->Create branch ->輸入名稱\n\n- 切換 branch\n  點擊左下角分支圖->選擇分支\n\n- 刪除分支\n  Ctrl+shift+p->git delete branch->選擇分支\n\n## gitmoji\n在git提交上加入表情符號\n[gitmoji](https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode)\n\n## Code Snippet\n\n這個是 vscode 內建就有的程式碼內建設定，\n\n## 開啟終端機\n\n你不用跳到 VS Code 工具外來執行，直接按下【Ctrl+、】即可開啟終端機畫面，。\nCtrl+` Show integrated terminal\n\n## 安裝插件\n\n側邊欄中有一項 Extensions 可以在這邊搜尋插件與插件使用介紹．\n\n### 代碼格式化\n\n- prettier - code formatter\n- ESLint\n\n### Path Intellisense\n\n自動補齊程式中的路徑和文件名。\n\n### Task Kill\n有時候程式發生意外終止或是不小心關閉，會需要使用終端機查出進程ＩＤ並終止．\n這個插件很好用，安裝完後 cmd+shift+p 可以叫出對話 輸入task kill...by port 再輸入要砍的網路 port即可．\n\n### TODO TREE\n有時候開發過程中有未能完成或是要稍後完成的地方，可以加上TODO/FIXME等註解．\n這一個插件安裝完之後，側邊會出現新的icon，點擊後可以快速找出這些註解的地方．\n\n### Quokka.js (沒用過先記著)\n\nQuokka.js 会在你输入时自动计算结果，并在 IDE 中打印结果。\n\n### Auto rename Tag\n\n\n### Css-in-js\n可以透過指令將 CSS 選取後切換 css & css-in-js 寫法，不用再自己改半天啦！！\n\n### vscode-styled-components\n可以自動完成在css-in-js區塊裡面的css補全提示．\n\n\n### Git Graph\n\n可以看到分支圖\n\n### 後端語言相關 Go 套件\n\n#### 新增 task 設定\n\nF1 或 Ctrl+Shift+P 開啟命令面板\n\n```\ntasks.json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"echo\",\n            \"type\": \"shell\",\n            \"command\": \"echo Hello\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"rungo\",\n            \"type\": \"shell\",\n            \"command\": \"go\",\n            \"options\": {\n                \"cwd\": \"${workspaceRoot}\\\\\",\n                \"env\": {\n                    \"GOPATH\": \"D:\\\\go\"\n                }\n            },\n            \"args\": [\n                \"run\",\n                \"main.go\"\n            ],\n            \"problemMatcher\": []\n        }\n    ]\n}\n```\n\n### 新增 debug 設定\n\n```\nD:\\go\\src\\xxx\\.vscode\\launch.json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": []\n        },\n        {\n            \"name\": \"LaunchRoot\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n```\n\n-\n\n# 客製化設定\n\n根據插件會有對應的設定\n(快速鍵 Command+ ,) 開啟 settings.json 使用者設定檔\n\n### files\n\n```\n \"files.autoSave\": \"onFocusChange\", 當焦點移開自動儲存\n  \"files.associations\": {\n    \"*.js\": \"javascriptreact\" 新增檔案後綴連接的檔案類型 （React用）\n  },\n```\n\n### editor\n\n自動存檔格式化與更改預設格式化工具\n\n```\n\"editor.tabCompletion\": \"on\",\n//type a snippet prefix (trigger text), and press Tab to insert a snippet.\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n```\n\n### React JSX 自動格式化設定\n\n搭配 editor 根據檔案格式做設定\n\n```\n\n  \"[javascriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"eslint.codeAction.showDocumentation\": {\n    \"enable\": true\n  },\n\n```\n\n### React Hooks Snippets\nReact Hooks Snippets - React Hooks程式碼區段快速產生\n\n\n### prettier\n\n```\n'prettier.singleQuote': true,\n使用單引號，這個打開，格式化會幫你把\"\"變成單引號\n'prettier.semi': false,\n結束是否加分號\n```\n\n>note class_name %} ## 網路參考文章 \n\n| 連結 | 摘要 |\n| ----------- | --------|\n| [偏好的 Visual Studio Code 設定檔](https://blog.poychang.net/my-vscode-config)                                                 | 非常詳細   |\n| [vscode 如何自動格式化代碼？](https://kknews.cc/zh-tw/code/2kj8z9y.html 'vscode 如何自動格式化代碼？')    | 編輯器默認的格式化工具 |\n| [How do I enable automatic prettier formatting for .jsx files in VS Code?](https://stackoverflow.com/questions/62380051/how-do-i-enable-automatic-prettier-formatting-for-jsx-files-in-vs-code 'How do I enable automatic prettier formatting for .jsx files in VS Code?') | each file type has to be individually<br>Note javascriptreact as the identifier for JSX |\n| [VScode Golang 编译任务 Task.json](https://studygolang.com/articles/20742)                                                                                                                                                                                                 | 在終端機的指令可以透過 task 安裝                                                        |\n| [Visual Studio Code 極速上手指南](http://blog.tonycube.com/2018/11/visual-studio-code.html)                     |  |\n| [vscode 插件推荐 todo-tree](https://zhuanlan.zhihu.com/p/63303926)                                                                                                                              |                                                                                         |\n| [15 款好用的 VS Code 插件](https://www.infoq.cn/article/02mq2EZIhAaRuPk2Z8id)                                                                                                                                                                                              |                                                                                         |\n| [Visual Studio Code 之常備快捷鍵](https://www.itread01.com/content/1548344894.html)                                                                                                                                                                                        | Visual Studio Code 之常備快捷鍵                                                         |\n","source":"_posts/vscode-plugin.md","raw":"---\ntitle: '[✍持續更新中] [vscode] 使用與插件分享'\ntags:\n  - vscode\n  - IDE\ncategories:\n  - Tech.\n  - tool\ndate: 2020-09-18 18:37:37\n---\n\n>cq %}\n\n# 什麼是 vscode\n\n>endcq %}\n\n <blockquote class=\"blockquote-center\">\n Visual Studio Code（簡稱vscode）是一個由微軟開發，同時支援Windows 、 Linux和macOS等操作系統的免費程式碼編輯器，它支援測試，並內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全、代碼片段和代碼重構等。 （維基百科）</blockquote>\n\n> 本篇記錄自身常用設定與插件紀錄．[✍持續更新中]\n<!--more-->\n\n## 開啟命令面板\n\nF1 或 Ctrl+Shift+P 開啟命令面板，再輸入想使用什麼內容，結合後續說明使用．\n\n## Git 版本控制\n\n其實在 vscode 中操作 Git 真的非常方便，以下動作都是自己摸索就找到對應功能了，\n直接紀錄幾個常用動作．\n\n- commit change File\n  切換到 git 頁籤->會出現你有更動過的檔案，點擊可以看到差異點\n  ->按下+ 可以新增至 change 列表->上方輸入 commit Message->上方有一個勾勾按下及 commit\n\n- 上傳 change File Push\n  點擊左下角分支圖右方會有上傳按鈕\n\n- 新增 branch\n  點擊左下角分支圖->Create branch ->輸入名稱\n\n- 切換 branch\n  點擊左下角分支圖->選擇分支\n\n- 刪除分支\n  Ctrl+shift+p->git delete branch->選擇分支\n\n## gitmoji\n在git提交上加入表情符號\n[gitmoji](https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode)\n\n## Code Snippet\n\n這個是 vscode 內建就有的程式碼內建設定，\n\n## 開啟終端機\n\n你不用跳到 VS Code 工具外來執行，直接按下【Ctrl+、】即可開啟終端機畫面，。\nCtrl+` Show integrated terminal\n\n## 安裝插件\n\n側邊欄中有一項 Extensions 可以在這邊搜尋插件與插件使用介紹．\n\n### 代碼格式化\n\n- prettier - code formatter\n- ESLint\n\n### Path Intellisense\n\n自動補齊程式中的路徑和文件名。\n\n### Task Kill\n有時候程式發生意外終止或是不小心關閉，會需要使用終端機查出進程ＩＤ並終止．\n這個插件很好用，安裝完後 cmd+shift+p 可以叫出對話 輸入task kill...by port 再輸入要砍的網路 port即可．\n\n### TODO TREE\n有時候開發過程中有未能完成或是要稍後完成的地方，可以加上TODO/FIXME等註解．\n這一個插件安裝完之後，側邊會出現新的icon，點擊後可以快速找出這些註解的地方．\n\n### Quokka.js (沒用過先記著)\n\nQuokka.js 会在你输入时自动计算结果，并在 IDE 中打印结果。\n\n### Auto rename Tag\n\n\n### Css-in-js\n可以透過指令將 CSS 選取後切換 css & css-in-js 寫法，不用再自己改半天啦！！\n\n### vscode-styled-components\n可以自動完成在css-in-js區塊裡面的css補全提示．\n\n\n### Git Graph\n\n可以看到分支圖\n\n### 後端語言相關 Go 套件\n\n#### 新增 task 設定\n\nF1 或 Ctrl+Shift+P 開啟命令面板\n\n```\ntasks.json\n{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"label\": \"echo\",\n            \"type\": \"shell\",\n            \"command\": \"echo Hello\",\n            \"problemMatcher\": []\n        },\n        {\n            \"label\": \"rungo\",\n            \"type\": \"shell\",\n            \"command\": \"go\",\n            \"options\": {\n                \"cwd\": \"${workspaceRoot}\\\\\",\n                \"env\": {\n                    \"GOPATH\": \"D:\\\\go\"\n                }\n            },\n            \"args\": [\n                \"run\",\n                \"main.go\"\n            ],\n            \"problemMatcher\": []\n        }\n    ]\n}\n```\n\n### 新增 debug 設定\n\n```\nD:\\go\\src\\xxx\\.vscode\\launch.json\n{\n    // Use IntelliSense to learn about possible attributes.\n    // Hover to view descriptions of existing attributes.\n    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387\n    \"version\": \"0.2.0\",\n    \"configurations\": [\n        {\n            \"name\": \"Launch\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"auto\",\n            \"program\": \"${fileDirname}\",\n            \"env\": {},\n            \"args\": []\n        },\n        {\n            \"name\": \"LaunchRoot\",\n            \"type\": \"go\",\n            \"request\": \"launch\",\n            \"mode\": \"debug\",\n            \"program\": \"${workspaceRoot}\",\n            \"env\": {},\n            \"args\": []\n        }\n    ]\n}\n```\n\n-\n\n# 客製化設定\n\n根據插件會有對應的設定\n(快速鍵 Command+ ,) 開啟 settings.json 使用者設定檔\n\n### files\n\n```\n \"files.autoSave\": \"onFocusChange\", 當焦點移開自動儲存\n  \"files.associations\": {\n    \"*.js\": \"javascriptreact\" 新增檔案後綴連接的檔案類型 （React用）\n  },\n```\n\n### editor\n\n自動存檔格式化與更改預設格式化工具\n\n```\n\"editor.tabCompletion\": \"on\",\n//type a snippet prefix (trigger text), and press Tab to insert a snippet.\n\"editor.formatOnSave\": true,\n\"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n```\n\n### React JSX 自動格式化設定\n\n搭配 editor 根據檔案格式做設定\n\n```\n\n  \"[javascriptreact]\": {\n    \"editor.defaultFormatter\": \"esbenp.prettier-vscode\"\n  },\n  \"eslint.codeAction.showDocumentation\": {\n    \"enable\": true\n  },\n\n```\n\n### React Hooks Snippets\nReact Hooks Snippets - React Hooks程式碼區段快速產生\n\n\n### prettier\n\n```\n'prettier.singleQuote': true,\n使用單引號，這個打開，格式化會幫你把\"\"變成單引號\n'prettier.semi': false,\n結束是否加分號\n```\n\n>note class_name %} ## 網路參考文章 \n\n| 連結 | 摘要 |\n| ----------- | --------|\n| [偏好的 Visual Studio Code 設定檔](https://blog.poychang.net/my-vscode-config)                                                 | 非常詳細   |\n| [vscode 如何自動格式化代碼？](https://kknews.cc/zh-tw/code/2kj8z9y.html 'vscode 如何自動格式化代碼？')    | 編輯器默認的格式化工具 |\n| [How do I enable automatic prettier formatting for .jsx files in VS Code?](https://stackoverflow.com/questions/62380051/how-do-i-enable-automatic-prettier-formatting-for-jsx-files-in-vs-code 'How do I enable automatic prettier formatting for .jsx files in VS Code?') | each file type has to be individually<br>Note javascriptreact as the identifier for JSX |\n| [VScode Golang 编译任务 Task.json](https://studygolang.com/articles/20742)                                                                                                                                                                                                 | 在終端機的指令可以透過 task 安裝                                                        |\n| [Visual Studio Code 極速上手指南](http://blog.tonycube.com/2018/11/visual-studio-code.html)                     |  |\n| [vscode 插件推荐 todo-tree](https://zhuanlan.zhihu.com/p/63303926)                                                                                                                              |                                                                                         |\n| [15 款好用的 VS Code 插件](https://www.infoq.cn/article/02mq2EZIhAaRuPk2Z8id)                                                                                                                                                                                              |                                                                                         |\n| [Visual Studio Code 之常備快捷鍵](https://www.itread01.com/content/1548344894.html)                                                                                                                                                                                        | Visual Studio Code 之常備快捷鍵                                                         |\n","slug":"vscode-plugin","published":1,"updated":"2023-01-22T07:05:18.784Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhbm003ckp2xces72t28","content":"<blockquote>\n<p>cq %}</p>\n</blockquote>\n<h1 id=\"什麼是-vscode\"><a href=\"#什麼是-vscode\" class=\"headerlink\" title=\"什麼是 vscode\"></a>什麼是 vscode</h1><blockquote>\n<p>endcq %}</p>\n</blockquote>\n <blockquote class=\"blockquote-center\">\n Visual Studio Code（簡稱vscode）是一個由微軟開發，同時支援Windows 、 Linux和macOS等操作系統的免費程式碼編輯器，它支援測試，並內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全、代碼片段和代碼重構等。 （維基百科）</blockquote>\n\n<blockquote>\n<p>本篇記錄自身常用設定與插件紀錄．[✍持續更新中]</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"開啟命令面板\"><a href=\"#開啟命令面板\" class=\"headerlink\" title=\"開啟命令面板\"></a>開啟命令面板</h2><p>F1 或 Ctrl+Shift+P 開啟命令面板，再輸入想使用什麼內容，結合後續說明使用．</p>\n<h2 id=\"Git-版本控制\"><a href=\"#Git-版本控制\" class=\"headerlink\" title=\"Git 版本控制\"></a>Git 版本控制</h2><p>其實在 vscode 中操作 Git 真的非常方便，以下動作都是自己摸索就找到對應功能了，<br>直接紀錄幾個常用動作．</p>\n<ul>\n<li><p>commit change File<br>切換到 git 頁籤-&gt;會出現你有更動過的檔案，點擊可以看到差異點<br>-&gt;按下+ 可以新增至 change 列表-&gt;上方輸入 commit Message-&gt;上方有一個勾勾按下及 commit</p>\n</li>\n<li><p>上傳 change File Push<br>點擊左下角分支圖右方會有上傳按鈕</p>\n</li>\n<li><p>新增 branch<br>點擊左下角分支圖-&gt;Create branch -&gt;輸入名稱</p>\n</li>\n<li><p>切換 branch<br>點擊左下角分支圖-&gt;選擇分支</p>\n</li>\n<li><p>刪除分支<br>Ctrl+shift+p-&gt;git delete branch-&gt;選擇分支</p>\n</li>\n</ul>\n<h2 id=\"gitmoji\"><a href=\"#gitmoji\" class=\"headerlink\" title=\"gitmoji\"></a>gitmoji</h2><p>在git提交上加入表情符號<br><a href=\"https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode\">gitmoji</a></p>\n<h2 id=\"Code-Snippet\"><a href=\"#Code-Snippet\" class=\"headerlink\" title=\"Code Snippet\"></a>Code Snippet</h2><p>這個是 vscode 內建就有的程式碼內建設定，</p>\n<h2 id=\"開啟終端機\"><a href=\"#開啟終端機\" class=\"headerlink\" title=\"開啟終端機\"></a>開啟終端機</h2><p>你不用跳到 VS Code 工具外來執行，直接按下【Ctrl+、】即可開啟終端機畫面，。<br>Ctrl+` Show integrated terminal</p>\n<h2 id=\"安裝插件\"><a href=\"#安裝插件\" class=\"headerlink\" title=\"安裝插件\"></a>安裝插件</h2><p>側邊欄中有一項 Extensions 可以在這邊搜尋插件與插件使用介紹．</p>\n<h3 id=\"代碼格式化\"><a href=\"#代碼格式化\" class=\"headerlink\" title=\"代碼格式化\"></a>代碼格式化</h3><ul>\n<li>prettier - code formatter</li>\n<li>ESLint</li>\n</ul>\n<h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><p>自動補齊程式中的路徑和文件名。</p>\n<h3 id=\"Task-Kill\"><a href=\"#Task-Kill\" class=\"headerlink\" title=\"Task Kill\"></a>Task Kill</h3><p>有時候程式發生意外終止或是不小心關閉，會需要使用終端機查出進程ＩＤ並終止．<br>這個插件很好用，安裝完後 cmd+shift+p 可以叫出對話 輸入task kill…by port 再輸入要砍的網路 port即可．</p>\n<h3 id=\"TODO-TREE\"><a href=\"#TODO-TREE\" class=\"headerlink\" title=\"TODO TREE\"></a>TODO TREE</h3><p>有時候開發過程中有未能完成或是要稍後完成的地方，可以加上TODO/FIXME等註解．<br>這一個插件安裝完之後，側邊會出現新的icon，點擊後可以快速找出這些註解的地方．</p>\n<h3 id=\"Quokka-js-沒用過先記著\"><a href=\"#Quokka-js-沒用過先記著\" class=\"headerlink\" title=\"Quokka.js (沒用過先記著)\"></a>Quokka.js (沒用過先記著)</h3><p>Quokka.js 会在你输入时自动计算结果，并在 IDE 中打印结果。</p>\n<h3 id=\"Auto-rename-Tag\"><a href=\"#Auto-rename-Tag\" class=\"headerlink\" title=\"Auto rename Tag\"></a>Auto rename Tag</h3><h3 id=\"Css-in-js\"><a href=\"#Css-in-js\" class=\"headerlink\" title=\"Css-in-js\"></a>Css-in-js</h3><p>可以透過指令將 CSS 選取後切換 css &amp; css-in-js 寫法，不用再自己改半天啦！！</p>\n<h3 id=\"vscode-styled-components\"><a href=\"#vscode-styled-components\" class=\"headerlink\" title=\"vscode-styled-components\"></a>vscode-styled-components</h3><p>可以自動完成在css-in-js區塊裡面的css補全提示．</p>\n<h3 id=\"Git-Graph\"><a href=\"#Git-Graph\" class=\"headerlink\" title=\"Git Graph\"></a>Git Graph</h3><p>可以看到分支圖</p>\n<h3 id=\"後端語言相關-Go-套件\"><a href=\"#後端語言相關-Go-套件\" class=\"headerlink\" title=\"後端語言相關 Go 套件\"></a>後端語言相關 Go 套件</h3><h4 id=\"新增-task-設定\"><a href=\"#新增-task-設定\" class=\"headerlink\" title=\"新增 task 設定\"></a>新增 task 設定</h4><p>F1 或 Ctrl+Shift+P 開啟命令面板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class=\"line\">    &quot;tasks&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;label&quot;: &quot;echo&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class=\"line\">            &quot;command&quot;: &quot;echo Hello&quot;,</span><br><span class=\"line\">            &quot;problemMatcher&quot;: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;label&quot;: &quot;rungo&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class=\"line\">            &quot;command&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;options&quot;: &#123;</span><br><span class=\"line\">                &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;\\\\&quot;,</span><br><span class=\"line\">                &quot;env&quot;: &#123;</span><br><span class=\"line\">                    &quot;GOPATH&quot;: &quot;D:\\\\go&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;args&quot;: [</span><br><span class=\"line\">                &quot;run&quot;,</span><br><span class=\"line\">                &quot;main.go&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;problemMatcher&quot;: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新增-debug-設定\"><a href=\"#新增-debug-設定\" class=\"headerlink\" title=\"新增 debug 設定\"></a>新增 debug 設定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\go\\src\\xxx\\.vscode\\launch.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;mode&quot;: &quot;auto&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br><span class=\"line\">            &quot;env&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;args&quot;: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;LaunchRoot&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;mode&quot;: &quot;debug&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;env&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;args&quot;: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>-</p>\n<h1 id=\"客製化設定\"><a href=\"#客製化設定\" class=\"headerlink\" title=\"客製化設定\"></a>客製化設定</h1><p>根據插件會有對應的設定<br>(快速鍵 Command+ ,) 開啟 settings.json 使用者設定檔</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"headerlink\" title=\"files\"></a>files</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;files.autoSave&quot;: &quot;onFocusChange&quot;, 當焦點移開自動儲存</span><br><span class=\"line\"> &quot;files.associations&quot;: &#123;</span><br><span class=\"line\">   &quot;*.js&quot;: &quot;javascriptreact&quot; 新增檔案後綴連接的檔案類型 （React用）</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"editor\"><a href=\"#editor\" class=\"headerlink\" title=\"editor\"></a>editor</h3><p>自動存檔格式化與更改預設格式化工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;editor.tabCompletion&quot;: &quot;on&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;type a snippet prefix (trigger text), and press Tab to insert a snippet.</span><br><span class=\"line\">&quot;editor.formatOnSave&quot;: true,</span><br><span class=\"line\">&quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-JSX-自動格式化設定\"><a href=\"#React-JSX-自動格式化設定\" class=\"headerlink\" title=\"React JSX 自動格式化設定\"></a>React JSX 自動格式化設定</h3><p>搭配 editor 根據檔案格式做設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;[javascriptreact]&quot;: &#123;</span><br><span class=\"line\">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;eslint.codeAction.showDocumentation&quot;: &#123;</span><br><span class=\"line\">  &quot;enable&quot;: true</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Hooks-Snippets\"><a href=\"#React-Hooks-Snippets\" class=\"headerlink\" title=\"React Hooks Snippets\"></a>React Hooks Snippets</h3><p>React Hooks Snippets - React Hooks程式碼區段快速產生</p>\n<h3 id=\"prettier\"><a href=\"#prettier\" class=\"headerlink\" title=\"prettier\"></a>prettier</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;prettier.singleQuote&#39;: true,</span><br><span class=\"line\">使用單引號，這個打開，格式化會幫你把&quot;&quot;變成單引號</span><br><span class=\"line\">&#39;prettier.semi&#39;: false,</span><br><span class=\"line\">結束是否加分號</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>連結</th>\n<th>摘要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://blog.poychang.net/my-vscode-config\">偏好的 Visual Studio Code 設定檔</a></td>\n<td>非常詳細</td>\n</tr>\n<tr>\n<td><a href=\"https://kknews.cc/zh-tw/code/2kj8z9y.html\" title=\"vscode 如何自動格式化代碼？\">vscode 如何自動格式化代碼？</a></td>\n<td>編輯器默認的格式化工具</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/62380051/how-do-i-enable-automatic-prettier-formatting-for-jsx-files-in-vs-code\" title=\"How do I enable automatic prettier formatting for .jsx files in VS Code?\">How do I enable automatic prettier formatting for .jsx files in VS Code?</a></td>\n<td>each file type has to be individually<br>Note javascriptreact as the identifier for JSX</td>\n</tr>\n<tr>\n<td><a href=\"https://studygolang.com/articles/20742\">VScode Golang 编译任务 Task.json</a></td>\n<td>在終端機的指令可以透過 task 安裝</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.tonycube.com/2018/11/visual-studio-code.html\">Visual Studio Code 極速上手指南</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://zhuanlan.zhihu.com/p/63303926\">vscode 插件推荐 todo-tree</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.infoq.cn/article/02mq2EZIhAaRuPk2Z8id\">15 款好用的 VS Code 插件</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.itread01.com/content/1548344894.html\">Visual Studio Code 之常備快捷鍵</a></td>\n<td>Visual Studio Code 之常備快捷鍵</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>cq %}</p>\n</blockquote>\n<h1 id=\"什麼是-vscode\"><a href=\"#什麼是-vscode\" class=\"headerlink\" title=\"什麼是 vscode\"></a>什麼是 vscode</h1><blockquote>\n<p>endcq %}</p>\n</blockquote>\n <blockquote class=\"blockquote-center\">\n Visual Studio Code（簡稱vscode）是一個由微軟開發，同時支援Windows 、 Linux和macOS等操作系統的免費程式碼編輯器，它支援測試，並內建了Git 版本控制功能，同時也具有開發環境功能，例如代碼補全、代碼片段和代碼重構等。 （維基百科）</blockquote>\n\n<blockquote>\n<p>本篇記錄自身常用設定與插件紀錄．[✍持續更新中]</p>\n</blockquote>","more":"<h2 id=\"開啟命令面板\"><a href=\"#開啟命令面板\" class=\"headerlink\" title=\"開啟命令面板\"></a>開啟命令面板</h2><p>F1 或 Ctrl+Shift+P 開啟命令面板，再輸入想使用什麼內容，結合後續說明使用．</p>\n<h2 id=\"Git-版本控制\"><a href=\"#Git-版本控制\" class=\"headerlink\" title=\"Git 版本控制\"></a>Git 版本控制</h2><p>其實在 vscode 中操作 Git 真的非常方便，以下動作都是自己摸索就找到對應功能了，<br>直接紀錄幾個常用動作．</p>\n<ul>\n<li><p>commit change File<br>切換到 git 頁籤-&gt;會出現你有更動過的檔案，點擊可以看到差異點<br>-&gt;按下+ 可以新增至 change 列表-&gt;上方輸入 commit Message-&gt;上方有一個勾勾按下及 commit</p>\n</li>\n<li><p>上傳 change File Push<br>點擊左下角分支圖右方會有上傳按鈕</p>\n</li>\n<li><p>新增 branch<br>點擊左下角分支圖-&gt;Create branch -&gt;輸入名稱</p>\n</li>\n<li><p>切換 branch<br>點擊左下角分支圖-&gt;選擇分支</p>\n</li>\n<li><p>刪除分支<br>Ctrl+shift+p-&gt;git delete branch-&gt;選擇分支</p>\n</li>\n</ul>\n<h2 id=\"gitmoji\"><a href=\"#gitmoji\" class=\"headerlink\" title=\"gitmoji\"></a>gitmoji</h2><p>在git提交上加入表情符號<br><a href=\"https://marketplace.visualstudio.com/items?itemName=Vtrois.gitmoji-vscode\">gitmoji</a></p>\n<h2 id=\"Code-Snippet\"><a href=\"#Code-Snippet\" class=\"headerlink\" title=\"Code Snippet\"></a>Code Snippet</h2><p>這個是 vscode 內建就有的程式碼內建設定，</p>\n<h2 id=\"開啟終端機\"><a href=\"#開啟終端機\" class=\"headerlink\" title=\"開啟終端機\"></a>開啟終端機</h2><p>你不用跳到 VS Code 工具外來執行，直接按下【Ctrl+、】即可開啟終端機畫面，。<br>Ctrl+` Show integrated terminal</p>\n<h2 id=\"安裝插件\"><a href=\"#安裝插件\" class=\"headerlink\" title=\"安裝插件\"></a>安裝插件</h2><p>側邊欄中有一項 Extensions 可以在這邊搜尋插件與插件使用介紹．</p>\n<h3 id=\"代碼格式化\"><a href=\"#代碼格式化\" class=\"headerlink\" title=\"代碼格式化\"></a>代碼格式化</h3><ul>\n<li>prettier - code formatter</li>\n<li>ESLint</li>\n</ul>\n<h3 id=\"Path-Intellisense\"><a href=\"#Path-Intellisense\" class=\"headerlink\" title=\"Path Intellisense\"></a>Path Intellisense</h3><p>自動補齊程式中的路徑和文件名。</p>\n<h3 id=\"Task-Kill\"><a href=\"#Task-Kill\" class=\"headerlink\" title=\"Task Kill\"></a>Task Kill</h3><p>有時候程式發生意外終止或是不小心關閉，會需要使用終端機查出進程ＩＤ並終止．<br>這個插件很好用，安裝完後 cmd+shift+p 可以叫出對話 輸入task kill…by port 再輸入要砍的網路 port即可．</p>\n<h3 id=\"TODO-TREE\"><a href=\"#TODO-TREE\" class=\"headerlink\" title=\"TODO TREE\"></a>TODO TREE</h3><p>有時候開發過程中有未能完成或是要稍後完成的地方，可以加上TODO/FIXME等註解．<br>這一個插件安裝完之後，側邊會出現新的icon，點擊後可以快速找出這些註解的地方．</p>\n<h3 id=\"Quokka-js-沒用過先記著\"><a href=\"#Quokka-js-沒用過先記著\" class=\"headerlink\" title=\"Quokka.js (沒用過先記著)\"></a>Quokka.js (沒用過先記著)</h3><p>Quokka.js 会在你输入时自动计算结果，并在 IDE 中打印结果。</p>\n<h3 id=\"Auto-rename-Tag\"><a href=\"#Auto-rename-Tag\" class=\"headerlink\" title=\"Auto rename Tag\"></a>Auto rename Tag</h3><h3 id=\"Css-in-js\"><a href=\"#Css-in-js\" class=\"headerlink\" title=\"Css-in-js\"></a>Css-in-js</h3><p>可以透過指令將 CSS 選取後切換 css &amp; css-in-js 寫法，不用再自己改半天啦！！</p>\n<h3 id=\"vscode-styled-components\"><a href=\"#vscode-styled-components\" class=\"headerlink\" title=\"vscode-styled-components\"></a>vscode-styled-components</h3><p>可以自動完成在css-in-js區塊裡面的css補全提示．</p>\n<h3 id=\"Git-Graph\"><a href=\"#Git-Graph\" class=\"headerlink\" title=\"Git Graph\"></a>Git Graph</h3><p>可以看到分支圖</p>\n<h3 id=\"後端語言相關-Go-套件\"><a href=\"#後端語言相關-Go-套件\" class=\"headerlink\" title=\"後端語言相關 Go 套件\"></a>後端語言相關 Go 套件</h3><h4 id=\"新增-task-設定\"><a href=\"#新增-task-設定\" class=\"headerlink\" title=\"新增 task 設定\"></a>新增 task 設定</h4><p>F1 或 Ctrl+Shift+P 開啟命令面板</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tasks.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;version&quot;: &quot;2.0.0&quot;,</span><br><span class=\"line\">    &quot;tasks&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;label&quot;: &quot;echo&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class=\"line\">            &quot;command&quot;: &quot;echo Hello&quot;,</span><br><span class=\"line\">            &quot;problemMatcher&quot;: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;label&quot;: &quot;rungo&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;shell&quot;,</span><br><span class=\"line\">            &quot;command&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;options&quot;: &#123;</span><br><span class=\"line\">                &quot;cwd&quot;: &quot;$&#123;workspaceRoot&#125;\\\\&quot;,</span><br><span class=\"line\">                &quot;env&quot;: &#123;</span><br><span class=\"line\">                    &quot;GOPATH&quot;: &quot;D:\\\\go&quot;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            &quot;args&quot;: [</span><br><span class=\"line\">                &quot;run&quot;,</span><br><span class=\"line\">                &quot;main.go&quot;</span><br><span class=\"line\">            ],</span><br><span class=\"line\">            &quot;problemMatcher&quot;: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"新增-debug-設定\"><a href=\"#新增-debug-設定\" class=\"headerlink\" title=\"新增 debug 設定\"></a>新增 debug 設定</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">D:\\go\\src\\xxx\\.vscode\\launch.json</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &#x2F;&#x2F; Use IntelliSense to learn about possible attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; Hover to view descriptions of existing attributes.</span><br><span class=\"line\">    &#x2F;&#x2F; For more information, visit: https:&#x2F;&#x2F;go.microsoft.com&#x2F;fwlink&#x2F;?linkid&#x3D;830387</span><br><span class=\"line\">    &quot;version&quot;: &quot;0.2.0&quot;,</span><br><span class=\"line\">    &quot;configurations&quot;: [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;Launch&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;mode&quot;: &quot;auto&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;fileDirname&#125;&quot;,</span><br><span class=\"line\">            &quot;env&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;args&quot;: []</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;name&quot;: &quot;LaunchRoot&quot;,</span><br><span class=\"line\">            &quot;type&quot;: &quot;go&quot;,</span><br><span class=\"line\">            &quot;request&quot;: &quot;launch&quot;,</span><br><span class=\"line\">            &quot;mode&quot;: &quot;debug&quot;,</span><br><span class=\"line\">            &quot;program&quot;: &quot;$&#123;workspaceRoot&#125;&quot;,</span><br><span class=\"line\">            &quot;env&quot;: &#123;&#125;,</span><br><span class=\"line\">            &quot;args&quot;: []</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>-</p>\n<h1 id=\"客製化設定\"><a href=\"#客製化設定\" class=\"headerlink\" title=\"客製化設定\"></a>客製化設定</h1><p>根據插件會有對應的設定<br>(快速鍵 Command+ ,) 開啟 settings.json 使用者設定檔</p>\n<h3 id=\"files\"><a href=\"#files\" class=\"headerlink\" title=\"files\"></a>files</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;files.autoSave&quot;: &quot;onFocusChange&quot;, 當焦點移開自動儲存</span><br><span class=\"line\"> &quot;files.associations&quot;: &#123;</span><br><span class=\"line\">   &quot;*.js&quot;: &quot;javascriptreact&quot; 新增檔案後綴連接的檔案類型 （React用）</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n<h3 id=\"editor\"><a href=\"#editor\" class=\"headerlink\" title=\"editor\"></a>editor</h3><p>自動存檔格式化與更改預設格式化工具</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;editor.tabCompletion&quot;: &quot;on&quot;,</span><br><span class=\"line\">&#x2F;&#x2F;type a snippet prefix (trigger text), and press Tab to insert a snippet.</span><br><span class=\"line\">&quot;editor.formatOnSave&quot;: true,</span><br><span class=\"line\">&quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br></pre></td></tr></table></figure>\n<h3 id=\"React-JSX-自動格式化設定\"><a href=\"#React-JSX-自動格式化設定\" class=\"headerlink\" title=\"React JSX 自動格式化設定\"></a>React JSX 自動格式化設定</h3><p>搭配 editor 根據檔案格式做設定</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">&quot;[javascriptreact]&quot;: &#123;</span><br><span class=\"line\">  &quot;editor.defaultFormatter&quot;: &quot;esbenp.prettier-vscode&quot;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&quot;eslint.codeAction.showDocumentation&quot;: &#123;</span><br><span class=\"line\">  &quot;enable&quot;: true</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"React-Hooks-Snippets\"><a href=\"#React-Hooks-Snippets\" class=\"headerlink\" title=\"React Hooks Snippets\"></a>React Hooks Snippets</h3><p>React Hooks Snippets - React Hooks程式碼區段快速產生</p>\n<h3 id=\"prettier\"><a href=\"#prettier\" class=\"headerlink\" title=\"prettier\"></a>prettier</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#39;prettier.singleQuote&#39;: true,</span><br><span class=\"line\">使用單引號，這個打開，格式化會幫你把&quot;&quot;變成單引號</span><br><span class=\"line\">&#39;prettier.semi&#39;: false,</span><br><span class=\"line\">結束是否加分號</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>note class_name %} ## 網路參考文章 </p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>連結</th>\n<th>摘要</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://blog.poychang.net/my-vscode-config\">偏好的 Visual Studio Code 設定檔</a></td>\n<td>非常詳細</td>\n</tr>\n<tr>\n<td><a href=\"https://kknews.cc/zh-tw/code/2kj8z9y.html\" title=\"vscode 如何自動格式化代碼？\">vscode 如何自動格式化代碼？</a></td>\n<td>編輯器默認的格式化工具</td>\n</tr>\n<tr>\n<td><a href=\"https://stackoverflow.com/questions/62380051/how-do-i-enable-automatic-prettier-formatting-for-jsx-files-in-vs-code\" title=\"How do I enable automatic prettier formatting for .jsx files in VS Code?\">How do I enable automatic prettier formatting for .jsx files in VS Code?</a></td>\n<td>each file type has to be individually<br>Note javascriptreact as the identifier for JSX</td>\n</tr>\n<tr>\n<td><a href=\"https://studygolang.com/articles/20742\">VScode Golang 编译任务 Task.json</a></td>\n<td>在終端機的指令可以透過 task 安裝</td>\n</tr>\n<tr>\n<td><a href=\"http://blog.tonycube.com/2018/11/visual-studio-code.html\">Visual Studio Code 極速上手指南</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://zhuanlan.zhihu.com/p/63303926\">vscode 插件推荐 todo-tree</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.infoq.cn/article/02mq2EZIhAaRuPk2Z8id\">15 款好用的 VS Code 插件</a></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.itread01.com/content/1548344894.html\">Visual Studio Code 之常備快捷鍵</a></td>\n<td>Visual Studio Code 之常備快捷鍵</td>\n</tr>\n</tbody></table>"},{"title":"[JS 01] javascript 新手上路與概念筆記","date":"2021-02-20T03:33:18.000Z","_content":"\n>本章由[MDN-JavaScript](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript)開始著手練習，並筆記學習概念．  \n\n\n<!--more-->\n\n## JS歷史- ES6 2015\nECMAScript是一種由Ecma國際定義的手稿語言規範，它往往被稱為JavaScript或JScript (維基)\n- ES6為ECMAScript2015，是大幅度的更新，討論度較高，\n\n---\n## 宣告與各用法概念\n\n### 命名規則\n- 小寫駱駝\n- 大小寫相異(敏感)\n- 有意義的名字\n\nref:[关于变量命名的规则](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99)\n\n### 變數\n- 宣告變數但不賦值=undefined\n- null常見於宣告後面定義成沒有值或找不到\n- 全域屬性 NaN 表示「非數值」（Not-A-Number）的數值\n  - NaN 不等於（==、!=、===、!==）任何值，包括 NaN 本身。請使用 Number.isNaN() 或 isNaN() 來確認某個數值是否為 NaN。\n\nref:\n[var 与 let 的区别](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_%E4%B8%8E_let_%E7%9A%84%E5%8C%BA%E5%88%AB) | [let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) | [NaN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n\n\n\n---\n### 操作\n\n#### 比對\n#####  嚴格相等（===）\n先比較型別\n##### 一般相等（==）\n一般相等會先將比較值轉換成同型別後比較。轉換後（可能一個或兩個都被轉換），接著進行的幾乎和嚴格比較（===）一樣。\n```js\nconsole.log(123 === \"123\"); false\nconsole.log(false === 0);false\nconsole.log(false == 0);true\nconsole.log(123 == \"123\");true\n```\n- 部分開發者認為最好別用一般相等。嚴格比較更容易預測，且因為不必轉型，因此效率更好。\n\n##### 同值相等\n>label info@ES6%}  提出同值相等演算法，用來解決這個問題。Object.is就是部署這個演算法的新方法。同值相等解決了最後一個情況：比較兩個值是否功能相同 。\nObject.is 會和嚴格相等做同樣的事，但會將 NaN、-0 和 +0 獨立處理，因此這三個不會相等\n\n\n##### 零值相等\n和同值相等一樣，但將 +0 和 -0 視為相同。\n```js\nconsole.log(-0 == +0); true\nconsole.log(-0 === +0); true\n```\n\n- 更多比較表可以看 [Equality_comparisons_and_sameness](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- 陣列比較more [如何在 JavaScript 中比較兩個陣列](https://www.delftstack.com/zh-tw/howto/javascript/compare-two-arrays-javascript/)\n\n#### 二元邏輯運算子\nJavaScript 中的真假值在判斷會自動作轉型，像是 null、NaN、0、空字串（\"\"、''）、undefined 都會被轉型並判斷為「false」。\n- &&\na= 條件式 ＆＆“”\n```js\na5 = 'Cat' && 'Dog'      // t && t returns \"Dog\"\na6 = false && 'Cat'      // f && t returns false\n```\n- ||\n```js\nconst a = 0 || 'hidden';           \n// 因為 0 被轉型後為 false，所以 a 會是 'hidden'\n\nconst b = 26900 || 24900;          \n// 因為 26900 會轉型為 true，所以 b 會是 26900\n\n```\n\n#### >label info@ES6%} - 展開語法（spread syntax）& 其餘語法（rest syntax）\n展開運算子(...) 允許可迭代的陣列或字串展開成０到多個參數\n\n\n#### 字符操作\n- 一個字符串和一個数字可以直接相加變成字串\n- 把字串當作對象，或許長度或大小寫轉換去處理字符串\n```js\n<script>\n    let s = 19 + '67';\n    console.log(\"s:\"+s+\" type:\"+typeof s);\n    //鍵入s.可以找到很多以字符為對象的操作\n</script>\ns:1967 type:string\n```\n\n\n#### Number()\n对象将把传递给它的任何东西转换成一个数字\n```js\nlet myString = '123';\nlet myNum = Number(myString);\ntypeof myNum;\n```\n#### toString()\n每个数字都有一个名为 toString() 的方法，它将把它转换成等价的字符串。\n\nref:[JavaScript中的字符串](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings)\n\n\n#### [樣板字面值](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals)\n>label info@ES6%} 樣板字面值（Template literals）是允許嵌入運算式的字串字面值（string literals）。\n- 被反引號（back-tick，重音符號` ` )字元封閉，代替了雙或單引號。\n- 可以包含由錢字元及花括號所構成（${expression}）的佔位符（placeholders）\n```js\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n\n```\n\n- 標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過>label warning@自訂命名標籤函數 %}操作樣板字面值的輸出。\n- 巢狀的樣板字面值的應用[Javascript 進階 10-3 巢狀結構](https://ithelp.ithome.com.tw/articles/10231520)\n\n#### 物件屬性名稱縮寫（Shorthand property names）\n- Key 與 Value 名稱相同，可進行縮寫\n- 物件內可直接省略 function 關鍵字進行縮寫\n\n#### >label info@ES6%}  - 解構賦值 Destructuring assignment\n可以把陣列或物件中的資料解開擷取成為獨立變數\n詳細請見:[MDN-解構賦值](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n```js\nconst o = {p: 42, q: true};\nconst {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true\n\n///\nconst o = {p: 42, q: true};\nconst {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true\n  ```\n\n\n\n\n\n---\n\n### 函式宣告\n  - 可用函式宣告（Function Declaration）（ES5）\n  - 函式運算式(表達式)（Function Expressions）（ES5）\n    - 宣告一個函數，或匿名函數 (anonymous function / function literal) 當作值指定給一個變數\n  - 箭頭函式運算式（arrow function expression）（>label success@ES6 %}）\n    - 它沒有自己的 this、arguments、super、new.target 等語法。\n\n\nfunction 建構子說明\n- JavaScript 使用稱為建構子函式（constructor function）的特殊函式，定義物件與功能。\n```JavaScript\n// 自己的一些東西\nfunction Person(first, last, age, gender, interests) {\n  this.name = {\n    first,\n    last\n  };\n  this.age = age;\n  this.gender = gender;\n  this.interests = interests;\n  this.bio = function() {\n    alert(this.name.first + ' ' + this.name.last + ' is ' + this.age + ' years old. He likes ' + this.interests[0] + ' and ' + this.interests[1] + '.');\n  };\n  this.greeting = function() {\n    alert('Hi! I\\'m ' + this.name.first + '.');\n  };\n};\nvar person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);\n\n```\nRef:[初學者應知道的物件導向 JavaScript](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_JS)\n- 箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。\n- 沒有 arguments \"引數\"參數,當需要使用 arguments 請維持使用 function。[->參數引數的概念請先知道]\n- 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) => { return 表示式; }\n```JavaScript\n  //箭頭 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) => { return 表示式; }\n  const Pet_Arr = (color) => {\n    this.color = color;\n  }\n  // ini_constructor_proto.html:99 Uncaught TypeError: Pet_Arr is not a constructor\n  //箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。\n  const PetA = new Pet_Arr('yellow'); //\n```\nRef: [箭頭函式 MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n#### 宣告練習\n使用及細節可以看下方\n```JavaScript (js_func.html)\n    <script>\n        // ES5 函式宣告（Function Declaration）\n        //function 函式名稱(參數) {\n        function Add(A, B) {\n            return A + B;\n        }\n        /* 或 */\n        // ES5  函式運算式(表達式)（Function Expressions）\n        // var 函式名稱 = function (參數) {\n        var Add2 = function (A, B) {//匿名函式\n            return A + B;\n        }\n        var Add3 = function add3(A, B) {//#1 非匿名函式\n            console.log(typeof add3);//#1 但只在自身有效\n            return A + B;\n        }\n        console.log(Add(1, 2))//3\n        console.log(Add2(1, 2))//3\n        console.log(Add3(1, 2))//3\n        //console.log(add3(1, 2))//#1 ReferenceError: add3 is not defined\n\n\n        //ES6 宣告型態 函式名稱 = (參數) => {\n        var Add4 = (A, B) => {\n            return A + B;\n        }\n        //縮寫 如果只有return 可以去掉{}與return\n        var Add5 = (A, B) => A + B;\n\n         //縮寫 如果只有一個參數 可以去掉（）\n        var AddS1 = (A) => A;\n        var AddS2 = A => A;\n\n        console.log(\"ES6:\" + Add4(1, 2))//3\n        console.log(\"ES6:\" + Add5(1, 2))//3\n    </script>\n```\n#### this的問題與箭頭函數的出現\n箭頭函式有兩個重要的特性：更短的函式寫法與 this 變數的非綁定。\n\n- 使用及細節可以看下方\n```JavaScript (js_func_this.html)\n    <script>\n        //ES5 函示內this會指向windows而非Person，因此要像PersonSolve寫法\n        function Person() {\n            // Person() 建構式將 this 定義為它自己的一個實體\n            this.age = 0;\n            console.log(\"Person():\" + this.constructor.name);\n            setTimeout(function growUp() {\n                // 在非嚴格模式下, growUp() 函式把 this 定義為全域物件\n                // (因為那是 growUp()執行的所在)，\n                // 與 Person() 建構式所定義的 this 有所不同\n                this.age++;\n                console.log(\"Person.setTimeout():\" + this.constructor.name);\n                console.log(\"Person.setTimeout():\" + this.age)\n            }, 1000);\n        }\n        function PersonSolve() {\n            var self = this; // 有些人喜歡 `that` 而不是 `self`.\n            // 選好一種取法後始終如一\n            self.age = 0;\n            console.log(\"PersonSolve():\" + this.constructor.name);\n            setTimeout(function growUp() {\n                // 這個 callback 參考 `self` 變數，為預期中的物件。\n                self.age++;\n                console.log(\"PersonSolve.setTimeout():\" + self.constructor.name);\n                console.log(\"PersonSolve.setTimeout():\" + self.age)\n\n            }, 1000);\n        }\n        var p1 = new Person();\n        var p2 = new PersonSolve();\n        //---------\n\n        //ES6 箭頭函示------------------------------\n        function Person_Arr() {\n            this.age = 0;\n            console.log(\"Person_Arr():\" + this.constructor.name);\n            setTimeout(() => {\n                this.age++; // |this| 適切的參考了Person建構式所建立的物件\n                console.log(\"Person_Arr.setTimeout():\" + this.constructor.name);\n                console.log(\"Person_Arr.setTimeout():\" + this.age)\n            }, 1000);\n        }\n\n        var p3 = new Person_Arr();\n        //ES6 箭頭函示------------------------------\n\n       // OUTPUT\n        // js_func_this.html: 17 Person(): Person\n        // js_func_this.html: 31 PersonSolve(): PersonSolve\n        // js_func_this.html: 47 Person_Arr(): Person_Arr\n\n        // js_func_this.html: 23 Person.setTimeout(): Window -->發現竟然指向Window\n        // js_func_this.html: 24 Person.setTimeout(): NaN  -->內容不見！！\n        // js_func_this.html: 35 PersonSolve.setTimeout(): PersonSolve  -->workaround解法\n        // js_func_this.html: 36 PersonSolve.setTimeout(): 1\n        // js_func_this.html: 50 Person_Arr.setTimeout(): Person_Arr -->ES6 arrow解法\n        // js_func_this.html: 51 Person_Arr.setTimeout(): 1\n    </script>\n```\n\n- 箭頭函式並沒有原型（prototype）屬性。\nmore ref: [this不分家](https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6)\n\nＴＢＤ\nno this new\nhttps://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\n\n### JS的 Hoisting (提升)顶置特性\n- 變數(var hoisting)與函數都可以先使用再宣告\n- 但提升操作不再适用于 let 并引起一个错误(Uncaught ReferenceError)\n ref:[JavaScript Hoisting (提升)](https://shubo.io/javascript-hoisting/#javascript-hoisting-%E6%8F%90%E5%8D%87)\n\n\n### >label info@ES6%}  - 使用module分檔 (import & export)\n\n### 閉包（Closure）\n閉包是函式以及該函式被宣告時所在的作用域環境的組合。\n- 閉包的好處能把變數隱藏在裡面讓外部存取不到\n- 閉包在 callback 上的應用尤其常見\n- 在迴圈建立閉包：一個常見錯誤\n在 ECMAScript 2015 (>label info@ES6%} )導入 let 前，迴圈內建立的閉包，常會發生問題。\n範例請見： [simple_js_demo-closure](https://github.com/minilabmemo/simple_js_demo/blob/master/04_js_closure/closure.html)\n\nRef:\n- [MDN-閉包](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures)\n- [你懂 JavaScript 嗎？#15 閉包（Closure）]（https://cythilya.github.io/2018/10/22/closure/）\n\n\n\n\n\n## 探討：JavaScript OOP\nOOP （(Object-oriented programming）物件導向/對象編程，在 JavaScript 中，大多数事物都是对象, 从作为核心功能的字符串和数组。你甚至可以自己创建对象，在调用函数前加一个 new ，它就会返回一个这个函数的实例化对象，. 然后，就可以在这个对象上面添加一些属性．[JavaScript 对象入门](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects)\n\n舉例：\n- 用new func()來建構新的物件，func內部this可以指項新屬性\n- 透過建構子（constructor）所建立出來的物件，我們稱為實例（instance）\n- 如果忘記打new，變數會出現undifined\n```javascript\n//this 指向了代码所在的对象(其实代码运行时所在的对象)。\nfunction Pet(first,last, age) {\n  this.name= {\n    'first': first,\n    'last': last\n  };\n  this.interests = ['food', 'sleep'],\n  this.age = age;\n  this.walk = function () {\n    console.log(this.name.first + \" walk...\");\n  } //這樣寫會佔用不同的對象空間\n}\n\n//函数的实例化对象\nvar cat1 = new Pet('dotdot','wu', 11);\nvar dog1 = new Pet('lucky','wu', 9);\n\n//通过简单的语法访问他们\nconsole.log(cat1.name.first)//点表示法访问\nconsole.log(cat1['name']['first']) //括号表示法\nconsole.log(cat1.interests[1])//数组属性的一个子元素\nconsole.log(cat1.walk())//对象的方法调用\n\n```\n\nref:[[筆記] 談談 JavaScript 中的 function constructor 和關鍵字 new](https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html)\n\n### Prototype 原型鏈的原理\n上述的寫法，cat1.walk()與dog1.walk()是兩個不同對象的方法，為解決這問題．\n- walk指定在 Pet.prototype 上面，所有 Pet 的 instance 都可以共享這個方法\n```javascript\nPet.prototype.walk = function() {\n  console.log(this.name.first + \" walk...\");\n}\n```\n\n- 因為 cat1 這個 instance 本身並沒有 walk 這個 function， 找不到，它會試著從Pet.prototype去找，一直往上找，直到找到Object，如果還是沒有，就會回傳undefined\n- 而這個連接的方式，就是__proto__。\n- 同时也有一些其他成员—— watch、valueOf 等等——这些成员定义在 Person() 构造器的原型对象、即 Object 。\n\n\nref:[該來理解 JavaScript 的原型鍊了](https://blog.techbridge.cc/2017/04/22/javascript-prototype/)\n<br>[ __proto__ 和 prototype 到底有什麼區別](https://kknews.cc/code/6agvk2v.html)\n\n\n\n#### JavaScript 中的繼承 (prototypal inheritance)\n\n- call()函数。基本上，这个函数允许您调用一个在这个文件里别处定义的函数。\n- 设置 Teacher() 的原型和构造器引用\n  - create()这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法\n  - prototype的constructor属性指向的是Person(),要改指向 Teacher\n- 可重寫Teacher的greeting\n```\n//定义 Teacher() 构造器函数\n  function Teacher(first, last, age, gender, interests, subject) {\n    Person.call(this, first, last, age, gender, interests);\n\n    this.subject = subject;\n  }\n  //这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法\n  Teacher.prototype = Object.create(Person.prototype);\n  Teacher.prototype.constructor = Teacher;//原本的是指向Ｐerson\n  Teacher.prototype.greeting = function () {//重開改寫\n    var prefix;\n\n    if (this.gender === 'male' || this.gender === 'Male' || this.gender === 'm' || this.gender === 'M') {\n      prefix = 'Mr.';\n    } else if (this.gender === 'female' || this.gender === 'Female' || this.gender === 'f' || this.gender === 'F') {\n      prefix = 'Mrs.';\n    } else {\n      prefix = 'Mx.';\n    }\n\n    alert('Hello. My name is ' + prefix + ' ' + this.name.last + ', and I teach ' + this.subject + '.');\n  };\n  var teacher1 = new Teacher('Dave', 'Griffiths', 31, 'male', ['football', 'cookery'], 'mathematics');\n\n  teacher1.greeting()\n\n```\n\nref:[JavaScript 中的继承](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance) 探討何時使用與參考網站練習\n\n\nTBD:\nhttps://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\n\n\n### >label info@ES6%}  類別 (class) \nECMAScript 6 中引入了類別 (class) 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖。類別語法並不是要引入新的物件導向繼承模型到 JavaScript 中，而是提供一個更簡潔的語法來建立物件和處理繼承。\n\nref:[Classes](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes)\n\n#### 類別宣告 (class declaration)\n- 使用關鍵字 class\n```\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n var p = new Polygon(); \n```\n- 相較函數宣告有Hoisting，類別宣告則否。 你需要先宣告類別，然後存取它，否則就會丟出 ReferenceError:\n>note danger %}  var p = new Polygon(); // ReferenceError\nclass Polygon {} \n\n#### 類別敘述(class expressions)\n- 類別敘述是定義類別的另一種方法。類別敘述可以有名稱或是無名稱。賦予一個有名稱類別敘述的名稱只在類別主體(class's body)中有作用。（✍ 其實跟之前提到的Function Expressions一樣概念）\n```\n// unnamed\nvar Polygon = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// named\nvar Polygon = class Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n```\n\n---\n### 使用JSON\n- JSON要求在字符串和属性用雙引號， 但引號無效。\n- 我们使用 . 或 [] 訪問对象内的数据\n- JSON.parse\n用於將文字轉成json object\n```js\nrequest.responseType = 'text';\nvar superHeroes = JSON.parse(superHeroesText); \n```\n- JSON.stringify\n用於將json object轉成json string\n```js\nvar myJSON = { \"name\": \"Chris\", \"age\": \"38\" }; console.log(myJSON)\nvar myString = JSON.stringify(myJSON);\nconsole.log(myString)//string:{\"name\":\"Chris\",\"age\":\"38\"}\n```\n\n\n\n## 事件(Event)\n- 好得寫法是找到(select)button並添加事件，避免汙染HTML。\n- 關於button.onclick vs addEventListener\n  - on會覆蓋上一个事件\n  - addEventListener事件，可以多次绑定同一个事件并且不会覆盖上一个事件\n\nref:[JS裡addEventListener和on的區別](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/42343/)\n\n\n\n## 延伸：Lint 工具\n在電腦科學中，lint是一種工具程式的名稱，它用來標記原始碼中，某些可疑的、不具結構性（可能造成bug）的段落。它是一種靜態程式分析工具\n\n### JSLint\nJSLint 幫你檢查未定義的變數、函數、陳述式結尾有沒有加分號(;)、變數使用之前要先用 var 宣告、使用非數字的變數要用 === 或 !== 讓比對的時候不要自動進行轉型(Casting)、盡量不要使用 eval 函數、... 好多好多\n\n### ESLint\n包括格式檢驗及質量效驗（未使用變量、三等號、全局變量聲明等問题）\n自由選擇要使用哪些規則，對 >label info@ES6%}  還有 JSX 的支援度跟其他 linter 相較之下也是最高的\n\n註： prettier 只是格式的檢驗（空格 格式化），不会對代码质量进行校验。但有些檢驗，ESLint沒有，所以可以ESLint＋prettier一起使用，也可以視使用情況不使用 Prettier。\n\n## 其他練習\n\n## 上述概念練習\n[simple_js_demo](https://github.com/minilabmemo/simple_js_demo)\n\n\n## JS 與 canvas 元素 \n\n\n### 基礎繪製說明\nCanvas 是H5新出來的標籤\n- 元素需要有闭合标签\n- 基本上現今所有主流的瀏覽器都有支援\n- 所有元素定位皆相對於此左上角原點\n<br>\n\n- HTML\n```\n<canvas id=\"canvas\" width=\"300\" height=\"300\">\n</canvas>\n\n```\n- JS\n- 圓形ctx.arc(x, y, 半徑, 開始弧度, 結束弧度 )\n0~2 pi =360°\n更多弧度示意圖：[弧度](https://zh.wikipedia.org/wiki/%E5%BC%A7%E5%BA%A6)\n\n```\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext('2d');\nctx.fillStyle = 'green';\nctx.fillRect(10, 10, 100, 100);//畫矩形 x start,y start,width,height\n```\n利用漸變色及貝斯曲線或是填入圖案，繪製文字，可做出很多豐富的圖案，還有動畫行星/時鐘，滑鼠動畫，像素控制等，詳請見下方文件\n\nref:[Canvas 教學文件](https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial)\n\n### 彈跳彩球範例\nＲef: [物件建構實作](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice)\n\n\n### 破撞說明\n```\nhttps://developer.mozilla.org/zh-CN/docs/Games/Techniques/2D_collision_detection\nvar circle1 = {radius: 20, x: 5, y: 5};//radius半徑及座標\nvar circle2 = {radius: 12, x: 10, y: 5};\n\nvar dx = circle1.x - circle2.x;\nvar dy = circle1.y - circle2.y;\nvar distance = Math.sqrt(dx * dx + dy * dy);//平面兩點之間距離公式\n\nif (distance < circle1.radius + circle2.radius) { //原形半徑相加=兩圓碰撞時的距離\n    // collision detected!\n}\n```\n\n### 動畫操控範例說明\nhttps://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n### 排程更新\n第一種作法是利用window.setInterval()與window.setTimeout()方法。\n\nNote: 針對新版瀏覽器建議採用window.requestAnimationFrame()方法。方法為動畫提供更順暢更有效率的方式來執行,當系統準備好繪製畫面時,藉由呼叫動畫andmation frame()的callback函數。\n\n[requestanimationframe-with-react](\nhttps://www.pluralsight.com/guides/how-to-use-requestanimationframe-with-react)\n[深入理解requestAnimationFrame的動畫迴圈](\nhttps://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/260087/)\n[Web 計時與動畫 ](https://www.dazhuanlan.com/2019/12/25/5e024ca3eeb4d/)\n[[javascript] requestAnimationFrame 優化動畫效率與資源](https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/)\n\n\n### Event操控範例說明\nhttps://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\n這邊的話可以看到，Event滑鼠控制只能針對整個畫布做操作，每次更新都是更新畫布，內容物件是不存在的。\n\n延伸:[Canvas和SVG](https://www.itread01.com/content/1544856246.html)\nCanvas是點陣圖，受解析度影響，SVG是向量圖。\n使用svg有好有壞:\n好處是方便操作dom元素, 可操作元素。\n壞處是渲染效率不高, 在數據量較大時頁面易掉幀, 卡頓，不適合遊戲。\n\n### D3 操控SVG或是Canvas\nhttp://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\n\n","source":"_posts/js-start-01.md","raw":"---\ntitle: \"[JS 01] javascript 新手上路與概念筆記\"\ntags:\n  - javascript\n  - ES6\n  - 閉包\n  - 解構賦值\ncategories:\n  - Tech.\n  - Web\n  - front-end\n  - js\ndate: 2021-02-20 11:33:18\n---\n\n>本章由[MDN-JavaScript](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript)開始著手練習，並筆記學習概念．  \n\n\n<!--more-->\n\n## JS歷史- ES6 2015\nECMAScript是一種由Ecma國際定義的手稿語言規範，它往往被稱為JavaScript或JScript (維基)\n- ES6為ECMAScript2015，是大幅度的更新，討論度較高，\n\n---\n## 宣告與各用法概念\n\n### 命名規則\n- 小寫駱駝\n- 大小寫相異(敏感)\n- 有意義的名字\n\nref:[关于变量命名的规则](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99)\n\n### 變數\n- 宣告變數但不賦值=undefined\n- null常見於宣告後面定義成沒有值或找不到\n- 全域屬性 NaN 表示「非數值」（Not-A-Number）的數值\n  - NaN 不等於（==、!=、===、!==）任何值，包括 NaN 本身。請使用 Number.isNaN() 或 isNaN() 來確認某個數值是否為 NaN。\n\nref:\n[var 与 let 的区别](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_%E4%B8%8E_let_%E7%9A%84%E5%8C%BA%E5%88%AB) | [let](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let) | [NaN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN)\n\n\n\n---\n### 操作\n\n#### 比對\n#####  嚴格相等（===）\n先比較型別\n##### 一般相等（==）\n一般相等會先將比較值轉換成同型別後比較。轉換後（可能一個或兩個都被轉換），接著進行的幾乎和嚴格比較（===）一樣。\n```js\nconsole.log(123 === \"123\"); false\nconsole.log(false === 0);false\nconsole.log(false == 0);true\nconsole.log(123 == \"123\");true\n```\n- 部分開發者認為最好別用一般相等。嚴格比較更容易預測，且因為不必轉型，因此效率更好。\n\n##### 同值相等\n>label info@ES6%}  提出同值相等演算法，用來解決這個問題。Object.is就是部署這個演算法的新方法。同值相等解決了最後一個情況：比較兩個值是否功能相同 。\nObject.is 會和嚴格相等做同樣的事，但會將 NaN、-0 和 +0 獨立處理，因此這三個不會相等\n\n\n##### 零值相等\n和同值相等一樣，但將 +0 和 -0 視為相同。\n```js\nconsole.log(-0 == +0); true\nconsole.log(-0 === +0); true\n```\n\n- 更多比較表可以看 [Equality_comparisons_and_sameness](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness)\n- 陣列比較more [如何在 JavaScript 中比較兩個陣列](https://www.delftstack.com/zh-tw/howto/javascript/compare-two-arrays-javascript/)\n\n#### 二元邏輯運算子\nJavaScript 中的真假值在判斷會自動作轉型，像是 null、NaN、0、空字串（\"\"、''）、undefined 都會被轉型並判斷為「false」。\n- &&\na= 條件式 ＆＆“”\n```js\na5 = 'Cat' && 'Dog'      // t && t returns \"Dog\"\na6 = false && 'Cat'      // f && t returns false\n```\n- ||\n```js\nconst a = 0 || 'hidden';           \n// 因為 0 被轉型後為 false，所以 a 會是 'hidden'\n\nconst b = 26900 || 24900;          \n// 因為 26900 會轉型為 true，所以 b 會是 26900\n\n```\n\n#### >label info@ES6%} - 展開語法（spread syntax）& 其餘語法（rest syntax）\n展開運算子(...) 允許可迭代的陣列或字串展開成０到多個參數\n\n\n#### 字符操作\n- 一個字符串和一個数字可以直接相加變成字串\n- 把字串當作對象，或許長度或大小寫轉換去處理字符串\n```js\n<script>\n    let s = 19 + '67';\n    console.log(\"s:\"+s+\" type:\"+typeof s);\n    //鍵入s.可以找到很多以字符為對象的操作\n</script>\ns:1967 type:string\n```\n\n\n#### Number()\n对象将把传递给它的任何东西转换成一个数字\n```js\nlet myString = '123';\nlet myNum = Number(myString);\ntypeof myNum;\n```\n#### toString()\n每个数字都有一个名为 toString() 的方法，它将把它转换成等价的字符串。\n\nref:[JavaScript中的字符串](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings)\n\n\n#### [樣板字面值](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals)\n>label info@ES6%} 樣板字面值（Template literals）是允許嵌入運算式的字串字面值（string literals）。\n- 被反引號（back-tick，重音符號` ` )字元封閉，代替了雙或單引號。\n- 可以包含由錢字元及花括號所構成（${expression}）的佔位符（placeholders）\n```js\n`string text line 1\n string text line 2`\n\n`string text ${expression} string text`\n\ntag `string text ${expression} string text`\n\n```\n\n- 標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過>label warning@自訂命名標籤函數 %}操作樣板字面值的輸出。\n- 巢狀的樣板字面值的應用[Javascript 進階 10-3 巢狀結構](https://ithelp.ithome.com.tw/articles/10231520)\n\n#### 物件屬性名稱縮寫（Shorthand property names）\n- Key 與 Value 名稱相同，可進行縮寫\n- 物件內可直接省略 function 關鍵字進行縮寫\n\n#### >label info@ES6%}  - 解構賦值 Destructuring assignment\n可以把陣列或物件中的資料解開擷取成為獨立變數\n詳細請見:[MDN-解構賦值](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)\n\n```js\nconst o = {p: 42, q: true};\nconst {p, q} = o;\n\nconsole.log(p); // 42\nconsole.log(q); // true\n\n///\nconst o = {p: 42, q: true};\nconst {p: foo, q: bar} = o;\n\nconsole.log(foo); // 42\nconsole.log(bar); // true\n  ```\n\n\n\n\n\n---\n\n### 函式宣告\n  - 可用函式宣告（Function Declaration）（ES5）\n  - 函式運算式(表達式)（Function Expressions）（ES5）\n    - 宣告一個函數，或匿名函數 (anonymous function / function literal) 當作值指定給一個變數\n  - 箭頭函式運算式（arrow function expression）（>label success@ES6 %}）\n    - 它沒有自己的 this、arguments、super、new.target 等語法。\n\n\nfunction 建構子說明\n- JavaScript 使用稱為建構子函式（constructor function）的特殊函式，定義物件與功能。\n```JavaScript\n// 自己的一些東西\nfunction Person(first, last, age, gender, interests) {\n  this.name = {\n    first,\n    last\n  };\n  this.age = age;\n  this.gender = gender;\n  this.interests = interests;\n  this.bio = function() {\n    alert(this.name.first + ' ' + this.name.last + ' is ' + this.age + ' years old. He likes ' + this.interests[0] + ' and ' + this.interests[1] + '.');\n  };\n  this.greeting = function() {\n    alert('Hi! I\\'m ' + this.name.first + '.');\n  };\n};\nvar person1 = new Person('Bob', 'Smith', 32, 'male', ['music', 'skiing']);\n\n```\nRef:[初學者應知道的物件導向 JavaScript](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_JS)\n- 箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。\n- 沒有 arguments \"引數\"參數,當需要使用 arguments 請維持使用 function。[->參數引數的概念請先知道]\n- 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) => { return 表示式; }\n```JavaScript\n  //箭頭 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) => { return 表示式; }\n  const Pet_Arr = (color) => {\n    this.color = color;\n  }\n  // ini_constructor_proto.html:99 Uncaught TypeError: Pet_Arr is not a constructor\n  //箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。\n  const PetA = new Pet_Arr('yellow'); //\n```\nRef: [箭頭函式 MDN](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions)\n\n#### 宣告練習\n使用及細節可以看下方\n```JavaScript (js_func.html)\n    <script>\n        // ES5 函式宣告（Function Declaration）\n        //function 函式名稱(參數) {\n        function Add(A, B) {\n            return A + B;\n        }\n        /* 或 */\n        // ES5  函式運算式(表達式)（Function Expressions）\n        // var 函式名稱 = function (參數) {\n        var Add2 = function (A, B) {//匿名函式\n            return A + B;\n        }\n        var Add3 = function add3(A, B) {//#1 非匿名函式\n            console.log(typeof add3);//#1 但只在自身有效\n            return A + B;\n        }\n        console.log(Add(1, 2))//3\n        console.log(Add2(1, 2))//3\n        console.log(Add3(1, 2))//3\n        //console.log(add3(1, 2))//#1 ReferenceError: add3 is not defined\n\n\n        //ES6 宣告型態 函式名稱 = (參數) => {\n        var Add4 = (A, B) => {\n            return A + B;\n        }\n        //縮寫 如果只有return 可以去掉{}與return\n        var Add5 = (A, B) => A + B;\n\n         //縮寫 如果只有一個參數 可以去掉（）\n        var AddS1 = (A) => A;\n        var AddS2 = A => A;\n\n        console.log(\"ES6:\" + Add4(1, 2))//3\n        console.log(\"ES6:\" + Add5(1, 2))//3\n    </script>\n```\n#### this的問題與箭頭函數的出現\n箭頭函式有兩個重要的特性：更短的函式寫法與 this 變數的非綁定。\n\n- 使用及細節可以看下方\n```JavaScript (js_func_this.html)\n    <script>\n        //ES5 函示內this會指向windows而非Person，因此要像PersonSolve寫法\n        function Person() {\n            // Person() 建構式將 this 定義為它自己的一個實體\n            this.age = 0;\n            console.log(\"Person():\" + this.constructor.name);\n            setTimeout(function growUp() {\n                // 在非嚴格模式下, growUp() 函式把 this 定義為全域物件\n                // (因為那是 growUp()執行的所在)，\n                // 與 Person() 建構式所定義的 this 有所不同\n                this.age++;\n                console.log(\"Person.setTimeout():\" + this.constructor.name);\n                console.log(\"Person.setTimeout():\" + this.age)\n            }, 1000);\n        }\n        function PersonSolve() {\n            var self = this; // 有些人喜歡 `that` 而不是 `self`.\n            // 選好一種取法後始終如一\n            self.age = 0;\n            console.log(\"PersonSolve():\" + this.constructor.name);\n            setTimeout(function growUp() {\n                // 這個 callback 參考 `self` 變數，為預期中的物件。\n                self.age++;\n                console.log(\"PersonSolve.setTimeout():\" + self.constructor.name);\n                console.log(\"PersonSolve.setTimeout():\" + self.age)\n\n            }, 1000);\n        }\n        var p1 = new Person();\n        var p2 = new PersonSolve();\n        //---------\n\n        //ES6 箭頭函示------------------------------\n        function Person_Arr() {\n            this.age = 0;\n            console.log(\"Person_Arr():\" + this.constructor.name);\n            setTimeout(() => {\n                this.age++; // |this| 適切的參考了Person建構式所建立的物件\n                console.log(\"Person_Arr.setTimeout():\" + this.constructor.name);\n                console.log(\"Person_Arr.setTimeout():\" + this.age)\n            }, 1000);\n        }\n\n        var p3 = new Person_Arr();\n        //ES6 箭頭函示------------------------------\n\n       // OUTPUT\n        // js_func_this.html: 17 Person(): Person\n        // js_func_this.html: 31 PersonSolve(): PersonSolve\n        // js_func_this.html: 47 Person_Arr(): Person_Arr\n\n        // js_func_this.html: 23 Person.setTimeout(): Window -->發現竟然指向Window\n        // js_func_this.html: 24 Person.setTimeout(): NaN  -->內容不見！！\n        // js_func_this.html: 35 PersonSolve.setTimeout(): PersonSolve  -->workaround解法\n        // js_func_this.html: 36 PersonSolve.setTimeout(): 1\n        // js_func_this.html: 50 Person_Arr.setTimeout(): Person_Arr -->ES6 arrow解法\n        // js_func_this.html: 51 Person_Arr.setTimeout(): 1\n    </script>\n```\n\n- 箭頭函式並沒有原型（prototype）屬性。\nmore ref: [this不分家](https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6)\n\nＴＢＤ\nno this new\nhttps://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\n\n### JS的 Hoisting (提升)顶置特性\n- 變數(var hoisting)與函數都可以先使用再宣告\n- 但提升操作不再适用于 let 并引起一个错误(Uncaught ReferenceError)\n ref:[JavaScript Hoisting (提升)](https://shubo.io/javascript-hoisting/#javascript-hoisting-%E6%8F%90%E5%8D%87)\n\n\n### >label info@ES6%}  - 使用module分檔 (import & export)\n\n### 閉包（Closure）\n閉包是函式以及該函式被宣告時所在的作用域環境的組合。\n- 閉包的好處能把變數隱藏在裡面讓外部存取不到\n- 閉包在 callback 上的應用尤其常見\n- 在迴圈建立閉包：一個常見錯誤\n在 ECMAScript 2015 (>label info@ES6%} )導入 let 前，迴圈內建立的閉包，常會發生問題。\n範例請見： [simple_js_demo-closure](https://github.com/minilabmemo/simple_js_demo/blob/master/04_js_closure/closure.html)\n\nRef:\n- [MDN-閉包](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures)\n- [你懂 JavaScript 嗎？#15 閉包（Closure）]（https://cythilya.github.io/2018/10/22/closure/）\n\n\n\n\n\n## 探討：JavaScript OOP\nOOP （(Object-oriented programming）物件導向/對象編程，在 JavaScript 中，大多数事物都是对象, 从作为核心功能的字符串和数组。你甚至可以自己创建对象，在调用函数前加一个 new ，它就会返回一个这个函数的实例化对象，. 然后，就可以在这个对象上面添加一些属性．[JavaScript 对象入门](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects)\n\n舉例：\n- 用new func()來建構新的物件，func內部this可以指項新屬性\n- 透過建構子（constructor）所建立出來的物件，我們稱為實例（instance）\n- 如果忘記打new，變數會出現undifined\n```javascript\n//this 指向了代码所在的对象(其实代码运行时所在的对象)。\nfunction Pet(first,last, age) {\n  this.name= {\n    'first': first,\n    'last': last\n  };\n  this.interests = ['food', 'sleep'],\n  this.age = age;\n  this.walk = function () {\n    console.log(this.name.first + \" walk...\");\n  } //這樣寫會佔用不同的對象空間\n}\n\n//函数的实例化对象\nvar cat1 = new Pet('dotdot','wu', 11);\nvar dog1 = new Pet('lucky','wu', 9);\n\n//通过简单的语法访问他们\nconsole.log(cat1.name.first)//点表示法访问\nconsole.log(cat1['name']['first']) //括号表示法\nconsole.log(cat1.interests[1])//数组属性的一个子元素\nconsole.log(cat1.walk())//对象的方法调用\n\n```\n\nref:[[筆記] 談談 JavaScript 中的 function constructor 和關鍵字 new](https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html)\n\n### Prototype 原型鏈的原理\n上述的寫法，cat1.walk()與dog1.walk()是兩個不同對象的方法，為解決這問題．\n- walk指定在 Pet.prototype 上面，所有 Pet 的 instance 都可以共享這個方法\n```javascript\nPet.prototype.walk = function() {\n  console.log(this.name.first + \" walk...\");\n}\n```\n\n- 因為 cat1 這個 instance 本身並沒有 walk 這個 function， 找不到，它會試著從Pet.prototype去找，一直往上找，直到找到Object，如果還是沒有，就會回傳undefined\n- 而這個連接的方式，就是__proto__。\n- 同时也有一些其他成员—— watch、valueOf 等等——这些成员定义在 Person() 构造器的原型对象、即 Object 。\n\n\nref:[該來理解 JavaScript 的原型鍊了](https://blog.techbridge.cc/2017/04/22/javascript-prototype/)\n<br>[ __proto__ 和 prototype 到底有什麼區別](https://kknews.cc/code/6agvk2v.html)\n\n\n\n#### JavaScript 中的繼承 (prototypal inheritance)\n\n- call()函数。基本上，这个函数允许您调用一个在这个文件里别处定义的函数。\n- 设置 Teacher() 的原型和构造器引用\n  - create()这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法\n  - prototype的constructor属性指向的是Person(),要改指向 Teacher\n- 可重寫Teacher的greeting\n```\n//定义 Teacher() 构造器函数\n  function Teacher(first, last, age, gender, interests, subject) {\n    Person.call(this, first, last, age, gender, interests);\n\n    this.subject = subject;\n  }\n  //这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法\n  Teacher.prototype = Object.create(Person.prototype);\n  Teacher.prototype.constructor = Teacher;//原本的是指向Ｐerson\n  Teacher.prototype.greeting = function () {//重開改寫\n    var prefix;\n\n    if (this.gender === 'male' || this.gender === 'Male' || this.gender === 'm' || this.gender === 'M') {\n      prefix = 'Mr.';\n    } else if (this.gender === 'female' || this.gender === 'Female' || this.gender === 'f' || this.gender === 'F') {\n      prefix = 'Mrs.';\n    } else {\n      prefix = 'Mx.';\n    }\n\n    alert('Hello. My name is ' + prefix + ' ' + this.name.last + ', and I teach ' + this.subject + '.');\n  };\n  var teacher1 = new Teacher('Dave', 'Griffiths', 31, 'male', ['football', 'cookery'], 'mathematics');\n\n  teacher1.greeting()\n\n```\n\nref:[JavaScript 中的继承](https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance) 探討何時使用與參考網站練習\n\n\nTBD:\nhttps://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\n\n\n### >label info@ES6%}  類別 (class) \nECMAScript 6 中引入了類別 (class) 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖。類別語法並不是要引入新的物件導向繼承模型到 JavaScript 中，而是提供一個更簡潔的語法來建立物件和處理繼承。\n\nref:[Classes](https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes)\n\n#### 類別宣告 (class declaration)\n- 使用關鍵字 class\n```\nclass Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n}\n var p = new Polygon(); \n```\n- 相較函數宣告有Hoisting，類別宣告則否。 你需要先宣告類別，然後存取它，否則就會丟出 ReferenceError:\n>note danger %}  var p = new Polygon(); // ReferenceError\nclass Polygon {} \n\n#### 類別敘述(class expressions)\n- 類別敘述是定義類別的另一種方法。類別敘述可以有名稱或是無名稱。賦予一個有名稱類別敘述的名稱只在類別主體(class's body)中有作用。（✍ 其實跟之前提到的Function Expressions一樣概念）\n```\n// unnamed\nvar Polygon = class {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n\n// named\nvar Polygon = class Polygon {\n  constructor(height, width) {\n    this.height = height;\n    this.width = width;\n  }\n};\n```\n\n---\n### 使用JSON\n- JSON要求在字符串和属性用雙引號， 但引號無效。\n- 我们使用 . 或 [] 訪問对象内的数据\n- JSON.parse\n用於將文字轉成json object\n```js\nrequest.responseType = 'text';\nvar superHeroes = JSON.parse(superHeroesText); \n```\n- JSON.stringify\n用於將json object轉成json string\n```js\nvar myJSON = { \"name\": \"Chris\", \"age\": \"38\" }; console.log(myJSON)\nvar myString = JSON.stringify(myJSON);\nconsole.log(myString)//string:{\"name\":\"Chris\",\"age\":\"38\"}\n```\n\n\n\n## 事件(Event)\n- 好得寫法是找到(select)button並添加事件，避免汙染HTML。\n- 關於button.onclick vs addEventListener\n  - on會覆蓋上一个事件\n  - addEventListener事件，可以多次绑定同一个事件并且不会覆盖上一个事件\n\nref:[JS裡addEventListener和on的區別](https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/42343/)\n\n\n\n## 延伸：Lint 工具\n在電腦科學中，lint是一種工具程式的名稱，它用來標記原始碼中，某些可疑的、不具結構性（可能造成bug）的段落。它是一種靜態程式分析工具\n\n### JSLint\nJSLint 幫你檢查未定義的變數、函數、陳述式結尾有沒有加分號(;)、變數使用之前要先用 var 宣告、使用非數字的變數要用 === 或 !== 讓比對的時候不要自動進行轉型(Casting)、盡量不要使用 eval 函數、... 好多好多\n\n### ESLint\n包括格式檢驗及質量效驗（未使用變量、三等號、全局變量聲明等問题）\n自由選擇要使用哪些規則，對 >label info@ES6%}  還有 JSX 的支援度跟其他 linter 相較之下也是最高的\n\n註： prettier 只是格式的檢驗（空格 格式化），不会對代码质量进行校验。但有些檢驗，ESLint沒有，所以可以ESLint＋prettier一起使用，也可以視使用情況不使用 Prettier。\n\n## 其他練習\n\n## 上述概念練習\n[simple_js_demo](https://github.com/minilabmemo/simple_js_demo)\n\n\n## JS 與 canvas 元素 \n\n\n### 基礎繪製說明\nCanvas 是H5新出來的標籤\n- 元素需要有闭合标签\n- 基本上現今所有主流的瀏覽器都有支援\n- 所有元素定位皆相對於此左上角原點\n<br>\n\n- HTML\n```\n<canvas id=\"canvas\" width=\"300\" height=\"300\">\n</canvas>\n\n```\n- JS\n- 圓形ctx.arc(x, y, 半徑, 開始弧度, 結束弧度 )\n0~2 pi =360°\n更多弧度示意圖：[弧度](https://zh.wikipedia.org/wiki/%E5%BC%A7%E5%BA%A6)\n\n```\nvar canvas = document.getElementById('canvas');\nvar ctx = canvas.getContext('2d');\nctx.fillStyle = 'green';\nctx.fillRect(10, 10, 100, 100);//畫矩形 x start,y start,width,height\n```\n利用漸變色及貝斯曲線或是填入圖案，繪製文字，可做出很多豐富的圖案，還有動畫行星/時鐘，滑鼠動畫，像素控制等，詳請見下方文件\n\nref:[Canvas 教學文件](https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial)\n\n### 彈跳彩球範例\nＲef: [物件建構實作](https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice)\n\n\n### 破撞說明\n```\nhttps://developer.mozilla.org/zh-CN/docs/Games/Techniques/2D_collision_detection\nvar circle1 = {radius: 20, x: 5, y: 5};//radius半徑及座標\nvar circle2 = {radius: 12, x: 10, y: 5};\n\nvar dx = circle1.x - circle2.x;\nvar dy = circle1.y - circle2.y;\nvar distance = Math.sqrt(dx * dx + dy * dy);//平面兩點之間距離公式\n\nif (distance < circle1.radius + circle2.radius) { //原形半徑相加=兩圓碰撞時的距離\n    // collision detected!\n}\n```\n\n### 動畫操控範例說明\nhttps://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations\n### 排程更新\n第一種作法是利用window.setInterval()與window.setTimeout()方法。\n\nNote: 針對新版瀏覽器建議採用window.requestAnimationFrame()方法。方法為動畫提供更順暢更有效率的方式來執行,當系統準備好繪製畫面時,藉由呼叫動畫andmation frame()的callback函數。\n\n[requestanimationframe-with-react](\nhttps://www.pluralsight.com/guides/how-to-use-requestanimationframe-with-react)\n[深入理解requestAnimationFrame的動畫迴圈](\nhttps://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/260087/)\n[Web 計時與動畫 ](https://www.dazhuanlan.com/2019/12/25/5e024ca3eeb4d/)\n[[javascript] requestAnimationFrame 優化動畫效率與資源](https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/)\n\n\n### Event操控範例說明\nhttps://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\n這邊的話可以看到，Event滑鼠控制只能針對整個畫布做操作，每次更新都是更新畫布，內容物件是不存在的。\n\n延伸:[Canvas和SVG](https://www.itread01.com/content/1544856246.html)\nCanvas是點陣圖，受解析度影響，SVG是向量圖。\n使用svg有好有壞:\n好處是方便操作dom元素, 可操作元素。\n壞處是渲染效率不高, 在數據量較大時頁面易掉幀, 卡頓，不適合遊戲。\n\n### D3 操控SVG或是Canvas\nhttp://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\n\n","slug":"js-start-01","published":1,"updated":"2023-01-22T07:05:18.835Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cld71fhdl00cxkp2x9riyekqg","content":"<blockquote>\n<p>本章由<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript\">MDN-JavaScript</a>開始著手練習，並筆記學習概念．  </p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"JS歷史-ES6-2015\"><a href=\"#JS歷史-ES6-2015\" class=\"headerlink\" title=\"JS歷史- ES6 2015\"></a>JS歷史- ES6 2015</h2><p>ECMAScript是一種由Ecma國際定義的手稿語言規範，它往往被稱為JavaScript或JScript (維基)</p>\n<ul>\n<li>ES6為ECMAScript2015，是大幅度的更新，討論度較高，</li>\n</ul>\n<hr>\n<h2 id=\"宣告與各用法概念\"><a href=\"#宣告與各用法概念\" class=\"headerlink\" title=\"宣告與各用法概念\"></a>宣告與各用法概念</h2><h3 id=\"命名規則\"><a href=\"#命名規則\" class=\"headerlink\" title=\"命名規則\"></a>命名規則</h3><ul>\n<li>小寫駱駝</li>\n<li>大小寫相異(敏感)</li>\n<li>有意義的名字</li>\n</ul>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99\">关于变量命名的规则</a></p>\n<h3 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h3><ul>\n<li>宣告變數但不賦值=undefined</li>\n<li>null常見於宣告後面定義成沒有值或找不到</li>\n<li>全域屬性 NaN 表示「非數值」（Not-A-Number）的數值<ul>\n<li>NaN 不等於（==、!=、===、!==）任何值，包括 NaN 本身。請使用 Number.isNaN() 或 isNaN() 來確認某個數值是否為 NaN。</li>\n</ul>\n</li>\n</ul>\n<p>ref:<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_%E4%B8%8E_let_%E7%9A%84%E5%8C%BA%E5%88%AB\">var 与 let 的区别</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a> | <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></p>\n<hr>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><h4 id=\"比對\"><a href=\"#比對\" class=\"headerlink\" title=\"比對\"></a>比對</h4><h5 id=\"嚴格相等（-）\"><a href=\"#嚴格相等（-）\" class=\"headerlink\" title=\"嚴格相等（===）\"></a>嚴格相等（===）</h5><p>先比較型別</p>\n<h5 id=\"一般相等（-）\"><a href=\"#一般相等（-）\" class=\"headerlink\" title=\"一般相等（==）\"></a>一般相等（==）</h5><p>一般相等會先將比較值轉換成同型別後比較。轉換後（可能一個或兩個都被轉換），接著進行的幾乎和嚴格比較（===）一樣。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> === <span class=\"string\">&quot;123&quot;</span>); <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> === <span class=\"number\">0</span>);<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> == <span class=\"number\">0</span>);<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> == <span class=\"string\">&quot;123&quot;</span>);<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>部分開發者認為最好別用一般相等。嚴格比較更容易預測，且因為不必轉型，因此效率更好。</li>\n</ul>\n<h5 id=\"同值相等\"><a href=\"#同值相等\" class=\"headerlink\" title=\"同值相等\"></a>同值相等</h5><blockquote>\n<p>label info@ES6%}  提出同值相等演算法，用來解決這個問題。Object.is就是部署這個演算法的新方法。同值相等解決了最後一個情況：比較兩個值是否功能相同 。<br>Object.is 會和嚴格相等做同樣的事，但會將 NaN、-0 和 +0 獨立處理，因此這三個不會相等</p>\n</blockquote>\n<h5 id=\"零值相等\"><a href=\"#零值相等\" class=\"headerlink\" title=\"零值相等\"></a>零值相等</h5><p>和同值相等一樣，但將 +0 和 -0 視為相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(-<span class=\"number\">0</span> == +<span class=\"number\">0</span>); <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(-<span class=\"number\">0</span> === +<span class=\"number\">0</span>); <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更多比較表可以看 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality_comparisons_and_sameness</a></li>\n<li>陣列比較more <a href=\"https://www.delftstack.com/zh-tw/howto/javascript/compare-two-arrays-javascript/\">如何在 JavaScript 中比較兩個陣列</a></li>\n</ul>\n<h4 id=\"二元邏輯運算子\"><a href=\"#二元邏輯運算子\" class=\"headerlink\" title=\"二元邏輯運算子\"></a>二元邏輯運算子</h4><p>JavaScript 中的真假值在判斷會自動作轉型，像是 null、NaN、0、空字串（””、’’）、undefined 都會被轉型並判斷為「false」。</p>\n<ul>\n<li>&amp;&amp;<br>a= 條件式 ＆＆“”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a5 = <span class=\"string\">&#x27;Cat&#x27;</span> &amp;&amp; <span class=\"string\">&#x27;Dog&#x27;</span>      <span class=\"comment\">// t &amp;&amp; t returns &quot;Dog&quot;</span></span><br><span class=\"line\">a6 = <span class=\"literal\">false</span> &amp;&amp; <span class=\"string\">&#x27;Cat&#x27;</span>      <span class=\"comment\">// f &amp;&amp; t returns false</span></span><br></pre></td></tr></table></figure></li>\n<li>||<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">0</span> || <span class=\"string\">&#x27;hidden&#x27;</span>;           </span><br><span class=\"line\"><span class=\"comment\">// 因為 0 被轉型後為 false，所以 a 會是 &#x27;hidden&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">26900</span> || <span class=\"number\">24900</span>;          </span><br><span class=\"line\"><span class=\"comment\">// 因為 26900 會轉型為 true，所以 b 會是 26900</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"gt-label-info-ES6-展開語法（spread-syntax）-amp-其餘語法（rest-syntax）\"><a href=\"#gt-label-info-ES6-展開語法（spread-syntax）-amp-其餘語法（rest-syntax）\" class=\"headerlink\" title=\"&gt;label info@ES6%} - 展開語法（spread syntax）&amp; 其餘語法（rest syntax）\"></a>&gt;label info@ES6%} - 展開語法（spread syntax）&amp; 其餘語法（rest syntax）</h4>展開運算子(…) 允許可迭代的陣列或字串展開成０到多個參數</li>\n</ul>\n<h4 id=\"字符操作\"><a href=\"#字符操作\" class=\"headerlink\" title=\"字符操作\"></a>字符操作</h4><ul>\n<li>一個字符串和一個数字可以直接相加變成字串</li>\n<li>把字串當作對象，或許長度或大小寫轉換去處理字符串<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = <span class=\"number\">19</span> + <span class=\"string\">&#x27;67&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;s:&quot;</span>+s+<span class=\"string\">&quot; type:&quot;</span>+<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\">    <span class=\"comment\">//鍵入s.可以找到很多以字符為對象的操作</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">s:<span class=\"number\">1967</span> type:string</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a>Number()</h4><p>对象将把传递给它的任何东西转换成一个数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myNum = <span class=\"built_in\">Number</span>(myString);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNum;</span><br></pre></td></tr></table></figure>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>每个数字都有一个名为 toString() 的方法，它将把它转换成等价的字符串。</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">JavaScript中的字符串</a></p>\n<h4 id=\"樣板字面值\"><a href=\"#樣板字面值\" class=\"headerlink\" title=\"樣板字面值\"></a><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\">樣板字面值</a></h4><blockquote>\n<p>label info@ES6%} 樣板字面值（Template literals）是允許嵌入運算式的字串字面值（string literals）。</p>\n</blockquote>\n<ul>\n<li>被反引號（back-tick，重音符號<code> </code> )字元封閉，代替了雙或單引號。</li>\n<li>可以包含由錢字元及花括號所構成（${expression}）的佔位符（placeholders）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`string text line 1</span></span><br><span class=\"line\"><span class=\"string\"> string text line 2`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`string text <span class=\"subst\">$&#123;expression&#125;</span> string text`</span></span><br><span class=\"line\"></span><br><span class=\"line\">tag <span class=\"string\">`string text <span class=\"subst\">$&#123;expression&#125;</span> string text`</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過&gt;label warning@自訂命名標籤函數 %}操作樣板字面值的輸出。</li>\n<li>巢狀的樣板字面值的應用<a href=\"https://ithelp.ithome.com.tw/articles/10231520\">Javascript 進階 10-3 巢狀結構</a></li>\n</ul>\n<h4 id=\"物件屬性名稱縮寫（Shorthand-property-names）\"><a href=\"#物件屬性名稱縮寫（Shorthand-property-names）\" class=\"headerlink\" title=\"物件屬性名稱縮寫（Shorthand property names）\"></a>物件屬性名稱縮寫（Shorthand property names）</h4><ul>\n<li>Key 與 Value 名稱相同，可進行縮寫</li>\n<li>物件內可直接省略 function 關鍵字進行縮寫</li>\n</ul>\n<h4 id=\"gt-label-info-ES6-解構賦值-Destructuring-assignment\"><a href=\"#gt-label-info-ES6-解構賦值-Destructuring-assignment\" class=\"headerlink\" title=\"&gt;label info@ES6%}  - 解構賦值 Destructuring assignment\"></a>&gt;label info@ES6%}  - 解構賦值 Destructuring assignment</h4><p>可以把陣列或物件中的資料解開擷取成為獨立變數<br>詳細請見:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">MDN-解構賦值</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;p, q&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<hr>\n<h3 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h3><ul>\n<li>可用函式宣告（Function Declaration）（ES5）</li>\n<li>函式運算式(表達式)（Function Expressions）（ES5）<ul>\n<li>宣告一個函數，或匿名函數 (anonymous function / function literal) 當作值指定給一個變數</li>\n</ul>\n</li>\n<li>箭頭函式運算式（arrow function expression）（&gt;label success@ES6 %}）<ul>\n<li>它沒有自己的 this、arguments、super、new.target 等語法。</li>\n</ul>\n</li>\n</ul>\n<p>function 建構子說明</p>\n<ul>\n<li>JavaScript 使用稱為建構子函式（constructor function）的特殊函式，定義物件與功能。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己的一些東西</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = &#123;</span><br><span class=\"line\">    first,</span><br><span class=\"line\">    last</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.interests = interests;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bio = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.name.last + <span class=\"string\">&#x27; is &#x27;</span> + <span class=\"built_in\">this</span>.age + <span class=\"string\">&#x27; years old. He likes &#x27;</span> + <span class=\"built_in\">this</span>.interests[<span class=\"number\">0</span>] + <span class=\"string\">&#x27; and &#x27;</span> + <span class=\"built_in\">this</span>.interests[<span class=\"number\">1</span>] + <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.greeting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;Hi! I\\&#x27;m &#x27;</span> + <span class=\"built_in\">this</span>.name.first + <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Smith&#x27;</span>, <span class=\"number\">32</span>, <span class=\"string\">&#x27;male&#x27;</span>, [<span class=\"string\">&#x27;music&#x27;</span>, <span class=\"string\">&#x27;skiing&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nRef:<a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_JS\">初學者應知道的物件導向 JavaScript</a></li>\n<li>箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。</li>\n<li>沒有 arguments “引數”參數,當需要使用 arguments 請維持使用 function。[-&gt;參數引數的概念請先知道]</li>\n<li>宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) =&gt; { return 表示式; }<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//箭頭 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) =&gt; &#123; return 表示式; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Pet_Arr = <span class=\"function\">(<span class=\"params\">color</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ini_constructor_proto.html:99 Uncaught TypeError: Pet_Arr is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">//箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PetA = <span class=\"keyword\">new</span> Pet_Arr(<span class=\"string\">&#x27;yellow&#x27;</span>); <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\nRef: <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭頭函式 MDN</a></li>\n</ul>\n<h4 id=\"宣告練習\"><a href=\"#宣告練習\" class=\"headerlink\" title=\"宣告練習\"></a>宣告練習</h4><p>使用及細節可以看下方</p>\n<figure class=\"highlight javascript\"><figcaption><span>(js_func.html)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// ES5 函式宣告（Function Declaration）</span></span><br><span class=\"line\">    <span class=\"comment\">//function 函式名稱(參數) &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Add</span>(<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 或 */</span></span><br><span class=\"line\">    <span class=\"comment\">// ES5  函式運算式(表達式)（Function Expressions）</span></span><br><span class=\"line\">    <span class=\"comment\">// var 函式名稱 = function (參數) &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;<span class=\"comment\">//匿名函式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add3 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add3</span>(<span class=\"params\">A, B</span>) </span>&#123;<span class=\"comment\">//#1 非匿名函式</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add3);<span class=\"comment\">//#1 但只在自身有效</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add2(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add3(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"comment\">//console.log(add3(1, 2))//#1 ReferenceError: add3 is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ES6 宣告型態 函式名稱 = (參數) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add4 = <span class=\"function\">(<span class=\"params\">A, B</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//縮寫 如果只有return 可以去掉&#123;&#125;與return</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add5 = <span class=\"function\">(<span class=\"params\">A, B</span>) =&gt;</span> A + B;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//縮寫 如果只有一個參數 可以去掉（）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> AddS1 = <span class=\"function\">(<span class=\"params\">A</span>) =&gt;</span> A;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> AddS2 = <span class=\"function\"><span class=\"params\">A</span> =&gt;</span> A;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ES6:&quot;</span> + Add4(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ES6:&quot;</span> + Add5(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"this的問題與箭頭函數的出現\"><a href=\"#this的問題與箭頭函數的出現\" class=\"headerlink\" title=\"this的問題與箭頭函數的出現\"></a>this的問題與箭頭函數的出現</h4><p>箭頭函式有兩個重要的特性：更短的函式寫法與 this 變數的非綁定。</p>\n<ul>\n<li>使用及細節可以看下方<figure class=\"highlight javascript\"><figcaption><span>(js_func_this.html)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">//ES5 函示內this會指向windows而非Person，因此要像PersonSolve寫法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Person() 建構式將 this 定義為它自己的一個實體</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">growUp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在非嚴格模式下, growUp() 函式把 this 定義為全域物件</span></span><br><span class=\"line\">            <span class=\"comment\">// (因為那是 growUp()執行的所在)，</span></span><br><span class=\"line\">            <span class=\"comment\">// 與 Person() 建構式所定義的 this 有所不同</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PersonSolve</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"built_in\">this</span>; <span class=\"comment\">// 有些人喜歡 `that` 而不是 `self`.</span></span><br><span class=\"line\">        <span class=\"comment\">// 選好一種取法後始終如一</span></span><br><span class=\"line\">        self.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">growUp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 這個 callback 參考 `self` 變數，為預期中的物件。</span></span><br><span class=\"line\">            self.age++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve.setTimeout():&quot;</span> + self.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve.setTimeout():&quot;</span> + self.age)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> PersonSolve();</span><br><span class=\"line\">    <span class=\"comment\">//---------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ES6 箭頭函示------------------------------</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person_Arr</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age++; <span class=\"comment\">// |this| 適切的參考了Person建構式所建立的物件</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> Person_Arr();</span><br><span class=\"line\">    <span class=\"comment\">//ES6 箭頭函示------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// OUTPUT</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 17 Person(): Person</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 31 PersonSolve(): PersonSolve</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 47 Person_Arr(): Person_Arr</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 23 Person.setTimeout(): Window --&gt;發現竟然指向Window</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 24 Person.setTimeout(): NaN  --&gt;內容不見！！</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 35 PersonSolve.setTimeout(): PersonSolve  --&gt;workaround解法</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 36 PersonSolve.setTimeout(): 1</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 50 Person_Arr.setTimeout(): Person_Arr --&gt;ES6 arrow解法</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 51 Person_Arr.setTimeout(): 1</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>箭頭函式並沒有原型（prototype）屬性。<br>more ref: <a href=\"https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\">this不分家</a></li>\n</ul>\n<p>ＴＢＤ<br>no this new<br><a href=\"https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\">https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6</a></p>\n<h3 id=\"JS的-Hoisting-提升-顶置特性\"><a href=\"#JS的-Hoisting-提升-顶置特性\" class=\"headerlink\" title=\"JS的 Hoisting (提升)顶置特性\"></a>JS的 Hoisting (提升)顶置特性</h3><ul>\n<li>變數(var hoisting)與函數都可以先使用再宣告</li>\n<li>但提升操作不再适用于 let 并引起一个错误(Uncaught ReferenceError)<br>ref:<a href=\"https://shubo.io/javascript-hoisting/#javascript-hoisting-%E6%8F%90%E5%8D%87\">JavaScript Hoisting (提升)</a></li>\n</ul>\n<h3 id=\"gt-label-info-ES6-使用module分檔-import-amp-export\"><a href=\"#gt-label-info-ES6-使用module分檔-import-amp-export\" class=\"headerlink\" title=\"&gt;label info@ES6%}  - 使用module分檔 (import &amp; export)\"></a>&gt;label info@ES6%}  - 使用module分檔 (import &amp; export)</h3><h3 id=\"閉包（Closure）\"><a href=\"#閉包（Closure）\" class=\"headerlink\" title=\"閉包（Closure）\"></a>閉包（Closure）</h3><p>閉包是函式以及該函式被宣告時所在的作用域環境的組合。</p>\n<ul>\n<li>閉包的好處能把變數隱藏在裡面讓外部存取不到</li>\n<li>閉包在 callback 上的應用尤其常見</li>\n<li>在迴圈建立閉包：一個常見錯誤<br>在 ECMAScript 2015 (&gt;label info@ES6%} )導入 let 前，迴圈內建立的閉包，常會發生問題。<br>範例請見： <a href=\"https://github.com/minilabmemo/simple_js_demo/blob/master/04_js_closure/closure.html\">simple_js_demo-closure</a></li>\n</ul>\n<p>Ref:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures\">MDN-閉包</a></li>\n<li>[你懂 JavaScript 嗎？#15 閉包（Closure）]（<a href=\"https://cythilya.github.io/2018/10/22/closure/%EF%BC%89\">https://cythilya.github.io/2018/10/22/closure/）</a></li>\n</ul>\n<h2 id=\"探討：JavaScript-OOP\"><a href=\"#探討：JavaScript-OOP\" class=\"headerlink\" title=\"探討：JavaScript OOP\"></a>探討：JavaScript OOP</h2><p>OOP （(Object-oriented programming）物件導向/對象編程，在 JavaScript 中，大多数事物都是对象, 从作为核心功能的字符串和数组。你甚至可以自己创建对象，在调用函数前加一个 new ，它就会返回一个这个函数的实例化对象，. 然后，就可以在这个对象上面添加一些属性．<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象入门</a></p>\n<p>舉例：</p>\n<ul>\n<li>用new func()來建構新的物件，func內部this可以指項新屬性</li>\n<li>透過建構子（constructor）所建立出來的物件，我們稱為實例（instance）</li>\n<li>如果忘記打new，變數會出現undifined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//this 指向了代码所在的对象(其实代码运行时所在的对象)。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">first,last, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name= &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;first&#x27;</span>: first,</span><br><span class=\"line\">    <span class=\"string\">&#x27;last&#x27;</span>: last</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.interests = [<span class=\"string\">&#x27;food&#x27;</span>, <span class=\"string\">&#x27;sleep&#x27;</span>],</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.walk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&quot; walk...&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"comment\">//這樣寫會佔用不同的對象空間</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数的实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Pet(<span class=\"string\">&#x27;dotdot&#x27;</span>,<span class=\"string\">&#x27;wu&#x27;</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> Pet(<span class=\"string\">&#x27;lucky&#x27;</span>,<span class=\"string\">&#x27;wu&#x27;</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过简单的语法访问他们</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.name.first)<span class=\"comment\">//点表示法访问</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1[<span class=\"string\">&#x27;name&#x27;</span>][<span class=\"string\">&#x27;first&#x27;</span>]) <span class=\"comment\">//括号表示法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.interests[<span class=\"number\">1</span>])<span class=\"comment\">//数组属性的一个子元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.walk())<span class=\"comment\">//对象的方法调用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nref:<a href=\"https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html\">[筆記] 談談 JavaScript 中的 function constructor 和關鍵字 new</a></li>\n</ul>\n<h3 id=\"Prototype-原型鏈的原理\"><a href=\"#Prototype-原型鏈的原理\" class=\"headerlink\" title=\"Prototype 原型鏈的原理\"></a>Prototype 原型鏈的原理</h3><p>上述的寫法，cat1.walk()與dog1.walk()是兩個不同對象的方法，為解決這問題．</p>\n<ul>\n<li>walk指定在 Pet.prototype 上面，所有 Pet 的 instance 都可以共享這個方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pet.prototype.walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&quot; walk...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>因為 cat1 這個 instance 本身並沒有 walk 這個 function， 找不到，它會試著從Pet.prototype去找，一直往上找，直到找到Object，如果還是沒有，就會回傳undefined</li>\n<li>而這個連接的方式，就是__proto__。</li>\n<li>同时也有一些其他成员—— watch、valueOf 等等——这些成员定义在 Person() 构造器的原型对象、即 Object 。</li>\n</ul>\n<p>ref:<a href=\"https://blog.techbridge.cc/2017/04/22/javascript-prototype/\">該來理解 JavaScript 的原型鍊了</a><br><br><a href=\"https://kknews.cc/code/6agvk2v.html\"> <strong>proto</strong> 和 prototype 到底有什麼區別</a></p>\n<h4 id=\"JavaScript-中的繼承-prototypal-inheritance\"><a href=\"#JavaScript-中的繼承-prototypal-inheritance\" class=\"headerlink\" title=\"JavaScript 中的繼承 (prototypal inheritance)\"></a>JavaScript 中的繼承 (prototypal inheritance)</h4><ul>\n<li>call()函数。基本上，这个函数允许您调用一个在这个文件里别处定义的函数。</li>\n<li>设置 Teacher() 的原型和构造器引用<ul>\n<li>create()这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法</li>\n<li>prototype的constructor属性指向的是Person(),要改指向 Teacher</li>\n</ul>\n</li>\n<li>可重寫Teacher的greeting<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;定义 Teacher() 构造器函数</span><br><span class=\"line\">  function Teacher(first, last, age, gender, interests, subject) &#123;</span><br><span class=\"line\">    Person.call(this, first, last, age, gender, interests);</span><br><span class=\"line\"></span><br><span class=\"line\">    this.subject &#x3D; subject;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法</span><br><span class=\"line\">  Teacher.prototype &#x3D; Object.create(Person.prototype);</span><br><span class=\"line\">  Teacher.prototype.constructor &#x3D; Teacher;&#x2F;&#x2F;原本的是指向Ｐerson</span><br><span class=\"line\">  Teacher.prototype.greeting &#x3D; function () &#123;&#x2F;&#x2F;重開改寫</span><br><span class=\"line\">    var prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.gender &#x3D;&#x3D;&#x3D; &#39;male&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;Male&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;m&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;M&#39;) &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mr.&#39;;</span><br><span class=\"line\">    &#125; else if (this.gender &#x3D;&#x3D;&#x3D; &#39;female&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;Female&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;f&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mrs.&#39;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mx.&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(&#39;Hello. My name is &#39; + prefix + &#39; &#39; + this.name.last + &#39;, and I teach &#39; + this.subject + &#39;.&#39;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  var teacher1 &#x3D; new Teacher(&#39;Dave&#39;, &#39;Griffiths&#39;, 31, &#39;male&#39;, [&#39;football&#39;, &#39;cookery&#39;], &#39;mathematics&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  teacher1.greeting()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance\">JavaScript 中的继承</a> 探討何時使用與參考網站練習</li>\n</ul>\n<p>TBD:<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p>\n<h3 id=\"gt-label-info-ES6-類別-class\"><a href=\"#gt-label-info-ES6-類別-class\" class=\"headerlink\" title=\"&gt;label info@ES6%}  類別 (class)\"></a>&gt;label info@ES6%}  類別 (class)</h3><p>ECMAScript 6 中引入了類別 (class) 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖。類別語法並不是要引入新的物件導向繼承模型到 JavaScript 中，而是提供一個更簡潔的語法來建立物件和處理繼承。</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes\">Classes</a></p>\n<h4 id=\"類別宣告-class-declaration\"><a href=\"#類別宣告-class-declaration\" class=\"headerlink\" title=\"類別宣告 (class declaration)\"></a>類別宣告 (class declaration)</h4><ul>\n<li>使用關鍵字 class<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Polygon &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> var p &#x3D; new Polygon(); </span><br></pre></td></tr></table></figure></li>\n<li>相較函數宣告有Hoisting，類別宣告則否。 你需要先宣告類別，然後存取它，否則就會丟出 ReferenceError:<blockquote>\n<p>note danger %}  var p = new Polygon(); // ReferenceError<br>class Polygon {} </p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"類別敘述-class-expressions\"><a href=\"#類別敘述-class-expressions\" class=\"headerlink\" title=\"類別敘述(class expressions)\"></a>類別敘述(class expressions)</h4><ul>\n<li>類別敘述是定義類別的另一種方法。類別敘述可以有名稱或是無名稱。賦予一個有名稱類別敘述的名稱只在類別主體(class’s body)中有作用。（✍ 其實跟之前提到的Function Expressions一樣概念）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; unnamed</span><br><span class=\"line\">var Polygon &#x3D; class &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; named</span><br><span class=\"line\">var Polygon &#x3D; class Polygon &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"使用JSON\"><a href=\"#使用JSON\" class=\"headerlink\" title=\"使用JSON\"></a>使用JSON</h3><ul>\n<li>JSON要求在字符串和属性用雙引號， 但引號無效。</li>\n<li>我们使用 . 或 [] 訪問对象内的数据</li>\n<li>JSON.parse<br>用於將文字轉成json object<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.responseType = <span class=\"string\">&#x27;text&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> superHeroes = <span class=\"built_in\">JSON</span>.parse(superHeroesText); </span><br></pre></td></tr></table></figure></li>\n<li>JSON.stringify<br>用於將json object轉成json string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myJSON = &#123; <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Chris&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;38&quot;</span> &#125;; <span class=\"built_in\">console</span>.log(myJSON)</span><br><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"built_in\">JSON</span>.stringify(myJSON);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myString)<span class=\"comment\">//string:&#123;&quot;name&quot;:&quot;Chris&quot;,&quot;age&quot;:&quot;38&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"事件-Event\"><a href=\"#事件-Event\" class=\"headerlink\" title=\"事件(Event)\"></a>事件(Event)</h2><ul>\n<li>好得寫法是找到(select)button並添加事件，避免汙染HTML。</li>\n<li>關於button.onclick vs addEventListener<ul>\n<li>on會覆蓋上一个事件</li>\n<li>addEventListener事件，可以多次绑定同一个事件并且不会覆盖上一个事件</li>\n</ul>\n</li>\n</ul>\n<p>ref:<a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/42343/\">JS裡addEventListener和on的區別</a></p>\n<h2 id=\"延伸：Lint-工具\"><a href=\"#延伸：Lint-工具\" class=\"headerlink\" title=\"延伸：Lint 工具\"></a>延伸：Lint 工具</h2><p>在電腦科學中，lint是一種工具程式的名稱，它用來標記原始碼中，某些可疑的、不具結構性（可能造成bug）的段落。它是一種靜態程式分析工具</p>\n<h3 id=\"JSLint\"><a href=\"#JSLint\" class=\"headerlink\" title=\"JSLint\"></a>JSLint</h3><p>JSLint 幫你檢查未定義的變數、函數、陳述式結尾有沒有加分號(;)、變數使用之前要先用 var 宣告、使用非數字的變數要用 === 或 !== 讓比對的時候不要自動進行轉型(Casting)、盡量不要使用 eval 函數、… 好多好多</p>\n<h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><p>包括格式檢驗及質量效驗（未使用變量、三等號、全局變量聲明等問题）<br>自由選擇要使用哪些規則，對 &gt;label info@ES6%}  還有 JSX 的支援度跟其他 linter 相較之下也是最高的</p>\n<p>註： prettier 只是格式的檢驗（空格 格式化），不会對代码质量进行校验。但有些檢驗，ESLint沒有，所以可以ESLint＋prettier一起使用，也可以視使用情況不使用 Prettier。</p>\n<h2 id=\"其他練習\"><a href=\"#其他練習\" class=\"headerlink\" title=\"其他練習\"></a>其他練習</h2><h2 id=\"上述概念練習\"><a href=\"#上述概念練習\" class=\"headerlink\" title=\"上述概念練習\"></a>上述概念練習</h2><p><a href=\"https://github.com/minilabmemo/simple_js_demo\">simple_js_demo</a></p>\n<h2 id=\"JS-與-canvas-元素\"><a href=\"#JS-與-canvas-元素\" class=\"headerlink\" title=\"JS 與 canvas 元素\"></a>JS 與 canvas 元素</h2><h3 id=\"基礎繪製說明\"><a href=\"#基礎繪製說明\" class=\"headerlink\" title=\"基礎繪製說明\"></a>基礎繪製說明</h3><p>Canvas 是H5新出來的標籤</p>\n<ul>\n<li><p>元素需要有闭合标签</p>\n</li>\n<li><p>基本上現今所有主流的瀏覽器都有支援</p>\n</li>\n<li><p>所有元素定位皆相對於此左上角原點</p>\n<br>\n</li>\n<li><p>HTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&quot;canvas&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;300&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;canvas&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>JS</p>\n</li>\n<li><p>圓形ctx.arc(x, y, 半徑, 開始弧度, 結束弧度 )<br>0~2 pi =360°<br>更多弧度示意圖：<a href=\"https://zh.wikipedia.org/wiki/%E5%BC%A7%E5%BA%A6\">弧度</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas &#x3D; document.getElementById(&#39;canvas&#39;);</span><br><span class=\"line\">var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class=\"line\">ctx.fillStyle &#x3D; &#39;green&#39;;</span><br><span class=\"line\">ctx.fillRect(10, 10, 100, 100);&#x2F;&#x2F;畫矩形 x start,y start,width,height</span><br></pre></td></tr></table></figure>\n<p>利用漸變色及貝斯曲線或是填入圖案，繪製文字，可做出很多豐富的圖案，還有動畫行星/時鐘，滑鼠動畫，像素控制等，詳請見下方文件</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\">Canvas 教學文件</a></p>\n<h3 id=\"彈跳彩球範例\"><a href=\"#彈跳彩球範例\" class=\"headerlink\" title=\"彈跳彩球範例\"></a>彈跳彩球範例</h3><p>Ｒef: <a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice\">物件建構實作</a></p>\n<h3 id=\"破撞說明\"><a href=\"#破撞說明\" class=\"headerlink\" title=\"破撞說明\"></a>破撞說明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Games&#x2F;Techniques&#x2F;2D_collision_detection</span><br><span class=\"line\">var circle1 &#x3D; &#123;radius: 20, x: 5, y: 5&#125;;&#x2F;&#x2F;radius半徑及座標</span><br><span class=\"line\">var circle2 &#x3D; &#123;radius: 12, x: 10, y: 5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var dx &#x3D; circle1.x - circle2.x;</span><br><span class=\"line\">var dy &#x3D; circle1.y - circle2.y;</span><br><span class=\"line\">var distance &#x3D; Math.sqrt(dx * dx + dy * dy);&#x2F;&#x2F;平面兩點之間距離公式</span><br><span class=\"line\"></span><br><span class=\"line\">if (distance &lt; circle1.radius + circle2.radius) &#123; &#x2F;&#x2F;原形半徑相加&#x3D;兩圓碰撞時的距離</span><br><span class=\"line\">    &#x2F;&#x2F; collision detected!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"動畫操控範例說明\"><a href=\"#動畫操控範例說明\" class=\"headerlink\" title=\"動畫操控範例說明\"></a>動畫操控範例說明</h3><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations\">https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations</a></p>\n<h3 id=\"排程更新\"><a href=\"#排程更新\" class=\"headerlink\" title=\"排程更新\"></a>排程更新</h3><p>第一種作法是利用window.setInterval()與window.setTimeout()方法。</p>\n<p>Note: 針對新版瀏覽器建議採用window.requestAnimationFrame()方法。方法為動畫提供更順暢更有效率的方式來執行,當系統準備好繪製畫面時,藉由呼叫動畫andmation frame()的callback函數。</p>\n<p><a href=\"https://www.pluralsight.com/guides/how-to-use-requestanimationframe-with-react\">requestanimationframe-with-react</a><br><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/260087/\">深入理解requestAnimationFrame的動畫迴圈</a><br><a href=\"https://www.dazhuanlan.com/2019/12/25/5e024ca3eeb4d/\">Web 計時與動畫 </a><br><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></p>\n<h3 id=\"Event操控範例說明\"><a href=\"#Event操控範例說明\" class=\"headerlink\" title=\"Event操控範例說明\"></a>Event操控範例說明</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations</a><br>這邊的話可以看到，Event滑鼠控制只能針對整個畫布做操作，每次更新都是更新畫布，內容物件是不存在的。</p>\n<p>延伸:<a href=\"https://www.itread01.com/content/1544856246.html\">Canvas和SVG</a><br>Canvas是點陣圖，受解析度影響，SVG是向量圖。<br>使用svg有好有壞:<br>好處是方便操作dom元素, 可操作元素。<br>壞處是渲染效率不高, 在數據量較大時頁面易掉幀, 卡頓，不適合遊戲。</p>\n<h3 id=\"D3-操控SVG或是Canvas\"><a href=\"#D3-操控SVG或是Canvas\" class=\"headerlink\" title=\"D3 操控SVG或是Canvas\"></a>D3 操控SVG或是Canvas</h3><p><a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\">http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/</a></p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>本章由<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript\">MDN-JavaScript</a>開始著手練習，並筆記學習概念．  </p>\n</blockquote>","more":"<h2 id=\"JS歷史-ES6-2015\"><a href=\"#JS歷史-ES6-2015\" class=\"headerlink\" title=\"JS歷史- ES6 2015\"></a>JS歷史- ES6 2015</h2><p>ECMAScript是一種由Ecma國際定義的手稿語言規範，它往往被稱為JavaScript或JScript (維基)</p>\n<ul>\n<li>ES6為ECMAScript2015，是大幅度的更新，討論度較高，</li>\n</ul>\n<hr>\n<h2 id=\"宣告與各用法概念\"><a href=\"#宣告與各用法概念\" class=\"headerlink\" title=\"宣告與各用法概念\"></a>宣告與各用法概念</h2><h3 id=\"命名規則\"><a href=\"#命名規則\" class=\"headerlink\" title=\"命名規則\"></a>命名規則</h3><ul>\n<li>小寫駱駝</li>\n<li>大小寫相異(敏感)</li>\n<li>有意義的名字</li>\n</ul>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#%E5%85%B3%E4%BA%8E%E5%8F%98%E9%87%8F%E5%91%BD%E5%90%8D%E7%9A%84%E8%A7%84%E5%88%99\">关于变量命名的规则</a></p>\n<h3 id=\"變數\"><a href=\"#變數\" class=\"headerlink\" title=\"變數\"></a>變數</h3><ul>\n<li>宣告變數但不賦值=undefined</li>\n<li>null常見於宣告後面定義成沒有值或找不到</li>\n<li>全域屬性 NaN 表示「非數值」（Not-A-Number）的數值<ul>\n<li>NaN 不等於（==、!=、===、!==）任何值，包括 NaN 本身。請使用 Number.isNaN() 或 isNaN() 來確認某個數值是否為 NaN。</li>\n</ul>\n</li>\n</ul>\n<p>ref:<br><a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Variables#var_%E4%B8%8E_let_%E7%9A%84%E5%8C%BA%E5%88%AB\">var 与 let 的区别</a> | <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let\">let</a> | <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Global_Objects/NaN\">NaN</a></p>\n<hr>\n<h3 id=\"操作\"><a href=\"#操作\" class=\"headerlink\" title=\"操作\"></a>操作</h3><h4 id=\"比對\"><a href=\"#比對\" class=\"headerlink\" title=\"比對\"></a>比對</h4><h5 id=\"嚴格相等（-）\"><a href=\"#嚴格相等（-）\" class=\"headerlink\" title=\"嚴格相等（===）\"></a>嚴格相等（===）</h5><p>先比較型別</p>\n<h5 id=\"一般相等（-）\"><a href=\"#一般相等（-）\" class=\"headerlink\" title=\"一般相等（==）\"></a>一般相等（==）</h5><p>一般相等會先將比較值轉換成同型別後比較。轉換後（可能一個或兩個都被轉換），接著進行的幾乎和嚴格比較（===）一樣。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> === <span class=\"string\">&quot;123&quot;</span>); <span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> === <span class=\"number\">0</span>);<span class=\"literal\">false</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"literal\">false</span> == <span class=\"number\">0</span>);<span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"number\">123</span> == <span class=\"string\">&quot;123&quot;</span>);<span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>部分開發者認為最好別用一般相等。嚴格比較更容易預測，且因為不必轉型，因此效率更好。</li>\n</ul>\n<h5 id=\"同值相等\"><a href=\"#同值相等\" class=\"headerlink\" title=\"同值相等\"></a>同值相等</h5><blockquote>\n<p>label info@ES6%}  提出同值相等演算法，用來解決這個問題。Object.is就是部署這個演算法的新方法。同值相等解決了最後一個情況：比較兩個值是否功能相同 。<br>Object.is 會和嚴格相等做同樣的事，但會將 NaN、-0 和 +0 獨立處理，因此這三個不會相等</p>\n</blockquote>\n<h5 id=\"零值相等\"><a href=\"#零值相等\" class=\"headerlink\" title=\"零值相等\"></a>零值相等</h5><p>和同值相等一樣，但將 +0 和 -0 視為相同。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.log(-<span class=\"number\">0</span> == +<span class=\"number\">0</span>); <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(-<span class=\"number\">0</span> === +<span class=\"number\">0</span>); <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>更多比較表可以看 <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Equality_comparisons_and_sameness\">Equality_comparisons_and_sameness</a></li>\n<li>陣列比較more <a href=\"https://www.delftstack.com/zh-tw/howto/javascript/compare-two-arrays-javascript/\">如何在 JavaScript 中比較兩個陣列</a></li>\n</ul>\n<h4 id=\"二元邏輯運算子\"><a href=\"#二元邏輯運算子\" class=\"headerlink\" title=\"二元邏輯運算子\"></a>二元邏輯運算子</h4><p>JavaScript 中的真假值在判斷會自動作轉型，像是 null、NaN、0、空字串（””、’’）、undefined 都會被轉型並判斷為「false」。</p>\n<ul>\n<li>&amp;&amp;<br>a= 條件式 ＆＆“”<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a5 = <span class=\"string\">&#x27;Cat&#x27;</span> &amp;&amp; <span class=\"string\">&#x27;Dog&#x27;</span>      <span class=\"comment\">// t &amp;&amp; t returns &quot;Dog&quot;</span></span><br><span class=\"line\">a6 = <span class=\"literal\">false</span> &amp;&amp; <span class=\"string\">&#x27;Cat&#x27;</span>      <span class=\"comment\">// f &amp;&amp; t returns false</span></span><br></pre></td></tr></table></figure></li>\n<li>||<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> a = <span class=\"number\">0</span> || <span class=\"string\">&#x27;hidden&#x27;</span>;           </span><br><span class=\"line\"><span class=\"comment\">// 因為 0 被轉型後為 false，所以 a 會是 &#x27;hidden&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> b = <span class=\"number\">26900</span> || <span class=\"number\">24900</span>;          </span><br><span class=\"line\"><span class=\"comment\">// 因為 26900 會轉型為 true，所以 b 會是 26900</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h4 id=\"gt-label-info-ES6-展開語法（spread-syntax）-amp-其餘語法（rest-syntax）\"><a href=\"#gt-label-info-ES6-展開語法（spread-syntax）-amp-其餘語法（rest-syntax）\" class=\"headerlink\" title=\"&gt;label info@ES6%} - 展開語法（spread syntax）&amp; 其餘語法（rest syntax）\"></a>&gt;label info@ES6%} - 展開語法（spread syntax）&amp; 其餘語法（rest syntax）</h4>展開運算子(…) 允許可迭代的陣列或字串展開成０到多個參數</li>\n</ul>\n<h4 id=\"字符操作\"><a href=\"#字符操作\" class=\"headerlink\" title=\"字符操作\"></a>字符操作</h4><ul>\n<li>一個字符串和一個数字可以直接相加變成字串</li>\n<li>把字串當作對象，或許長度或大小寫轉換去處理字符串<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> s = <span class=\"number\">19</span> + <span class=\"string\">&#x27;67&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;s:&quot;</span>+s+<span class=\"string\">&quot; type:&quot;</span>+<span class=\"keyword\">typeof</span> s);</span><br><span class=\"line\">    <span class=\"comment\">//鍵入s.可以找到很多以字符為對象的操作</span></span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">s:<span class=\"number\">1967</span> type:string</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h4 id=\"Number\"><a href=\"#Number\" class=\"headerlink\" title=\"Number()\"></a>Number()</h4><p>对象将把传递给它的任何东西转换成一个数字</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> myString = <span class=\"string\">&#x27;123&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">let</span> myNum = <span class=\"built_in\">Number</span>(myString);</span><br><span class=\"line\"><span class=\"keyword\">typeof</span> myNum;</span><br></pre></td></tr></table></figure>\n<h4 id=\"toString-NaN\"><a href=\"#toString-NaN\" class=\"headerlink\" title=\"toString()\"></a>toString()</h4><p>每个数字都有一个名为 toString() 的方法，它将把它转换成等价的字符串。</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/First_steps/Strings\">JavaScript中的字符串</a></p>\n<h4 id=\"樣板字面值\"><a href=\"#樣板字面值\" class=\"headerlink\" title=\"樣板字面值\"></a><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Template_literals\">樣板字面值</a></h4><blockquote>\n<p>label info@ES6%} 樣板字面值（Template literals）是允許嵌入運算式的字串字面值（string literals）。</p>\n</blockquote>\n<ul>\n<li>被反引號（back-tick，重音符號<code> </code> )字元封閉，代替了雙或單引號。</li>\n<li>可以包含由錢字元及花括號所構成（${expression}）的佔位符（placeholders）<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">`string text line 1</span></span><br><span class=\"line\"><span class=\"string\"> string text line 2`</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"string\">`string text <span class=\"subst\">$&#123;expression&#125;</span> string text`</span></span><br><span class=\"line\"></span><br><span class=\"line\">tag <span class=\"string\">`string text <span class=\"subst\">$&#123;expression&#125;</span> string text`</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li>標籤樣板字面值是一種更高級的樣板字面值形式，允許你透過&gt;label warning@自訂命名標籤函數 %}操作樣板字面值的輸出。</li>\n<li>巢狀的樣板字面值的應用<a href=\"https://ithelp.ithome.com.tw/articles/10231520\">Javascript 進階 10-3 巢狀結構</a></li>\n</ul>\n<h4 id=\"物件屬性名稱縮寫（Shorthand-property-names）\"><a href=\"#物件屬性名稱縮寫（Shorthand-property-names）\" class=\"headerlink\" title=\"物件屬性名稱縮寫（Shorthand property names）\"></a>物件屬性名稱縮寫（Shorthand property names）</h4><ul>\n<li>Key 與 Value 名稱相同，可進行縮寫</li>\n<li>物件內可直接省略 function 關鍵字進行縮寫</li>\n</ul>\n<h4 id=\"gt-label-info-ES6-解構賦值-Destructuring-assignment\"><a href=\"#gt-label-info-ES6-解構賦值-Destructuring-assignment\" class=\"headerlink\" title=\"&gt;label info@ES6%}  - 解構賦值 Destructuring assignment\"></a>&gt;label info@ES6%}  - 解構賦值 Destructuring assignment</h4><p>可以把陣列或物件中的資料解開擷取成為獨立變數<br>詳細請見:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment\">MDN-解構賦值</a></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;p, q&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(p); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(q); <span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">///</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> o = &#123;<span class=\"attr\">p</span>: <span class=\"number\">42</span>, <span class=\"attr\">q</span>: <span class=\"literal\">true</span>&#125;;</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123;<span class=\"attr\">p</span>: foo, <span class=\"attr\">q</span>: bar&#125; = o;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(foo); <span class=\"comment\">// 42</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(bar); <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n\n\n\n<hr>\n<h3 id=\"函式宣告\"><a href=\"#函式宣告\" class=\"headerlink\" title=\"函式宣告\"></a>函式宣告</h3><ul>\n<li>可用函式宣告（Function Declaration）（ES5）</li>\n<li>函式運算式(表達式)（Function Expressions）（ES5）<ul>\n<li>宣告一個函數，或匿名函數 (anonymous function / function literal) 當作值指定給一個變數</li>\n</ul>\n</li>\n<li>箭頭函式運算式（arrow function expression）（&gt;label success@ES6 %}）<ul>\n<li>它沒有自己的 this、arguments、super、new.target 等語法。</li>\n</ul>\n</li>\n</ul>\n<p>function 建構子說明</p>\n<ul>\n<li>JavaScript 使用稱為建構子函式（constructor function）的特殊函式，定義物件與功能。<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 自己的一些東西</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">first, last, age, gender, interests</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = &#123;</span><br><span class=\"line\">    first,</span><br><span class=\"line\">    last</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.gender = gender;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.interests = interests;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.bio = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&#x27; &#x27;</span> + <span class=\"built_in\">this</span>.name.last + <span class=\"string\">&#x27; is &#x27;</span> + <span class=\"built_in\">this</span>.age + <span class=\"string\">&#x27; years old. He likes &#x27;</span> + <span class=\"built_in\">this</span>.interests[<span class=\"number\">0</span>] + <span class=\"string\">&#x27; and &#x27;</span> + <span class=\"built_in\">this</span>.interests[<span class=\"number\">1</span>] + <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.greeting = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"string\">&#x27;Hi! I\\&#x27;m &#x27;</span> + <span class=\"built_in\">this</span>.name.first + <span class=\"string\">&#x27;.&#x27;</span>);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> person1 = <span class=\"keyword\">new</span> Person(<span class=\"string\">&#x27;Bob&#x27;</span>, <span class=\"string\">&#x27;Smith&#x27;</span>, <span class=\"number\">32</span>, <span class=\"string\">&#x27;male&#x27;</span>, [<span class=\"string\">&#x27;music&#x27;</span>, <span class=\"string\">&#x27;skiing&#x27;</span>]);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nRef:<a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object-oriented_JS\">初學者應知道的物件導向 JavaScript</a></li>\n<li>箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。</li>\n<li>沒有 arguments “引數”參數,當需要使用 arguments 請維持使用 function。[-&gt;參數引數的概念請先知道]</li>\n<li>宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) =&gt; { return 表示式; }<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//箭頭 宣告 ＸＸＸ等於 (參數1, 參數2, …, 參數N) =&gt; &#123; return 表示式; &#125;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Pet_Arr = <span class=\"function\">(<span class=\"params\">color</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.color = color;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// ini_constructor_proto.html:99 Uncaught TypeError: Pet_Arr is not a constructor</span></span><br><span class=\"line\"><span class=\"comment\">//箭頭函式不可作為建構式使用；若使用於建構式，會在使用 new 時候拋出錯誤。</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> PetA = <span class=\"keyword\">new</span> Pet_Arr(<span class=\"string\">&#x27;yellow&#x27;</span>); <span class=\"comment\">//</span></span><br></pre></td></tr></table></figure>\nRef: <a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions\">箭頭函式 MDN</a></li>\n</ul>\n<h4 id=\"宣告練習\"><a href=\"#宣告練習\" class=\"headerlink\" title=\"宣告練習\"></a>宣告練習</h4><p>使用及細節可以看下方</p>\n<figure class=\"highlight javascript\"><figcaption><span>(js_func.html)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">// ES5 函式宣告（Function Declaration）</span></span><br><span class=\"line\">    <span class=\"comment\">//function 函式名稱(參數) &#123;</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Add</span>(<span class=\"params\">A, B</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">/* 或 */</span></span><br><span class=\"line\">    <span class=\"comment\">// ES5  函式運算式(表達式)（Function Expressions）</span></span><br><span class=\"line\">    <span class=\"comment\">// var 函式名稱 = function (參數) &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add2 = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">A, B</span>) </span>&#123;<span class=\"comment\">//匿名函式</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add3 = <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">add3</span>(<span class=\"params\">A, B</span>) </span>&#123;<span class=\"comment\">//#1 非匿名函式</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"keyword\">typeof</span> add3);<span class=\"comment\">//#1 但只在自身有效</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add2(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(Add3(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"comment\">//console.log(add3(1, 2))//#1 ReferenceError: add3 is not defined</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ES6 宣告型態 函式名稱 = (參數) =&gt; &#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add4 = <span class=\"function\">(<span class=\"params\">A, B</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> A + B;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">//縮寫 如果只有return 可以去掉&#123;&#125;與return</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> Add5 = <span class=\"function\">(<span class=\"params\">A, B</span>) =&gt;</span> A + B;</span><br><span class=\"line\"></span><br><span class=\"line\">     <span class=\"comment\">//縮寫 如果只有一個參數 可以去掉（）</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> AddS1 = <span class=\"function\">(<span class=\"params\">A</span>) =&gt;</span> A;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> AddS2 = <span class=\"function\"><span class=\"params\">A</span> =&gt;</span> A;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ES6:&quot;</span> + Add4(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;ES6:&quot;</span> + Add5(<span class=\"number\">1</span>, <span class=\"number\">2</span>))<span class=\"comment\">//3</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"this的問題與箭頭函數的出現\"><a href=\"#this的問題與箭頭函數的出現\" class=\"headerlink\" title=\"this的問題與箭頭函數的出現\"></a>this的問題與箭頭函數的出現</h4><p>箭頭函式有兩個重要的特性：更短的函式寫法與 this 變數的非綁定。</p>\n<ul>\n<li>使用及細節可以看下方<figure class=\"highlight javascript\"><figcaption><span>(js_func_this.html)</span></figcaption><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"comment\">//ES5 函示內this會指向windows而非Person，因此要像PersonSolve寫法</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// Person() 建構式將 this 定義為它自己的一個實體</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">growUp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 在非嚴格模式下, growUp() 函式把 this 定義為全域物件</span></span><br><span class=\"line\">            <span class=\"comment\">// (因為那是 growUp()執行的所在)，</span></span><br><span class=\"line\">            <span class=\"comment\">// 與 Person() 建構式所定義的 this 有所不同</span></span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">PersonSolve</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> self = <span class=\"built_in\">this</span>; <span class=\"comment\">// 有些人喜歡 `that` 而不是 `self`.</span></span><br><span class=\"line\">        <span class=\"comment\">// 選好一種取法後始終如一</span></span><br><span class=\"line\">        self.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">growUp</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"comment\">// 這個 callback 參考 `self` 變數，為預期中的物件。</span></span><br><span class=\"line\">            self.age++;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve.setTimeout():&quot;</span> + self.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;PersonSolve.setTimeout():&quot;</span> + self.age)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p1 = <span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">    <span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> PersonSolve();</span><br><span class=\"line\">    <span class=\"comment\">//---------</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//ES6 箭頭函示------------------------------</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person_Arr</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">this</span>.age = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"built_in\">this</span>.age++; <span class=\"comment\">// |this| 適切的參考了Person建構式所建立的物件</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.constructor.name);</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Person_Arr.setTimeout():&quot;</span> + <span class=\"built_in\">this</span>.age)</span><br><span class=\"line\">        &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> Person_Arr();</span><br><span class=\"line\">    <span class=\"comment\">//ES6 箭頭函示------------------------------</span></span><br><span class=\"line\"></span><br><span class=\"line\">   <span class=\"comment\">// OUTPUT</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 17 Person(): Person</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 31 PersonSolve(): PersonSolve</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 47 Person_Arr(): Person_Arr</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 23 Person.setTimeout(): Window --&gt;發現竟然指向Window</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 24 Person.setTimeout(): NaN  --&gt;內容不見！！</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 35 PersonSolve.setTimeout(): PersonSolve  --&gt;workaround解法</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 36 PersonSolve.setTimeout(): 1</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 50 Person_Arr.setTimeout(): Person_Arr --&gt;ES6 arrow解法</span></span><br><span class=\"line\">    <span class=\"comment\">// js_func_this.html: 51 Person_Arr.setTimeout(): 1</span></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure></li>\n<li>箭頭函式並沒有原型（prototype）屬性。<br>more ref: <a href=\"https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\">this不分家</a></li>\n</ul>\n<p>ＴＢＤ<br>no this new<br><a href=\"https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6\">https://developer.cdn.mozilla.net/zh-TW/docs/Web/JavaScript/Reference/Functions/Arrow_functions#this_%E4%B8%8D%E5%88%86%E5%AE%B6</a></p>\n<h3 id=\"JS的-Hoisting-提升-顶置特性\"><a href=\"#JS的-Hoisting-提升-顶置特性\" class=\"headerlink\" title=\"JS的 Hoisting (提升)顶置特性\"></a>JS的 Hoisting (提升)顶置特性</h3><ul>\n<li>變數(var hoisting)與函數都可以先使用再宣告</li>\n<li>但提升操作不再适用于 let 并引起一个错误(Uncaught ReferenceError)<br>ref:<a href=\"https://shubo.io/javascript-hoisting/#javascript-hoisting-%E6%8F%90%E5%8D%87\">JavaScript Hoisting (提升)</a></li>\n</ul>\n<h3 id=\"gt-label-info-ES6-使用module分檔-import-amp-export\"><a href=\"#gt-label-info-ES6-使用module分檔-import-amp-export\" class=\"headerlink\" title=\"&gt;label info@ES6%}  - 使用module分檔 (import &amp; export)\"></a>&gt;label info@ES6%}  - 使用module分檔 (import &amp; export)</h3><h3 id=\"閉包（Closure）\"><a href=\"#閉包（Closure）\" class=\"headerlink\" title=\"閉包（Closure）\"></a>閉包（Closure）</h3><p>閉包是函式以及該函式被宣告時所在的作用域環境的組合。</p>\n<ul>\n<li>閉包的好處能把變數隱藏在裡面讓外部存取不到</li>\n<li>閉包在 callback 上的應用尤其常見</li>\n<li>在迴圈建立閉包：一個常見錯誤<br>在 ECMAScript 2015 (&gt;label info@ES6%} )導入 let 前，迴圈內建立的閉包，常會發生問題。<br>範例請見： <a href=\"https://github.com/minilabmemo/simple_js_demo/blob/master/04_js_closure/closure.html\">simple_js_demo-closure</a></li>\n</ul>\n<p>Ref:</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Closures\">MDN-閉包</a></li>\n<li>[你懂 JavaScript 嗎？#15 閉包（Closure）]（<a href=\"https://cythilya.github.io/2018/10/22/closure/%EF%BC%89\">https://cythilya.github.io/2018/10/22/closure/）</a></li>\n</ul>\n<h2 id=\"探討：JavaScript-OOP\"><a href=\"#探討：JavaScript-OOP\" class=\"headerlink\" title=\"探討：JavaScript OOP\"></a>探討：JavaScript OOP</h2><p>OOP （(Object-oriented programming）物件導向/對象編程，在 JavaScript 中，大多数事物都是对象, 从作为核心功能的字符串和数组。你甚至可以自己创建对象，在调用函数前加一个 new ，它就会返回一个这个函数的实例化对象，. 然后，就可以在这个对象上面添加一些属性．<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects\">JavaScript 对象入门</a></p>\n<p>舉例：</p>\n<ul>\n<li>用new func()來建構新的物件，func內部this可以指項新屬性</li>\n<li>透過建構子（constructor）所建立出來的物件，我們稱為實例（instance）</li>\n<li>如果忘記打new，變數會出現undifined<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//this 指向了代码所在的对象(其实代码运行时所在的对象)。</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Pet</span>(<span class=\"params\">first,last, age</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name= &#123;</span><br><span class=\"line\">    <span class=\"string\">&#x27;first&#x27;</span>: first,</span><br><span class=\"line\">    <span class=\"string\">&#x27;last&#x27;</span>: last</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.interests = [<span class=\"string\">&#x27;food&#x27;</span>, <span class=\"string\">&#x27;sleep&#x27;</span>],</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.walk = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&quot; walk...&quot;</span>);</span><br><span class=\"line\">  &#125; <span class=\"comment\">//這樣寫會佔用不同的對象空間</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//函数的实例化对象</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> cat1 = <span class=\"keyword\">new</span> Pet(<span class=\"string\">&#x27;dotdot&#x27;</span>,<span class=\"string\">&#x27;wu&#x27;</span>, <span class=\"number\">11</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> dog1 = <span class=\"keyword\">new</span> Pet(<span class=\"string\">&#x27;lucky&#x27;</span>,<span class=\"string\">&#x27;wu&#x27;</span>, <span class=\"number\">9</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过简单的语法访问他们</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.name.first)<span class=\"comment\">//点表示法访问</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1[<span class=\"string\">&#x27;name&#x27;</span>][<span class=\"string\">&#x27;first&#x27;</span>]) <span class=\"comment\">//括号表示法</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.interests[<span class=\"number\">1</span>])<span class=\"comment\">//数组属性的一个子元素</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(cat1.walk())<span class=\"comment\">//对象的方法调用</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nref:<a href=\"https://pjchender.blogspot.com/2016/06/javascriptfunction-constructornew.html\">[筆記] 談談 JavaScript 中的 function constructor 和關鍵字 new</a></li>\n</ul>\n<h3 id=\"Prototype-原型鏈的原理\"><a href=\"#Prototype-原型鏈的原理\" class=\"headerlink\" title=\"Prototype 原型鏈的原理\"></a>Prototype 原型鏈的原理</h3><p>上述的寫法，cat1.walk()與dog1.walk()是兩個不同對象的方法，為解決這問題．</p>\n<ul>\n<li>walk指定在 Pet.prototype 上面，所有 Pet 的 instance 都可以共享這個方法<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Pet.prototype.walk = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"built_in\">this</span>.name.first + <span class=\"string\">&quot; walk...&quot;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li>因為 cat1 這個 instance 本身並沒有 walk 這個 function， 找不到，它會試著從Pet.prototype去找，一直往上找，直到找到Object，如果還是沒有，就會回傳undefined</li>\n<li>而這個連接的方式，就是__proto__。</li>\n<li>同时也有一些其他成员—— watch、valueOf 等等——这些成员定义在 Person() 构造器的原型对象、即 Object 。</li>\n</ul>\n<p>ref:<a href=\"https://blog.techbridge.cc/2017/04/22/javascript-prototype/\">該來理解 JavaScript 的原型鍊了</a><br><br><a href=\"https://kknews.cc/code/6agvk2v.html\"> <strong>proto</strong> 和 prototype 到底有什麼區別</a></p>\n<h4 id=\"JavaScript-中的繼承-prototypal-inheritance\"><a href=\"#JavaScript-中的繼承-prototypal-inheritance\" class=\"headerlink\" title=\"JavaScript 中的繼承 (prototypal inheritance)\"></a>JavaScript 中的繼承 (prototypal inheritance)</h4><ul>\n<li>call()函数。基本上，这个函数允许您调用一个在这个文件里别处定义的函数。</li>\n<li>设置 Teacher() 的原型和构造器引用<ul>\n<li>create()这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法</li>\n<li>prototype的constructor属性指向的是Person(),要改指向 Teacher</li>\n</ul>\n</li>\n<li>可重寫Teacher的greeting<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F;定义 Teacher() 构造器函数</span><br><span class=\"line\">  function Teacher(first, last, age, gender, interests, subject) &#123;</span><br><span class=\"line\">    Person.call(this, first, last, age, gender, interests);</span><br><span class=\"line\"></span><br><span class=\"line\">    this.subject &#x3D; subject;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  &#x2F;&#x2F;这意味着Teacher.prototype现在会继承Person.prototype的所有属性和方法</span><br><span class=\"line\">  Teacher.prototype &#x3D; Object.create(Person.prototype);</span><br><span class=\"line\">  Teacher.prototype.constructor &#x3D; Teacher;&#x2F;&#x2F;原本的是指向Ｐerson</span><br><span class=\"line\">  Teacher.prototype.greeting &#x3D; function () &#123;&#x2F;&#x2F;重開改寫</span><br><span class=\"line\">    var prefix;</span><br><span class=\"line\"></span><br><span class=\"line\">    if (this.gender &#x3D;&#x3D;&#x3D; &#39;male&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;Male&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;m&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;M&#39;) &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mr.&#39;;</span><br><span class=\"line\">    &#125; else if (this.gender &#x3D;&#x3D;&#x3D; &#39;female&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;Female&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;f&#39; || this.gender &#x3D;&#x3D;&#x3D; &#39;F&#39;) &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mrs.&#39;;</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      prefix &#x3D; &#39;Mx.&#39;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    alert(&#39;Hello. My name is &#39; + prefix + &#39; &#39; + this.name.last + &#39;, and I teach &#39; + this.subject + &#39;.&#39;);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  var teacher1 &#x3D; new Teacher(&#39;Dave&#39;, &#39;Griffiths&#39;, 31, &#39;male&#39;, [&#39;football&#39;, &#39;cookery&#39;], &#39;mathematics&#39;);</span><br><span class=\"line\"></span><br><span class=\"line\">  teacher1.greeting()</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\nref:<a href=\"https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance\">JavaScript 中的继承</a> 探討何時使用與參考網站練習</li>\n</ul>\n<p>TBD:<br><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a></p>\n<h3 id=\"gt-label-info-ES6-類別-class\"><a href=\"#gt-label-info-ES6-類別-class\" class=\"headerlink\" title=\"&gt;label info@ES6%}  類別 (class)\"></a>&gt;label info@ES6%}  類別 (class)</h3><p>ECMAScript 6 中引入了類別 (class) 作為 JavaScript 現有原型程式(prototype-based)繼承的語法糖。類別語法並不是要引入新的物件導向繼承模型到 JavaScript 中，而是提供一個更簡潔的語法來建立物件和處理繼承。</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Reference/Classes\">Classes</a></p>\n<h4 id=\"類別宣告-class-declaration\"><a href=\"#類別宣告-class-declaration\" class=\"headerlink\" title=\"類別宣告 (class declaration)\"></a>類別宣告 (class declaration)</h4><ul>\n<li>使用關鍵字 class<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Polygon &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> var p &#x3D; new Polygon(); </span><br></pre></td></tr></table></figure></li>\n<li>相較函數宣告有Hoisting，類別宣告則否。 你需要先宣告類別，然後存取它，否則就會丟出 ReferenceError:<blockquote>\n<p>note danger %}  var p = new Polygon(); // ReferenceError<br>class Polygon {} </p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"類別敘述-class-expressions\"><a href=\"#類別敘述-class-expressions\" class=\"headerlink\" title=\"類別敘述(class expressions)\"></a>類別敘述(class expressions)</h4><ul>\n<li>類別敘述是定義類別的另一種方法。類別敘述可以有名稱或是無名稱。賦予一個有名稱類別敘述的名稱只在類別主體(class’s body)中有作用。（✍ 其實跟之前提到的Function Expressions一樣概念）<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; unnamed</span><br><span class=\"line\">var Polygon &#x3D; class &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F; named</span><br><span class=\"line\">var Polygon &#x3D; class Polygon &#123;</span><br><span class=\"line\">  constructor(height, width) &#123;</span><br><span class=\"line\">    this.height &#x3D; height;</span><br><span class=\"line\">    this.width &#x3D; width;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<hr>\n<h3 id=\"使用JSON\"><a href=\"#使用JSON\" class=\"headerlink\" title=\"使用JSON\"></a>使用JSON</h3><ul>\n<li>JSON要求在字符串和属性用雙引號， 但引號無效。</li>\n<li>我们使用 . 或 [] 訪問对象内的数据</li>\n<li>JSON.parse<br>用於將文字轉成json object<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">request.responseType = <span class=\"string\">&#x27;text&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> superHeroes = <span class=\"built_in\">JSON</span>.parse(superHeroesText); </span><br></pre></td></tr></table></figure></li>\n<li>JSON.stringify<br>用於將json object轉成json string<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myJSON = &#123; <span class=\"string\">&quot;name&quot;</span>: <span class=\"string\">&quot;Chris&quot;</span>, <span class=\"string\">&quot;age&quot;</span>: <span class=\"string\">&quot;38&quot;</span> &#125;; <span class=\"built_in\">console</span>.log(myJSON)</span><br><span class=\"line\"><span class=\"keyword\">var</span> myString = <span class=\"built_in\">JSON</span>.stringify(myJSON);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(myString)<span class=\"comment\">//string:&#123;&quot;name&quot;:&quot;Chris&quot;,&quot;age&quot;:&quot;38&quot;&#125;</span></span><br></pre></td></tr></table></figure>\n\n\n</li>\n</ul>\n<h2 id=\"事件-Event\"><a href=\"#事件-Event\" class=\"headerlink\" title=\"事件(Event)\"></a>事件(Event)</h2><ul>\n<li>好得寫法是找到(select)button並添加事件，避免汙染HTML。</li>\n<li>關於button.onclick vs addEventListener<ul>\n<li>on會覆蓋上一个事件</li>\n<li>addEventListener事件，可以多次绑定同一个事件并且不会覆盖上一个事件</li>\n</ul>\n</li>\n</ul>\n<p>ref:<a href=\"https://codertw.com/%E7%A8%8B%E5%BC%8F%E8%AA%9E%E8%A8%80/42343/\">JS裡addEventListener和on的區別</a></p>\n<h2 id=\"延伸：Lint-工具\"><a href=\"#延伸：Lint-工具\" class=\"headerlink\" title=\"延伸：Lint 工具\"></a>延伸：Lint 工具</h2><p>在電腦科學中，lint是一種工具程式的名稱，它用來標記原始碼中，某些可疑的、不具結構性（可能造成bug）的段落。它是一種靜態程式分析工具</p>\n<h3 id=\"JSLint\"><a href=\"#JSLint\" class=\"headerlink\" title=\"JSLint\"></a>JSLint</h3><p>JSLint 幫你檢查未定義的變數、函數、陳述式結尾有沒有加分號(;)、變數使用之前要先用 var 宣告、使用非數字的變數要用 === 或 !== 讓比對的時候不要自動進行轉型(Casting)、盡量不要使用 eval 函數、… 好多好多</p>\n<h3 id=\"ESLint\"><a href=\"#ESLint\" class=\"headerlink\" title=\"ESLint\"></a>ESLint</h3><p>包括格式檢驗及質量效驗（未使用變量、三等號、全局變量聲明等問题）<br>自由選擇要使用哪些規則，對 &gt;label info@ES6%}  還有 JSX 的支援度跟其他 linter 相較之下也是最高的</p>\n<p>註： prettier 只是格式的檢驗（空格 格式化），不会對代码质量进行校验。但有些檢驗，ESLint沒有，所以可以ESLint＋prettier一起使用，也可以視使用情況不使用 Prettier。</p>\n<h2 id=\"其他練習\"><a href=\"#其他練習\" class=\"headerlink\" title=\"其他練習\"></a>其他練習</h2><h2 id=\"上述概念練習\"><a href=\"#上述概念練習\" class=\"headerlink\" title=\"上述概念練習\"></a>上述概念練習</h2><p><a href=\"https://github.com/minilabmemo/simple_js_demo\">simple_js_demo</a></p>\n<h2 id=\"JS-與-canvas-元素\"><a href=\"#JS-與-canvas-元素\" class=\"headerlink\" title=\"JS 與 canvas 元素\"></a>JS 與 canvas 元素</h2><h3 id=\"基礎繪製說明\"><a href=\"#基礎繪製說明\" class=\"headerlink\" title=\"基礎繪製說明\"></a>基礎繪製說明</h3><p>Canvas 是H5新出來的標籤</p>\n<ul>\n<li><p>元素需要有闭合标签</p>\n</li>\n<li><p>基本上現今所有主流的瀏覽器都有支援</p>\n</li>\n<li><p>所有元素定位皆相對於此左上角原點</p>\n<br>\n</li>\n<li><p>HTML</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;canvas id&#x3D;&quot;canvas&quot; width&#x3D;&quot;300&quot; height&#x3D;&quot;300&quot;&gt;</span><br><span class=\"line\">&lt;&#x2F;canvas&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>JS</p>\n</li>\n<li><p>圓形ctx.arc(x, y, 半徑, 開始弧度, 結束弧度 )<br>0~2 pi =360°<br>更多弧度示意圖：<a href=\"https://zh.wikipedia.org/wiki/%E5%BC%A7%E5%BA%A6\">弧度</a></p>\n</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var canvas &#x3D; document.getElementById(&#39;canvas&#39;);</span><br><span class=\"line\">var ctx &#x3D; canvas.getContext(&#39;2d&#39;);</span><br><span class=\"line\">ctx.fillStyle &#x3D; &#39;green&#39;;</span><br><span class=\"line\">ctx.fillRect(10, 10, 100, 100);&#x2F;&#x2F;畫矩形 x start,y start,width,height</span><br></pre></td></tr></table></figure>\n<p>利用漸變色及貝斯曲線或是填入圖案，繪製文字，可做出很多豐富的圖案，還有動畫行星/時鐘，滑鼠動畫，像素控制等，詳請見下方文件</p>\n<p>ref:<a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial\">Canvas 教學文件</a></p>\n<h3 id=\"彈跳彩球範例\"><a href=\"#彈跳彩球範例\" class=\"headerlink\" title=\"彈跳彩球範例\"></a>彈跳彩球範例</h3><p>Ｒef: <a href=\"https://developer.mozilla.org/zh-TW/docs/Learn/JavaScript/Objects/Object_building_practice\">物件建構實作</a></p>\n<h3 id=\"破撞說明\"><a href=\"#破撞說明\" class=\"headerlink\" title=\"破撞說明\"></a>破撞說明</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https:&#x2F;&#x2F;developer.mozilla.org&#x2F;zh-CN&#x2F;docs&#x2F;Games&#x2F;Techniques&#x2F;2D_collision_detection</span><br><span class=\"line\">var circle1 &#x3D; &#123;radius: 20, x: 5, y: 5&#125;;&#x2F;&#x2F;radius半徑及座標</span><br><span class=\"line\">var circle2 &#x3D; &#123;radius: 12, x: 10, y: 5&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">var dx &#x3D; circle1.x - circle2.x;</span><br><span class=\"line\">var dy &#x3D; circle1.y - circle2.y;</span><br><span class=\"line\">var distance &#x3D; Math.sqrt(dx * dx + dy * dy);&#x2F;&#x2F;平面兩點之間距離公式</span><br><span class=\"line\"></span><br><span class=\"line\">if (distance &lt; circle1.radius + circle2.radius) &#123; &#x2F;&#x2F;原形半徑相加&#x3D;兩圓碰撞時的距離</span><br><span class=\"line\">    &#x2F;&#x2F; collision detected!</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"動畫操控範例說明\"><a href=\"#動畫操控範例說明\" class=\"headerlink\" title=\"動畫操控範例說明\"></a>動畫操控範例說明</h3><p><a href=\"https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations\">https://developer.mozilla.org/zh-TW/docs/Web/API/Canvas_API/Tutorial/Basic_animations</a></p>\n<h3 id=\"排程更新\"><a href=\"#排程更新\" class=\"headerlink\" title=\"排程更新\"></a>排程更新</h3><p>第一種作法是利用window.setInterval()與window.setTimeout()方法。</p>\n<p>Note: 針對新版瀏覽器建議採用window.requestAnimationFrame()方法。方法為動畫提供更順暢更有效率的方式來執行,當系統準備好繪製畫面時,藉由呼叫動畫andmation frame()的callback函數。</p>\n<p><a href=\"https://www.pluralsight.com/guides/how-to-use-requestanimationframe-with-react\">requestanimationframe-with-react</a><br><a href=\"https://codertw.com/%E5%89%8D%E7%AB%AF%E9%96%8B%E7%99%BC/260087/\">深入理解requestAnimationFrame的動畫迴圈</a><br><a href=\"https://www.dazhuanlan.com/2019/12/25/5e024ca3eeb4d/\">Web 計時與動畫 </a><br><a href=\"https://blog.camel2243.com/2017/01/31/javascript-requestanimationframe-%E5%84%AA%E5%8C%96%E5%8B%95%E7%95%AB%E6%95%88%E7%8E%87%E8%88%87%E8%B3%87%E6%BA%90/\">[javascript] requestAnimationFrame 優化動畫效率與資源</a></p>\n<h3 id=\"Event操控範例說明\"><a href=\"#Event操控範例說明\" class=\"headerlink\" title=\"Event操控範例說明\"></a>Event操控範例說明</h3><p><a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations\">https://developer.mozilla.org/en-US/docs/Web/API/Canvas_API/Tutorial/Advanced_animations</a><br>這邊的話可以看到，Event滑鼠控制只能針對整個畫布做操作，每次更新都是更新畫布，內容物件是不存在的。</p>\n<p>延伸:<a href=\"https://www.itread01.com/content/1544856246.html\">Canvas和SVG</a><br>Canvas是點陣圖，受解析度影響，SVG是向量圖。<br>使用svg有好有壞:<br>好處是方便操作dom元素, 可操作元素。<br>壞處是渲染效率不高, 在數據量較大時頁面易掉幀, 卡頓，不適合遊戲。</p>\n<h3 id=\"D3-操控SVG或是Canvas\"><a href=\"#D3-操控SVG或是Canvas\" class=\"headerlink\" title=\"D3 操控SVG或是Canvas\"></a>D3 操控SVG或是Canvas</h3><p><a href=\"http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/\">http://blog.infographics.tw/2015/07/optimize-d3-with-canvas/</a></p>"}],"PostAsset":[],"PostCategory":[{"post_id":"cld71fhal0010kp2xcqrq1ei3","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhau0019kp2x2lyo1o96"},{"post_id":"cld71fhal0010kp2xcqrq1ei3","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhav001ckp2x8yvj6z5q"},{"post_id":"cld71fhaf000mkp2xd5277gvf","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhba002bkp2xcs5m08bh"},{"post_id":"cld71fhaf000mkp2xd5277gvf","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhba002dkp2xab3t9b9y"},{"post_id":"cld71fhaf000mkp2xd5277gvf","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbc002hkp2x5dp9b1b2"},{"post_id":"cld71fha50008kp2xc4gt13u3","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbc002jkp2xadmv8d8k"},{"post_id":"cld71fha50008kp2xc4gt13u3","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhbd002mkp2x9swtdx8l"},{"post_id":"cld71fha50008kp2xc4gt13u3","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbe002pkp2xbzjfdfi2"},{"post_id":"cld71fhag000okp2x745r57tp","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbf002skp2x8aancsza"},{"post_id":"cld71fhag000okp2x745r57tp","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhbg002wkp2x6wdnehhp"},{"post_id":"cld71fhag000okp2x745r57tp","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbh002zkp2x8umgem88"},{"post_id":"cld71fhak000ykp2x34ra96ni","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbn003fkp2x6b7i2odu"},{"post_id":"cld71fhak000ykp2x34ra96ni","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbn003gkp2xgbj1gdu8"},{"post_id":"cld71fhak000ykp2x34ra96ni","category_id":"cld71fhbj0033kp2x6ma78hvk","_id":"cld71fhbo003jkp2xeea5513g"},{"post_id":"cld71fha60009kp2x2xaq955x","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbo003lkp2xd9xza4nw"},{"post_id":"cld71fha60009kp2x2xaq955x","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhbp003pkp2xhegihb7h"},{"post_id":"cld71fha60009kp2x2xaq955x","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbq003qkp2xfbd531tz"},{"post_id":"cld71fhan0013kp2xc81obh40","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbq003tkp2xdf313ni9"},{"post_id":"cld71fhan0013kp2xc81obh40","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbr003vkp2xda0mhp29"},{"post_id":"cld71fhan0013kp2xc81obh40","category_id":"cld71fhbj0033kp2x6ma78hvk","_id":"cld71fhbr003zkp2xfcwl1m38"},{"post_id":"cld71fha9000dkp2xheyodnpu","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbs0040kp2xdmpy58eu"},{"post_id":"cld71fha9000dkp2xheyodnpu","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhbt0043kp2x50433pe3"},{"post_id":"cld71fha9000dkp2xheyodnpu","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbt0045kp2xgqul6hrl"},{"post_id":"cld71fhaq0015kp2x1ecd3x7t","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbt0049kp2xhdow24g3"},{"post_id":"cld71fhaq0015kp2x1ecd3x7t","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbu004akp2xfte4d8w3"},{"post_id":"cld71fhaq0015kp2x1ecd3x7t","category_id":"cld71fhbj0033kp2x6ma78hvk","_id":"cld71fhbu004dkp2x0ilqe4hf"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbv004ekp2xghldc76w"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbv004gkp2xewe96kjm"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","category_id":"cld71fhbj0033kp2x6ma78hvk","_id":"cld71fhbw004jkp2x1gdk48va"},{"post_id":"cld71fhau001bkp2xazbi1zwv","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbw004lkp2xh0z75ktz"},{"post_id":"cld71fhau001bkp2xazbi1zwv","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhbx004pkp2xfnb8bmk6"},{"post_id":"cld71fhau001bkp2xazbi1zwv","category_id":"cld71fhbj0033kp2x6ma78hvk","_id":"cld71fhbx004qkp2x5vz512zu"},{"post_id":"cld71fhab000ekp2xaxueaabn","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhby004tkp2x7lv520xd"},{"post_id":"cld71fhab000ekp2xaxueaabn","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhby004vkp2x8zws176l"},{"post_id":"cld71fhab000ekp2xaxueaabn","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhbz004zkp2x0nmjen2u"},{"post_id":"cld71fhax001hkp2x7frh3apl","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhbz0050kp2x7xr2fyhj"},{"post_id":"cld71fhax001hkp2x7frh3apl","category_id":"cld71fhbv004fkp2x4ld5973i","_id":"cld71fhc00053kp2x36fu0kz7"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc00055kp2xeqlm9n55"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc00058kp2x5ffo68y5"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhc1005akp2x9op0f5ug"},{"post_id":"cld71fha40007kp2xhuc80a72","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc1005ekp2xarz3gzs7"},{"post_id":"cld71fha40007kp2xhuc80a72","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc2005ikp2xgb98dzyi"},{"post_id":"cld71fha40007kp2xhuc80a72","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhc2005jkp2xfudhfch0"},{"post_id":"cld71fhb4001vkp2xdeec9zot","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc3005nkp2xhy8udyir"},{"post_id":"cld71fhb4001vkp2xdeec9zot","category_id":"cld71fhc1005fkp2xg6do8oju","_id":"cld71fhc3005pkp2x1ewz5wzn"},{"post_id":"cld71fhad000jkp2x6huyeok5","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc4005skp2x6fay0ocd"},{"post_id":"cld71fhad000jkp2x6huyeok5","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc5005vkp2xbi9p14f9"},{"post_id":"cld71fhad000jkp2x6huyeok5","category_id":"cld71fhb5001zkp2xdxbpe6wc","_id":"cld71fhc5005xkp2xfsjc37v2"},{"post_id":"cld71fhb60021kp2x182igmm6","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc70062kp2x2a7w2uj1"},{"post_id":"cld71fhb60021kp2x182igmm6","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc70065kp2x46gweurw"},{"post_id":"cld71fhb60021kp2x182igmm6","category_id":"cld71fhc4005rkp2x3jsic08x","_id":"cld71fhc70067kp2xdie1073m"},{"post_id":"cld71fhb70023kp2x1kwz2d2s","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc8006akp2xabalcoy4"},{"post_id":"cld71fhb70023kp2x1kwz2d2s","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc8006bkp2x7ooscp0q"},{"post_id":"cld71fhb70023kp2x1kwz2d2s","category_id":"cld71fhc4005rkp2x3jsic08x","_id":"cld71fhc9006dkp2x1lt7gh4m"},{"post_id":"cld71fhb80026kp2xhed309b4","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhc9006fkp2xg6z55asc"},{"post_id":"cld71fhb80026kp2xhed309b4","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhc9006hkp2xf9kb2lmq"},{"post_id":"cld71fhb80026kp2xhed309b4","category_id":"cld71fhc60061kp2xhqey5hxn","_id":"cld71fhcb006jkp2xe8gicv2l"},{"post_id":"cld71fhba002ckp2xdqe41sl6","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcb006mkp2xd17p7bwv"},{"post_id":"cld71fhba002ckp2xdqe41sl6","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhcb006pkp2x7x5p25xw"},{"post_id":"cld71fhba002ckp2xdqe41sl6","category_id":"cld71fhc8006ckp2x2py56kko","_id":"cld71fhcc006skp2xe2323hnr"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcc006vkp2xb7fk5ik2"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhcg006xkp2x3na15gn5"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","category_id":"cld71fhc9006gkp2x0sm97izf","_id":"cld71fhci006ykp2x0u80cq1z"},{"post_id":"cld71fhah000skp2xh9ay8j3h","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcj0070kp2x14szc0t4"},{"post_id":"cld71fhah000skp2xh9ay8j3h","category_id":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhcj0072kp2xeislddhu"},{"post_id":"cld71fhah000skp2xh9ay8j3h","category_id":"cld71fhcc006rkp2xh6jd1f2r","_id":"cld71fhck0074kp2x5k65973q"},{"post_id":"cld71fhbd002kkp2x5gntcxi5","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhck0077kp2xgveebosw"},{"post_id":"cld71fhbd002kkp2x5gntcxi5","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhcl007akp2xdd1d8trp"},{"post_id":"cld71fhbd002kkp2x5gntcxi5","category_id":"cld71fhcg006wkp2x1ecx8tc1","_id":"cld71fhcm007dkp2x4g9c9xl8"},{"post_id":"cld71fhbe002nkp2x96869jed","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcm007fkp2xb6i1d965"},{"post_id":"cld71fhbe002nkp2x96869jed","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhcm007hkp2xgw5f9al8"},{"post_id":"cld71fhbe002nkp2x96869jed","category_id":"cld71fhcg006wkp2x1ecx8tc1","_id":"cld71fhcn007ikp2xafx51nzh"},{"post_id":"cld71fhbe002qkp2xhxg15t42","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcn007mkp2xbksh3s4x"},{"post_id":"cld71fhbe002qkp2xhxg15t42","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhco007okp2xdq29eoq0"},{"post_id":"cld71fhbe002qkp2xhxg15t42","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhco007skp2xdpgk3dz3"},{"post_id":"cld71fhbe002qkp2xhxg15t42","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhcp007tkp2x4gnm18e6"},{"post_id":"cld71fhbf002tkp2x61ba4igr","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcp007wkp2xesshfxc4"},{"post_id":"cld71fhbf002tkp2x61ba4igr","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhcp007ykp2x7olf641m"},{"post_id":"cld71fhbf002tkp2x61ba4igr","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcq0082kp2x988s0xli"},{"post_id":"cld71fhbf002tkp2x61ba4igr","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhcq0083kp2x2u7z63n1"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcr0086kp2xf99a87ml"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhcr0088kp2x893ohx1u"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcs008bkp2xa3eu7na1"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhcs008ekp2xexqgbvjd"},{"post_id":"cld71fhai000ukp2x1tps0bfo","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhct008gkp2xb0okhd1e"},{"post_id":"cld71fhai000ukp2x1tps0bfo","category_id":"cld71fhbg002ukp2xf8942u5s","_id":"cld71fhct008ikp2x3oxwht7t"},{"post_id":"cld71fhai000ukp2x1tps0bfo","category_id":"cld71fhco007qkp2x30c25qa1","_id":"cld71fhct008kkp2xcrv03evt"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcu008mkp2xgl9jc7tt"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhcv008okp2xbnnt47pk"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcv008qkp2xe6y9af6m"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhcv008rkp2xgig5ayfu"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcw008tkp2x8fhq5zjd"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhcw008wkp2x3sh69xe8"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcx008zkp2xf5fthpkb"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhcx0092kp2x5olm7l01"},{"post_id":"cld71fhbk0036kp2x9umv4180","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhcy0095kp2x00tnchkg"},{"post_id":"cld71fhbk0036kp2x9umv4180","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhcy0098kp2xe2wbhqee"},{"post_id":"cld71fhbk0036kp2x9umv4180","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhcz009bkp2xg20c5qeu"},{"post_id":"cld71fhbk0036kp2x9umv4180","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhd0009ekp2x4hn25350"},{"post_id":"cld71fhbl003akp2xbocg5l7m","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd0009gkp2x7oy32d5y"},{"post_id":"cld71fhbl003akp2xbocg5l7m","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhd0009hkp2xawsa5plm"},{"post_id":"cld71fhbl003akp2xbocg5l7m","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd1009lkp2x3czhgkv6"},{"post_id":"cld71fhbl003akp2xbocg5l7m","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhd1009nkp2xdfnxhfb4"},{"post_id":"cld71fhbm003ckp2xces72t28","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd1009qkp2x030fgwcv"},{"post_id":"cld71fhbm003ckp2xces72t28","category_id":"cld71fhcs008fkp2x6d4k8m1y","_id":"cld71fhd1009skp2x33gyf2fk"},{"post_id":"cld71fha10003kp2xfbfb584j","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd2009ukp2xeasw33jh"},{"post_id":"cld71fha10003kp2xfbfb584j","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhd2009wkp2xc0vrec8u"},{"post_id":"cld71fha10003kp2xfbfb584j","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd2009ykp2xa03sbl99"},{"post_id":"cld71fha10003kp2xfbfb584j","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhd300a0kp2x9r5ccxbc"},{"post_id":"cld71fhaw001fkp2xdceyan09","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd300a2kp2xhjo8anfp"},{"post_id":"cld71fhaw001fkp2xdceyan09","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhd300a5kp2xaimub0ah"},{"post_id":"cld71fhaw001fkp2xdceyan09","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd400a7kp2x0q5r8rad"},{"post_id":"cld71fhaw001fkp2xdceyan09","category_id":"cld71fhcv008nkp2x39klb5u9","_id":"cld71fhd400aakp2x133jc228"},{"post_id":"cld71fhb2001pkp2xd7xdaisq","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd400adkp2x4af8ef81"},{"post_id":"cld71fhb2001pkp2xd7xdaisq","category_id":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhd500afkp2x8qgj17jf"},{"post_id":"cld71fhb2001pkp2xd7xdaisq","category_id":"cld71fhcv008skp2xe7tr0hgk","_id":"cld71fhd500aikp2x3bc4alht"},{"post_id":"cld71fhb3001skp2x0ght1n4v","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd500alkp2x39ba3t08"},{"post_id":"cld71fhb3001skp2x0ght1n4v","category_id":"cld71fhc1005bkp2x2uuq6yjr","_id":"cld71fhd600ankp2x5085bqlb"},{"post_id":"cld71fhb3001skp2x0ght1n4v","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd600arkp2x4px7920j"},{"post_id":"cld71fhb3001skp2x0ght1n4v","category_id":"cld71fhcy0099kp2x4q989r73","_id":"cld71fhd600askp2x3dnuam0g"},{"post_id":"cld71fhb5001ykp2xdinc0q58","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd700aukp2xe71m6ah6"},{"post_id":"cld71fhb5001ykp2xdinc0q58","category_id":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhd700avkp2x1rd2gzsz"},{"post_id":"cld71fhb5001ykp2xdinc0q58","category_id":"cld71fhd0009fkp2xctk73sh5","_id":"cld71fhd700axkp2x2evlat8o"},{"post_id":"cld71fhb90029kp2xcg4dcmps","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd800aykp2x958i2did"},{"post_id":"cld71fhb90029kp2xcg4dcmps","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhd800b0kp2x9drccvpd"},{"post_id":"cld71fhb90029kp2xcg4dcmps","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhd800b2kp2xgp7sdznn"},{"post_id":"cld71fhb90029kp2xcg4dcmps","category_id":"cld71fhd0009kkp2xbxre81z3","_id":"cld71fhd900b5kp2x8rdq1mk7"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd900b7kp2x49jx9axm"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhd900b9kp2xft83an7w"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fhcv008skp2xe7tr0hgk","_id":"cld71fhd900bbkp2x13u41hhx"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhd900bckp2xf5ou4ybh"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhda00bekp2x25k3enn3"},{"post_id":"cld71fhay001kkp2x3fvr94n2","category_id":"cld71fhd3009zkp2x4xu58fwl","_id":"cld71fhda00bfkp2xbgui5twd"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhda00bhkp2xehhe4qiq"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fhbb002gkp2xbmz05lqe","_id":"cld71fhda00bjkp2x08l6bh6b"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fhcv008skp2xe7tr0hgk","_id":"cld71fhda00bmkp2xev1zf9tp"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhda00bokp2xgfgs4mti"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fhae000kkp2x8tsybvoe","_id":"cld71fhdb00brkp2x42jm7pnl"},{"post_id":"cld71fhb0001mkp2x1zwv6has","category_id":"cld71fhd300a4kp2x91d38spv","_id":"cld71fhdb00btkp2xe66ofsnx"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhdb00bwkp2x3vwg5ga1"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhdb00bxkp2x4u3e9qou"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhdc00bzkp2x98945m3z"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhd1009rkp2x6j4a3zo2","_id":"cld71fhdc00c0kp2xeg482xlw"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhdc00c1kp2xgsyf2oyg"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhdc00c4kp2xevv6d3kb"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhdc00c6kp2xbo06g0fm"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","category_id":"cld71fhd400abkp2x7l6zd2b1","_id":"cld71fhdd00c9kp2xgfhferzf"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhdd00cakp2xbntlfi64"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhdd00cckp2xbc05gr24"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhdd00cdkp2x6y32ghpt"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhck0076kp2x5brl2x1i","_id":"cld71fhdd00cfkp2x42yw7jd7"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhd2009vkp2xhmo0apl6","_id":"cld71fhdd00chkp2x3csv5vrv"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhd500ahkp2x2x4o3nj7","_id":"cld71fhde00ckkp2x9h0k2v8h"},{"post_id":"cld71fh9x0001kp2xd2ibb43d","category_id":"cld71fhd600aqkp2x5t9x9cmr","_id":"cld71fhde00cmkp2xcu262vob"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","category_id":"cld71fha20004kp2x8p5g7jnw","_id":"cld71fhdm00czkp2x4g3o5cmv"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","category_id":"cld71fhah000pkp2x2m559w67","_id":"cld71fhdm00d1kp2x2dms4bcq"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","category_id":"cld71fhbe002okp2x9dxk0o0x","_id":"cld71fhdm00d2kp2x64v8f5kv"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","category_id":"cld71fhd0009kkp2xbxre81z3","_id":"cld71fhdn00d3kp2x5dzz02vy"}],"PostTag":[{"post_id":"cld71fh9x0001kp2xd2ibb43d","tag_id":"cld71fha30005kp2x7g25g5ni","_id":"cld71fha9000ckp2x8hhh71no"},{"post_id":"cld71fha10003kp2xfbfb584j","tag_id":"cld71fha7000bkp2x019v3hfr","_id":"cld71fhad000ikp2xe6i27dqf"},{"post_id":"cld71fhad000jkp2x6huyeok5","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhag000nkp2x58xn2koj"},{"post_id":"cld71fhaf000mkp2xd5277gvf","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhah000qkp2xci2pbcr1"},{"post_id":"cld71fha40007kp2xhuc80a72","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhai000tkp2xhn734d5w"},{"post_id":"cld71fha40007kp2xhuc80a72","tag_id":"cld71fhaf000lkp2x2kfb388y","_id":"cld71fhaj000wkp2x60m3804n"},{"post_id":"cld71fha50008kp2xc4gt13u3","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhal000zkp2x9nggadqf"},{"post_id":"cld71fha60009kp2x2xaq955x","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhaq0014kp2xalzacxfo"},{"post_id":"cld71fha9000dkp2xheyodnpu","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhau001akp2xca1h1rza"},{"post_id":"cld71fhab000ekp2xaxueaabn","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhax001gkp2xc2t18ixx"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","tag_id":"cld71fha30005kp2x7g25g5ni","_id":"cld71fhb0001lkp2xdddn1xy7"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhb1001okp2x0qlu8uu7"},{"post_id":"cld71fhac000hkp2xgmxd3cn0","tag_id":"cld71fhaf000lkp2x2kfb388y","_id":"cld71fhb3001rkp2x6kjq5wv2"},{"post_id":"cld71fhag000okp2x745r57tp","tag_id":"cld71fha30005kp2x7g25g5ni","_id":"cld71fhb4001ukp2x85csg72u"},{"post_id":"cld71fhag000okp2x745r57tp","tag_id":"cld71fhac000gkp2xdc0n5mup","_id":"cld71fhb5001xkp2xdauw3tpg"},{"post_id":"cld71fhag000okp2x745r57tp","tag_id":"cld71fhay001jkp2x1glzd8s2","_id":"cld71fhb60020kp2x098re27z"},{"post_id":"cld71fhah000skp2xh9ay8j3h","tag_id":"cld71fhb2001qkp2xbotrbp4q","_id":"cld71fhb70024kp2xfzca0fov"},{"post_id":"cld71fhah000skp2xh9ay8j3h","tag_id":"cld71fhb4001wkp2x7fmue2pn","_id":"cld71fhb80027kp2xa15gfcio"},{"post_id":"cld71fhai000ukp2x1tps0bfo","tag_id":"cld71fhb60022kp2x201i7bgb","_id":"cld71fhbg002vkp2xan3r5758"},{"post_id":"cld71fhai000ukp2x1tps0bfo","tag_id":"cld71fhb80028kp2x1dxj2idh","_id":"cld71fhbh002ykp2x4q4030fo"},{"post_id":"cld71fhai000ukp2x1tps0bfo","tag_id":"cld71fhbb002fkp2x2kzx1yao","_id":"cld71fhbj0032kp2x5sgzc1m5"},{"post_id":"cld71fhai000ukp2x1tps0bfo","tag_id":"cld71fhbd002lkp2xdpyd0rr7","_id":"cld71fhbk0035kp2xcqlq6mk7"},{"post_id":"cld71fhak000ykp2x34ra96ni","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhbl0039kp2x47zg674v"},{"post_id":"cld71fhak000ykp2x34ra96ni","tag_id":"cld71fhbh0030kp2x7ycfd390","_id":"cld71fhbm003bkp2xb6lo9h20"},{"post_id":"cld71fhal0010kp2xcqrq1ei3","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhbo003kkp2xefz5d24w"},{"post_id":"cld71fhal0010kp2xcqrq1ei3","tag_id":"cld71fhbm003dkp2x97f70yki","_id":"cld71fhbo003mkp2xhujg46bo"},{"post_id":"cld71fhan0013kp2xc81obh40","tag_id":"cld71fhbo003hkp2x83t85oua","_id":"cld71fhbr003ukp2x1vcg4np4"},{"post_id":"cld71fhan0013kp2xc81obh40","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhbr003wkp2x6n5ogzmx"},{"post_id":"cld71fhaq0015kp2x1ecd3x7t","tag_id":"cld71fhbo003hkp2x83t85oua","_id":"cld71fhbt0044kp2xawzj966m"},{"post_id":"cld71fhaq0015kp2x1ecd3x7t","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhbt0046kp2xfhxc74cf"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","tag_id":"cld71fhbo003hkp2x83t85oua","_id":"cld71fhbw004ikp2xdqyia5uu"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhbw004kkp2x6ivcbxpd"},{"post_id":"cld71fhat0018kp2xcdgtbsj2","tag_id":"cld71fhbu004bkp2xe6uw0cui","_id":"cld71fhbx004okp2x8vcod32y"},{"post_id":"cld71fhau001bkp2xazbi1zwv","tag_id":"cld71fhbv004hkp2xgj2ica8m","_id":"cld71fhby004ukp2x09b45m0j"},{"post_id":"cld71fhau001bkp2xazbi1zwv","tag_id":"cld71fhbf002rkp2x30nqf44k","_id":"cld71fhby004wkp2x3py8bz35"},{"post_id":"cld71fhaw001fkp2xdceyan09","tag_id":"cld71fhby004skp2x2l8mgz82","_id":"cld71fhc00054kp2x1o9h65s4"},{"post_id":"cld71fhaw001fkp2xdceyan09","tag_id":"cld71fhbz004ykp2x2hwgg2bf","_id":"cld71fhc00057kp2x5foefeyu"},{"post_id":"cld71fhax001hkp2x7frh3apl","tag_id":"cld71fhbz0052kp2x5odc50we","_id":"cld71fhc1005dkp2x45e46kvu"},{"post_id":"cld71fhax001hkp2x7frh3apl","tag_id":"cld71fhb4001wkp2x7fmue2pn","_id":"cld71fhc2005gkp2x4o1f9hsq"},{"post_id":"cld71fhay001kkp2x3fvr94n2","tag_id":"cld71fhbz0052kp2x5odc50we","_id":"cld71fhc4005qkp2x67krfe0i"},{"post_id":"cld71fhay001kkp2x3fvr94n2","tag_id":"cld71fhc2005hkp2xbyoi1q9r","_id":"cld71fhc4005tkp2xfasqffhe"},{"post_id":"cld71fhay001kkp2x3fvr94n2","tag_id":"cld71fhc3005lkp2xdf0k4wjl","_id":"cld71fhc5005wkp2x66gx2g1a"},{"post_id":"cld71fhb0001mkp2x1zwv6has","tag_id":"cld71fhbz0052kp2x5odc50we","_id":"cld71fhc60060kp2x559w8bzb"},{"post_id":"cld71fhb0001mkp2x1zwv6has","tag_id":"cld71fhc4005ukp2x1ob66v60","_id":"cld71fhc70063kp2x1t4kgcza"},{"post_id":"cld71fhb2001pkp2xd7xdaisq","tag_id":"cld71fhbz0052kp2x5odc50we","_id":"cld71fhc70066kp2x2ebwh8zg"},{"post_id":"cld71fhb3001skp2x0ght1n4v","tag_id":"cld71fhb4001wkp2x7fmue2pn","_id":"cld71fhcb006kkp2x4xni5frg"},{"post_id":"cld71fhb3001skp2x0ght1n4v","tag_id":"cld71fhc80069kp2x8n9yafq6","_id":"cld71fhcb006nkp2xgi9a72n7"},{"post_id":"cld71fhb3001skp2x0ght1n4v","tag_id":"cld71fhc9006ekp2x0crl33ik","_id":"cld71fhcb006qkp2x80ez9vmd"},{"post_id":"cld71fhb4001vkp2xdeec9zot","tag_id":"cld71fhc9006ikp2xboe54tpc","_id":"cld71fhcc006tkp2x98v64k0o"},{"post_id":"cld71fhb5001ykp2xdinc0q58","tag_id":"cld71fhcb006okp2xgy5c6qff","_id":"cld71fhck0075kp2x5r0mck9v"},{"post_id":"cld71fhb5001ykp2xdinc0q58","tag_id":"cld71fhcc006ukp2xbf300t09","_id":"cld71fhcl0078kp2x5k2nh33d"},{"post_id":"cld71fhb5001ykp2xdinc0q58","tag_id":"cld71fhci006zkp2x07ke6t7j","_id":"cld71fhcl007bkp2xf6zy2dlh"},{"post_id":"cld71fhb60021kp2x182igmm6","tag_id":"cld71fhcj0073kp2xh0iwh2v2","_id":"cld71fhcn007lkp2xhbfv1ydr"},{"post_id":"cld71fhb60021kp2x182igmm6","tag_id":"cld71fhcl0079kp2x7qqjh01w","_id":"cld71fhco007nkp2x1074cret"},{"post_id":"cld71fhb60021kp2x182igmm6","tag_id":"cld71fhcm007ekp2x4tri4tv1","_id":"cld71fhco007rkp2x5xvdhk6a"},{"post_id":"cld71fhb70023kp2x1kwz2d2s","tag_id":"cld71fhcj0073kp2xh0iwh2v2","_id":"cld71fhcp007xkp2x9s909xw1"},{"post_id":"cld71fhb70023kp2x1kwz2d2s","tag_id":"cld71fhco007pkp2x2iudgnhz","_id":"cld71fhcp007zkp2xejugbjxl"},{"post_id":"cld71fhb80026kp2xhed309b4","tag_id":"cld71fha30005kp2x7g25g5ni","_id":"cld71fhcr0087kp2x5zpyfn72"},{"post_id":"cld71fhb80026kp2xhed309b4","tag_id":"cld71fhcp007ukp2xalgrdq37","_id":"cld71fhcs0089kp2xcm9oeq1p"},{"post_id":"cld71fhb80026kp2xhed309b4","tag_id":"cld71fhcp0080kp2xc8pue0s2","_id":"cld71fhcs008dkp2xa7ebc6mw"},{"post_id":"cld71fhb90029kp2xcg4dcmps","tag_id":"cld71fhcq0085kp2x0uijbhq7","_id":"cld71fhcw008vkp2xh2ey5vf3"},{"post_id":"cld71fhb90029kp2xcg4dcmps","tag_id":"cld71fhcs008ckp2x5uqtcm0u","_id":"cld71fhcx008ykp2x4vngfbcc"},{"post_id":"cld71fhb90029kp2xcg4dcmps","tag_id":"cld71fhct008hkp2xhhpw5vz6","_id":"cld71fhcx0091kp2xeswxeenm"},{"post_id":"cld71fhb90029kp2xcg4dcmps","tag_id":"cld71fhct008lkp2xeae18b0j","_id":"cld71fhcy0094kp2x1d8xdc0t"},{"post_id":"cld71fhb90029kp2xcg4dcmps","tag_id":"cld71fhcv008pkp2xekvl3pm6","_id":"cld71fhcy0097kp2x0k9adjts"},{"post_id":"cld71fhba002ckp2xdqe41sl6","tag_id":"cld71fhcw008ukp2xatr72t57","_id":"cld71fhcz009akp2x48ulcpqv"},{"post_id":"cld71fhba002ckp2xdqe41sl6","tag_id":"cld71fhb4001wkp2x7fmue2pn","_id":"cld71fhcz009dkp2x5putdneg"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","tag_id":"cld71fhcx0090kp2xgjqzfeao","_id":"cld71fhd0009jkp2xa6jae972"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","tag_id":"cld71fhcy0096kp2x1cbu64da","_id":"cld71fhd1009mkp2xdxey4ksg"},{"post_id":"cld71fhbb002ekp2xgsvoa4nn","tag_id":"cld71fhcz009ckp2xbjwa85u9","_id":"cld71fhd1009pkp2xax8ogo28"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","tag_id":"cld71fhd0009ikp2xerwu7b23","_id":"cld71fhd300a3kp2xhi9x3pge"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","tag_id":"cld71fhd1009okp2x2mafa0a4","_id":"cld71fhd400a6kp2x37jb9xfg"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","tag_id":"cld71fhd2009tkp2xamybcvtu","_id":"cld71fhd400a9kp2xfr6wa4kb"},{"post_id":"cld71fhbc002ikp2x6v4agnpm","tag_id":"cld71fhbz004ykp2x2hwgg2bf","_id":"cld71fhd400ackp2xapeqe6t4"},{"post_id":"cld71fhbd002kkp2x5gntcxi5","tag_id":"cld71fhd300a1kp2x2jv68e05","_id":"cld71fhd500agkp2xct8g0u2j"},{"post_id":"cld71fhbd002kkp2x5gntcxi5","tag_id":"cld71fhd400a8kp2xbv61b2aj","_id":"cld71fhd500ajkp2x35ryfulk"},{"post_id":"cld71fhbe002nkp2x96869jed","tag_id":"cld71fhd300a1kp2x2jv68e05","_id":"cld71fhd600amkp2x0xfee6dl"},{"post_id":"cld71fhbe002nkp2x96869jed","tag_id":"cld71fhaf000lkp2x2kfb388y","_id":"cld71fhd600aokp2x65gf5kc3"},{"post_id":"cld71fhbe002qkp2xhxg15t42","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhd800b1kp2x0zlkd1uu"},{"post_id":"cld71fhbe002qkp2xhxg15t42","tag_id":"cld71fhd1009okp2x2mafa0a4","_id":"cld71fhd800b3kp2x140t3rn7"},{"post_id":"cld71fhbe002qkp2xhxg15t42","tag_id":"cld71fhd700atkp2x4pal8ayu","_id":"cld71fhd900b6kp2x10lbfn9z"},{"post_id":"cld71fhbe002qkp2xhxg15t42","tag_id":"cld71fhbz004ykp2x2hwgg2bf","_id":"cld71fhd900b8kp2xhsvkci4i"},{"post_id":"cld71fhbf002tkp2x61ba4igr","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhda00bikp2x685d92g5"},{"post_id":"cld71fhbf002tkp2x61ba4igr","tag_id":"cld71fhd800b4kp2x5dr67dwd","_id":"cld71fhda00bkkp2x0fqfg92c"},{"post_id":"cld71fhbf002tkp2x61ba4igr","tag_id":"cld71fhd900bakp2xgwwr761j","_id":"cld71fhda00bnkp2x71hi7d0w"},{"post_id":"cld71fhbf002tkp2x61ba4igr","tag_id":"cld71fhbz004ykp2x2hwgg2bf","_id":"cld71fhda00bpkp2xgrpkhqg3"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhdb00bskp2x295jd626"},{"post_id":"cld71fhbg002xkp2x23yy0ucn","tag_id":"cld71fhda00blkp2x6svq1fxb","_id":"cld71fhdb00bukp2x82wt38id"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhdc00c3kp2xerky5ap8"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","tag_id":"cld71fhdb00bvkp2xdpyq286t","_id":"cld71fhdc00c5kp2x87dygls6"},{"post_id":"cld71fhbi0031kp2x9ag78cdo","tag_id":"cld71fhdb00bykp2x0wyd06tf","_id":"cld71fhdd00c8kp2x5m0feilb"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhdd00cgkp2x5nui5egb"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","tag_id":"cld71fhaf000lkp2x2kfb388y","_id":"cld71fhdd00cikp2xcem695t8"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","tag_id":"cld71fhdc00c7kp2x0osn9bdo","_id":"cld71fhde00clkp2xccsy6epc"},{"post_id":"cld71fhbj0034kp2x3f8l9jbp","tag_id":"cld71fhdd00cbkp2xhhguc0ld","_id":"cld71fhde00cnkp2xg4hpa6js"},{"post_id":"cld71fhbk0036kp2x9umv4180","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhde00cqkp2x4crk9dd8"},{"post_id":"cld71fhbk0036kp2x9umv4180","tag_id":"cld71fhdd00cjkp2xblrg5w72","_id":"cld71fhde00crkp2x2bpzasg8"},{"post_id":"cld71fhbk0036kp2x9umv4180","tag_id":"cld71fhde00cokp2x437p3kdl","_id":"cld71fhdf00ctkp2x437y3ftg"},{"post_id":"cld71fhbl003akp2xbocg5l7m","tag_id":"cld71fhd500akkp2xeik8cv2i","_id":"cld71fhdf00cukp2x8kttgraz"},{"post_id":"cld71fhbm003ckp2xces72t28","tag_id":"cld71fhaf000lkp2x2kfb388y","_id":"cld71fhdf00cvkp2xfo6e3exk"},{"post_id":"cld71fhbm003ckp2xces72t28","tag_id":"cld71fhde00cskp2x46so3oav","_id":"cld71fhdf00cwkp2x9z9v8v95"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","tag_id":"cld71fhcq0085kp2x0uijbhq7","_id":"cld71fhdn00d4kp2x5rye2mrt"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","tag_id":"cld71fhcs008ckp2x5uqtcm0u","_id":"cld71fhdn00d5kp2x3ysq5h7k"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","tag_id":"cld71fhdm00cykp2xg5li2r7x","_id":"cld71fhdn00d6kp2x4iq0fkm7"},{"post_id":"cld71fhdl00cxkp2x9riyekqg","tag_id":"cld71fhdm00d0kp2xgscm806d","_id":"cld71fhdn00d7kp2x3rb08ctp"}],"Tag":[{"name":"test","_id":"cld71fha30005kp2x7g25g5ni"},{"name":"error","_id":"cld71fha7000bkp2x019v3hfr"},{"name":"golang","_id":"cld71fhac000gkp2xdc0n5mup"},{"name":"vscode","_id":"cld71fhaf000lkp2x2kfb388y"},{"name":"cleanCode","_id":"cld71fhay001jkp2x1glzd8s2"},{"name":"Kubernetes","_id":"cld71fhb2001qkp2xbotrbp4q"},{"name":"CLI","_id":"cld71fhb4001wkp2x7fmue2pn"},{"name":"cloud","_id":"cld71fhb60022kp2x201i7bgb"},{"name":"storage","_id":"cld71fhb80028kp2x1dxj2idh"},{"name":"aws-s3","_id":"cld71fhbb002fkp2x2kzx1yao"},{"name":"MinIO","_id":"cld71fhbd002lkp2xdpyd0rr7"},{"name":"blog","_id":"cld71fhbf002rkp2x30nqf44k"},{"name":"docusaurus","_id":"cld71fhbh0030kp2x7ycfd390"},{"name":"gitbook","_id":"cld71fhbm003dkp2x97f70yki"},{"name":"hexo","_id":"cld71fhbo003hkp2x83t85oua"},{"name":"google_analytics","_id":"cld71fhbu004bkp2xe6uw0cui"},{"name":"hugo","_id":"cld71fhbv004hkp2xgj2ica8m"},{"name":"debug","_id":"cld71fhby004skp2x2l8mgz82"},{"name":"ing","_id":"cld71fhbz004ykp2x2hwgg2bf"},{"name":"docker","_id":"cld71fhbz0052kp2x5odc50we"},{"name":"elasticSearch","_id":"cld71fhc2005hkp2xbyoi1q9r"},{"name":"kibana","_id":"cld71fhc3005lkp2xdf0k4wjl"},{"name":"mongo","_id":"cld71fhc4005ukp2x1ob66v60"},{"name":"file","_id":"cld71fhc80069kp2x8n9yafq6"},{"name":"command","_id":"cld71fhc9006ekp2x0crl33ik"},{"name":"GitHub","_id":"cld71fhc9006ikp2xboe54tpc"},{"name":"heroku","_id":"cld71fhcb006okp2xgy5c6qff"},{"name":"deploy","_id":"cld71fhcc006ukp2xbf300t09"},{"name":"GUI","_id":"cld71fhci006zkp2x07ke6t7j"},{"name":"java","_id":"cld71fhcj0073kp2xh0iwh2v2"},{"name":"Memory","_id":"cld71fhcl0079kp2x7qqjh01w"},{"name":"IDEA","_id":"cld71fhcm007ekp2x4tri4tv1"},{"name":"spring","_id":"cld71fhco007pkp2x2iudgnhz"},{"name":"jmeter","_id":"cld71fhcp007ukp2xalgrdq37"},{"name":"qa","_id":"cld71fhcp0080kp2xc8pue0s2"},{"name":"javascript","_id":"cld71fhcq0085kp2x0uijbhq7"},{"name":"ES6","_id":"cld71fhcs008ckp2x5uqtcm0u"},{"name":"callback","_id":"cld71fhct008hkp2xhhpw5vz6"},{"name":"Promises","_id":"cld71fhct008lkp2xeae18b0j"},{"name":"aync/await","_id":"cld71fhcv008pkp2xekvl3pm6"},{"name":"linux","_id":"cld71fhcw008ukp2xatr72t57"},{"name":"Prometheus","_id":"cld71fhcx0090kp2xgjqzfeao"},{"name":"Grafana","_id":"cld71fhcy0096kp2x1cbu64da"},{"name":"monitor","_id":"cld71fhcz009ckp2xbjwa85u9"},{"name":"note","_id":"cld71fhd0009ikp2xerwu7b23"},{"name":"css","_id":"cld71fhd1009okp2x2mafa0a4"},{"name":"html","_id":"cld71fhd2009tkp2xamybcvtu"},{"name":"python","_id":"cld71fhd300a1kp2x2jv68e05"},{"name":"call by sharing","_id":"cld71fhd400a8kp2xbv61b2aj"},{"name":"react","_id":"cld71fhd500akkp2xeik8cv2i"},{"name":"css-in-js","_id":"cld71fhd700atkp2x4pal8ayu"},{"name":"ramda","_id":"cld71fhd800b4kp2x5dr67dwd"},{"name":"map","_id":"cld71fhd900bakp2xgwwr761j"},{"name":"recharts","_id":"cld71fhda00blkp2x6svq1fxb"},{"name":"Material-ui","_id":"cld71fhdb00bvkp2xdpyq286t"},{"name":"作品集範例","_id":"cld71fhdb00bykp2x0wyd06tf"},{"name":"lint","_id":"cld71fhdc00c7kp2x0osn9bdo"},{"name":"npm","_id":"cld71fhdd00cbkp2xhhguc0ld"},{"name":"JSX","_id":"cld71fhdd00cjkp2xblrg5w72"},{"name":"Babel","_id":"cld71fhde00cokp2x437p3kdl"},{"name":"IDE","_id":"cld71fhde00cskp2x46so3oav"},{"name":"閉包","_id":"cld71fhdm00cykp2xg5li2r7x"},{"name":"解構賦值","_id":"cld71fhdm00d0kp2xgscm806d"}]}}